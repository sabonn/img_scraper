{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0","program":"/Users/itayeshkar/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","bytemuck","--edition=2018","/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"extern_crate_alloc\"","-C","metadata=2b0c53042778b1a8","-C","extra-filename=-2b0c53042778b1a8","--out-dir","/Users/itayeshkar/Documents/GitHub/project/scrap/target/rls/debug/deps","-L","dependency=/Users/itayeshkar/Documents/GitHub/project/scrap/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/itayeshkar/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/itayeshkar/Documents/GitHub/project/scrap/target/rls/debug/deps/libbytemuck-2b0c53042778b1a8.rmeta"},"prelude":{"crate_id":{"name":"bytemuck","disambiguator":[11766701612680495145,0]},"crate_root":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src","external_crates":[{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5119190964148522055,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[10836880961308110442,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[9122960886372739080,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[16262469955255852816,0]}}],"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":0,"byte_end":11684,"line_start":1,"line_end":399,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":2241,"byte_end":2245,"line_start":58,"line_end":58,"column_start":11,"column_end":15},"alias_span":null,"name":"__core","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3462,"byte_end":3463,"line_start":95,"line_end":95,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3508,"byte_end":3509,"line_start":98,"line_end":98,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"AnyBitPattern","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":147},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3546,"byte_end":3563,"line_start":101,"line_end":101,"column_start":18,"column_end":35},"alias_span":null,"name":"CheckedBitPattern","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3613,"byte_end":3614,"line_start":106,"line_end":106,"column_start":19,"column_end":20},"alias_span":null,"name":"*","value":"Zeroable","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3668,"byte_end":3669,"line_start":108,"line_end":108,"column_start":29,"column_end":30},"alias_span":null,"name":"*","value":"ZeroableInOption","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3694,"byte_end":3695,"line_start":111,"line_end":111,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"Pod","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3739,"byte_end":3740,"line_start":113,"line_end":113,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3777,"byte_end":3778,"line_start":116,"line_end":116,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"NoUninit","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3817,"byte_end":3818,"line_start":119,"line_end":119,"column_start":21,"column_end":22},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3855,"byte_end":3856,"line_start":122,"line_end":122,"column_start":20,"column_end":21},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3897,"byte_end":3898,"line_start":125,"line_end":125,"column_start":22,"column_end":23},"alias_span":null,"name":"*","value":"TransparentWrapper","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":0,"byte_end":11684,"line_start":1,"line_end":399,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":267},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":514},{"krate":0,"index":966},{"krate":0,"index":975},{"krate":0,"index":977},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":515},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":523},{"krate":0,"index":525},{"krate":0,"index":527},{"krate":0,"index":529},{"krate":0,"index":531},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":563},{"krate":0,"index":566}],"decl_id":null,"docs":" This crate gives small utilities for casting between plain data types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11,"byte_end":33,"line_start":2,"line_end":2,"column_start":1,"column_end":23}},{"value":"allow(clippy :: match_like_matches_macro)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":34,"byte_end":77,"line_start":3,"line_end":3,"column_start":1,"column_end":44}},{"value":"/ This crate gives small utilities for casting between plain data types.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":211,"byte_end":285,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":286,"byte_end":289,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Basics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":290,"byte_end":303,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":304,"byte_end":307,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Data comes in five basic forms in Rust, so we have five basic casting","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":308,"byte_end":381,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ functions:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":382,"byte_end":396,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":397,"byte_end":400,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ * `T` uses [`cast`]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":401,"byte_end":424,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/ * `&T` uses [`cast_ref`]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":425,"byte_end":453,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/ * `&mut T` uses [`cast_mut`]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":454,"byte_end":486,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/ * `&[T]` uses [`cast_slice`]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":487,"byte_end":519,"line_start":17,"line_end":17,"column_start":1,"column_end":33}},{"value":"/ * `&mut [T]` uses [`cast_slice_mut`]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":520,"byte_end":560,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":561,"byte_end":564,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Some casts will never fail (eg: `cast::<u32, f32>` always works), other","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":565,"byte_end":640,"line_start":20,"line_end":20,"column_start":1,"column_end":76}},{"value":"/ casts might fail (eg: `cast_ref::<[u8; 4], u32>` will fail if the reference","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":641,"byte_end":720,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ isn't already aligned to 4). Each casting function has a \"try\" version which","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":721,"byte_end":801,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ will return a `Result`, and the \"normal\" version which will simply panic on","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":802,"byte_end":881,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ invalid input.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":882,"byte_end":900,"line_start":24,"line_end":24,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":901,"byte_end":904,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ## Using Your Own Types","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":905,"byte_end":932,"line_start":26,"line_end":26,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":933,"byte_end":936,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ All the functions here are guarded by the [`Pod`] trait, which is a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":937,"byte_end":1008,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ sub-trait of the [`Zeroable`] trait.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1009,"byte_end":1049,"line_start":29,"line_end":29,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1050,"byte_end":1053,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ If you're very sure that your type is eligible, you can implement those","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1054,"byte_end":1129,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ traits for your type and then they'll have full casting support. However,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1130,"byte_end":1207,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/ these traits are `unsafe`, and you should carefully read the requirements","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1208,"byte_end":1285,"line_start":33,"line_end":33,"column_start":1,"column_end":78}},{"value":"/ before adding the them to your own types.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1286,"byte_end":1331,"line_start":34,"line_end":34,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1332,"byte_end":1335,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1336,"byte_end":1351,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1352,"byte_end":1355,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ * This crate is core only by default, but if you're using Rust 1.36 or later","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1356,"byte_end":1436,"line_start":38,"line_end":38,"column_start":1,"column_end":81}},{"value":"/   you can enable the `extern_crate_alloc` cargo feature for some additional","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1437,"byte_end":1516,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/   methods related to `Box` and `Vec`. Note that the `docs.rs` documentation","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1517,"byte_end":1596,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/   is always built with `extern_crate_alloc` cargo feature enabled.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":1597,"byte_end":1667,"line_start":41,"line_end":41,"column_start":1,"column_end":71}}]},{"kind":"Mod","id":{"krate":0,"index":16},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"allocation","qualname":"::allocation","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":116}],"decl_id":null,"docs":" Stuff to boost things in the `alloc` crate.","sig":null,"attributes":[{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3344,"byte_end":3382,"line_start":92,"line_end":92,"column_start":1,"column_end":39}},{"value":"cfg(feature = \"extern_crate_alloc\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12085,"byte_end":12124,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/ Stuff to boost things in the `alloc` crate.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12126,"byte_end":12173,"line_start":3,"line_end":3,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12174,"byte_end":12177,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ * You must enable the `extern_crate_alloc` feature of `bytemuck` or you will","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12178,"byte_end":12258,"line_start":5,"line_end":5,"column_start":1,"column_end":81}},{"value":"/   not be able to use this module! This is generally done by adding the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12259,"byte_end":12333,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/   feature to the dependency in Cargo.toml like so:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12334,"byte_end":12388,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12389,"byte_end":12392,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/   `bytemuck = { version = \"VERSION_YOU_ARE_USING\", features =","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12393,"byte_end":12458,"line_start":9,"line_end":9,"column_start":1,"column_end":66}},{"value":"/ [\"extern_crate_alloc\"]}`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12459,"byte_end":12487,"line_start":10,"line_end":10,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":41},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12729,"byte_end":12737,"line_start":25,"line_end":25,"column_start":8,"column_end":16},"name":"cast_box","qualname":"::allocation::cast_box","value":"fn cast_box<A, B>(Box<A>) -> Box<B> where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_box`](try_cast_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_box`](try_cast_box), but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12652,"byte_end":12711,"line_start":23,"line_end":23,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12712,"byte_end":12721,"line_start":24,"line_end":24,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":45},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13199,"byte_end":13211,"line_start":39,"line_end":39,"column_start":8,"column_end":20},"name":"try_cast_box","qualname":"::allocation::try_cast_box","value":"fn try_cast_box<A, B>(Box<A>) -> Result<Box<B>, (PodCastError, Box<A>)> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Box`](alloc::boxed::Box).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12851,"byte_end":12921,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12922,"byte_end":12925,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12926,"byte_end":12993,"line_start":31,"line_end":31,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12994,"byte_end":12997,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":12998,"byte_end":13012,"line_start":33,"line_end":33,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13013,"byte_end":13016,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box` must have the exact same","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13017,"byte_end":13091,"line_start":35,"line_end":35,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13092,"byte_end":13108,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Box` must have the exact same size.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13109,"byte_end":13181,"line_start":37,"line_end":37,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13182,"byte_end":13191,"line_start":38,"line_end":38,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14092,"byte_end":14106,"line_start":64,"line_end":64,"column_start":8,"column_end":22},"name":"try_zeroed_box","qualname":"::allocation::try_zeroed_box","value":"fn try_zeroed_box<T>() -> Result<Box<T>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<T>` with all of the contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<T>` with all of the contents being zeroed out.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13672,"byte_end":13739,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13740,"byte_end":13743,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13744,"byte_end":13819,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13820,"byte_end":13899,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13900,"byte_end":13973,"line_start":57,"line_end":57,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":13974,"byte_end":14011,"line_start":58,"line_end":58,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14012,"byte_end":14015,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14016,"byte_end":14030,"line_start":60,"line_end":60,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14031,"byte_end":14034,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14035,"byte_end":14074,"line_start":62,"line_end":62,"column_start":1,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14075,"byte_end":14084,"line_start":63,"line_end":63,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":50},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14681,"byte_end":14691,"line_start":82,"line_end":82,"column_start":8,"column_end":18},"name":"zeroed_box","qualname":"::allocation::zeroed_box","value":"fn zeroed_box<T>() -> Box<T> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_box`], but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_box`], but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14616,"byte_end":14663,"line_start":80,"line_end":80,"column_start":1,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14664,"byte_end":14673,"line_start":81,"line_end":81,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14983,"byte_end":14997,"line_start":93,"line_end":93,"column_start":8,"column_end":22},"name":"try_zeroed_vec","qualname":"::allocation::try_zeroed_vec","value":"fn try_zeroed_vec<T>(usize) -> Result<Vec<T>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Vec<T>` of length and capacity exactly equal to `length` and\n all elements zeroed.","sig":null,"attributes":[{"value":"/ Allocates a `Vec<T>` of length and capacity exactly equal to `length` and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14750,"byte_end":14827,"line_start":86,"line_end":86,"column_start":1,"column_end":78}},{"value":"/ all elements zeroed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14828,"byte_end":14852,"line_start":87,"line_end":87,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14853,"byte_end":14856,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14857,"byte_end":14871,"line_start":89,"line_end":89,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14872,"byte_end":14875,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails, or if a layout cannot be calculated for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14876,"byte_end":14955,"line_start":91,"line_end":91,"column_start":1,"column_end":80}},{"value":"/ the allocation.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":14956,"byte_end":14975,"line_start":92,"line_end":92,"column_start":1,"column_end":20}}]},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15243,"byte_end":15253,"line_start":103,"line_end":103,"column_start":8,"column_end":18},"name":"zeroed_vec","qualname":"::allocation::zeroed_vec","value":"fn zeroed_vec<T>(usize) -> Vec<T> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_vec`] but unwraps for you\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_vec`] but unwraps for you","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15190,"byte_end":15235,"line_start":102,"line_end":102,"column_start":1,"column_end":46}}]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15806,"byte_end":15826,"line_start":119,"line_end":119,"column_start":8,"column_end":28},"name":"try_zeroed_slice_box","qualname":"::allocation::try_zeroed_slice_box","value":"fn try_zeroed_slice_box<T>(usize) -> Result<Box<[T]>, ()> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" Allocates a `Box<[T]>` with all contents being zeroed out.","sig":null,"attributes":[{"value":"/ Allocates a `Box<[T]>` with all contents being zeroed out.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15331,"byte_end":15393,"line_start":107,"line_end":107,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15394,"byte_end":15397,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ This uses the global allocator to create a zeroed allocation and _then_","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15398,"byte_end":15473,"line_start":109,"line_end":109,"column_start":1,"column_end":76}},{"value":"/ turns it into a Box. In other words, it's 100% assured that the zeroed data","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15474,"byte_end":15553,"line_start":110,"line_end":110,"column_start":1,"column_end":80}},{"value":"/ won't be put temporarily on the stack. You can make a box of any size","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15554,"byte_end":15627,"line_start":111,"line_end":111,"column_start":1,"column_end":74}},{"value":"/ without fear of a stack overflow.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15628,"byte_end":15665,"line_start":112,"line_end":112,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15666,"byte_end":15669,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15670,"byte_end":15684,"line_start":114,"line_end":114,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15685,"byte_end":15688,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ This fails if the allocation fails, or if a layout cannot be calculated for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15689,"byte_end":15768,"line_start":116,"line_end":116,"column_start":1,"column_end":80}},{"value":"/ the allocation.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15769,"byte_end":15788,"line_start":117,"line_end":117,"column_start":1,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":15789,"byte_end":15798,"line_start":118,"line_end":118,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":59},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":16667,"byte_end":16683,"line_start":141,"line_end":141,"column_start":8,"column_end":24},"name":"zeroed_slice_box","qualname":"::allocation::zeroed_slice_box","value":"fn zeroed_slice_box<T>(usize) -> Box<[T]> where T: Zeroable","parent":null,"children":[],"decl_id":null,"docs":" As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_zeroed_slice_box`](try_zeroed_slice_box), but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":16584,"byte_end":16659,"line_start":140,"line_end":140,"column_start":1,"column_end":76}}]},{"kind":"Function","id":{"krate":0,"index":61},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":16858,"byte_end":16872,"line_start":147,"line_end":147,"column_start":8,"column_end":22},"name":"cast_slice_box","qualname":"::allocation::cast_slice_box","value":"fn cast_slice_box<A, B>(Box<[A]>) -> Box<[B]> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_slice_box`](try_cast_slice_box), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_slice_box`](try_cast_slice_box), but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":16769,"byte_end":16840,"line_start":145,"line_end":145,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":16841,"byte_end":16850,"line_start":146,"line_end":146,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":65},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17364,"byte_end":17382,"line_start":164,"line_end":164,"column_start":8,"column_end":26},"name":"try_cast_slice_box","qualname":"::allocation::try_cast_slice_box","value":"fn try_cast_slice_box<A, B>(Box<[A]>)\n-> Result<Box<[B]>, (PodCastError, Box<[A]>)> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a `Box<[T]>`.","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a `Box<[T]>`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17001,"byte_end":17055,"line_start":153,"line_end":153,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17056,"byte_end":17059,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Box<[T]>`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17060,"byte_end":17132,"line_start":155,"line_end":155,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17133,"byte_end":17136,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17137,"byte_end":17151,"line_start":157,"line_end":157,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17152,"byte_end":17155,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Box<[T]>` must have the exact same","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17156,"byte_end":17235,"line_start":159,"line_end":159,"column_start":1,"column_end":80}},{"value":"/   alignment.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17236,"byte_end":17252,"line_start":160,"line_end":160,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Box<[T]>` must be the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17253,"byte_end":17328,"line_start":161,"line_end":161,"column_start":1,"column_end":76}},{"value":"/   exact same.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17329,"byte_end":17346,"line_start":162,"line_end":162,"column_start":1,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":17347,"byte_end":17356,"line_start":163,"line_end":163,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":18954,"byte_end":18962,"line_start":198,"line_end":198,"column_start":8,"column_end":16},"name":"cast_vec","qualname":"::allocation::cast_vec","value":"fn cast_vec<A, B>(Vec<A>) -> Vec<B> where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_vec`](try_cast_vec), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_vec`](try_cast_vec), but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":18877,"byte_end":18936,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":18937,"byte_end":18946,"line_start":197,"line_end":197,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19517,"byte_end":19529,"line_start":214,"line_end":214,"column_start":8,"column_end":20},"name":"try_cast_vec","qualname":"::allocation::try_cast_vec","value":"fn try_cast_vec<A, B>(Vec<A>) -> Result<Vec<B>, (PodCastError, Vec<A>)> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Vec`](alloc::vec::Vec).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19076,"byte_end":19144,"line_start":202,"line_end":202,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19145,"byte_end":19148,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Vec`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19149,"byte_end":19216,"line_start":204,"line_end":204,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19217,"byte_end":19220,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19221,"byte_end":19235,"line_start":206,"line_end":206,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19236,"byte_end":19239,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Vec` must have the exact same","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19240,"byte_end":19314,"line_start":208,"line_end":208,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19315,"byte_end":19331,"line_start":209,"line_end":209,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Vec` must be the exact","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19332,"byte_end":19408,"line_start":210,"line_end":210,"column_start":1,"column_end":77}},{"value":"/   same.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19409,"byte_end":19420,"line_start":211,"line_end":211,"column_start":1,"column_end":12}},{"value":"/ * The start and end capacity in bytes of the `Vec` mest be the exact same.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19421,"byte_end":19499,"line_start":212,"line_end":212,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":19500,"byte_end":19509,"line_start":213,"line_end":213,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23030,"byte_end":23048,"line_start":285,"line_end":285,"column_start":8,"column_end":26},"name":"pod_collect_to_vec","qualname":"::allocation::pod_collect_to_vec","value":"fn pod_collect_to_vec<A, B, '_>(&'_ [A]) -> Vec<B> where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" This \"collects\" a slice of pod data into a vec of a different pod type.","sig":null,"attributes":[{"value":"/ This \"collects\" a slice of pod data into a vec of a different pod type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22429,"byte_end":22504,"line_start":269,"line_end":269,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22505,"byte_end":22508,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Unlike with [`cast_slice`] and [`cast_slice_mut`], this will always work.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22509,"byte_end":22586,"line_start":271,"line_end":271,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22587,"byte_end":22590,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ The output vec will be of a minimal size/capacity to hold the slice given.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22591,"byte_end":22669,"line_start":273,"line_end":273,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22670,"byte_end":22673,"line_start":274,"line_end":274,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22674,"byte_end":22685,"line_start":275,"line_end":275,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::*;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22686,"byte_end":22708,"line_start":276,"line_end":276,"column_start":1,"column_end":23}},{"value":"/ let halfwords: [u16; 4] = [5, 6, 7, 8];","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22709,"byte_end":22752,"line_start":277,"line_end":277,"column_start":1,"column_end":44}},{"value":"/ let vec_of_words: Vec<u32> = pod_collect_to_vec(&halfwords);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22753,"byte_end":22817,"line_start":278,"line_end":278,"column_start":1,"column_end":65}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22818,"byte_end":22857,"line_start":279,"line_end":279,"column_start":1,"column_end":40}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0006_0005, 0x0008_0007][..])","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22858,"byte_end":22926,"line_start":280,"line_end":280,"column_start":1,"column_end":69}},{"value":"/ } else {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22927,"byte_end":22939,"line_start":281,"line_end":281,"column_start":1,"column_end":13}},{"value":"/   assert_eq!(&vec_of_words[..], &[0x0005_0006, 0x0007_0008][..])","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":22940,"byte_end":23008,"line_start":282,"line_end":282,"column_start":1,"column_end":69}},{"value":"/ }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23009,"byte_end":23014,"line_start":283,"line_end":283,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23015,"byte_end":23022,"line_start":284,"line_end":284,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":78},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23680,"byte_end":23687,"line_start":306,"line_end":306,"column_start":8,"column_end":15},"name":"cast_rc","qualname":"::allocation::cast_rc","value":"fn cast_rc<A, B>(Rc<A>) -> Rc<B> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_rc`](try_cast_rc), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_rc`](try_cast_rc), but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23605,"byte_end":23662,"line_start":304,"line_end":304,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23663,"byte_end":23672,"line_start":305,"line_end":305,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":82},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24349,"byte_end":24360,"line_start":326,"line_end":326,"column_start":8,"column_end":19},"name":"try_cast_rc","qualname":"::allocation::try_cast_rc","value":"fn try_cast_rc<A, B>(Rc<A>) -> Result<Rc<B>, (PodCastError, Rc<A>)> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Rc`](alloc::rc::Rc).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Rc`](alloc::rc::Rc).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23830,"byte_end":23895,"line_start":312,"line_end":312,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23896,"byte_end":23899,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Rc`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23900,"byte_end":23966,"line_start":314,"line_end":314,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23967,"byte_end":23970,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ The bounds on this function are the same as [`cast_mut`], because a user","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":23971,"byte_end":24047,"line_start":316,"line_end":316,"column_start":1,"column_end":77}},{"value":"/ could call `Rc::get_unchecked_mut` on the output, which could be observable","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24048,"byte_end":24127,"line_start":317,"line_end":317,"column_start":1,"column_end":80}},{"value":"/ in the input.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24128,"byte_end":24145,"line_start":318,"line_end":318,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24146,"byte_end":24149,"line_start":319,"line_end":319,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24150,"byte_end":24164,"line_start":320,"line_end":320,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24165,"byte_end":24168,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Rc` must have the exact same","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24169,"byte_end":24242,"line_start":322,"line_end":322,"column_start":1,"column_end":74}},{"value":"/   alignment.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24243,"byte_end":24259,"line_start":323,"line_end":323,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Rc` must have the exact same size.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24260,"byte_end":24331,"line_start":324,"line_end":324,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24332,"byte_end":24341,"line_start":325,"line_end":325,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":85},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24964,"byte_end":24972,"line_start":343,"line_end":343,"column_start":8,"column_end":16},"name":"cast_arc","qualname":"::allocation::cast_arc","value":"fn cast_arc<A, B>(Arc<A>) -> Arc<B> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_arc`](try_cast_arc), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_arc`](try_cast_arc), but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24853,"byte_end":24912,"line_start":340,"line_end":340,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24913,"byte_end":24922,"line_start":341,"line_end":341,"column_start":1,"column_end":10}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":24923,"byte_end":24956,"line_start":342,"line_end":342,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":89},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25678,"byte_end":25690,"line_start":364,"line_end":364,"column_start":8,"column_end":20},"name":"try_cast_arc","qualname":"::allocation::try_cast_arc","value":"fn try_cast_arc<A, B>(Arc<A>) -> Result<Arc<B>, (PodCastError, Arc<A>)> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a [`Arc`](alloc::sync::Arc).","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a [`Arc`](alloc::sync::Arc).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25118,"byte_end":25187,"line_start":349,"line_end":349,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25188,"byte_end":25191,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Arc`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25192,"byte_end":25259,"line_start":351,"line_end":351,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25260,"byte_end":25263,"line_start":352,"line_end":352,"column_start":1,"column_end":4}},{"value":"/ The bounds on this function are the same as [`cast_mut`], because a user","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25264,"byte_end":25340,"line_start":353,"line_end":353,"column_start":1,"column_end":77}},{"value":"/ could call `Rc::get_unchecked_mut` on the output, which could be observable","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25341,"byte_end":25420,"line_start":354,"line_end":354,"column_start":1,"column_end":80}},{"value":"/ in the input.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25421,"byte_end":25438,"line_start":355,"line_end":355,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25439,"byte_end":25442,"line_start":356,"line_end":356,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25443,"byte_end":25457,"line_start":357,"line_end":357,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25458,"byte_end":25461,"line_start":358,"line_end":358,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Arc` must have the exact same","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25462,"byte_end":25536,"line_start":359,"line_end":359,"column_start":1,"column_end":75}},{"value":"/   alignment.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25537,"byte_end":25553,"line_start":360,"line_end":360,"column_start":1,"column_end":17}},{"value":"/ * The start and end size of the `Arc` must have the exact same size.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25554,"byte_end":25626,"line_start":361,"line_end":361,"column_start":1,"column_end":73}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25627,"byte_end":25636,"line_start":362,"line_end":362,"column_start":1,"column_end":10}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":25637,"byte_end":25670,"line_start":363,"line_end":363,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":92},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26283,"byte_end":26296,"line_start":383,"line_end":383,"column_start":8,"column_end":21},"name":"cast_slice_rc","qualname":"::allocation::cast_slice_rc","value":"fn cast_slice_rc<A, B>(Rc<[A]>) -> Rc<[B]> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_slice_rc`](try_cast_slice_rc), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_slice_rc`](try_cast_slice_rc), but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26196,"byte_end":26265,"line_start":381,"line_end":381,"column_start":1,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26266,"byte_end":26275,"line_start":382,"line_end":382,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":96},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26994,"byte_end":27011,"line_start":407,"line_end":407,"column_start":8,"column_end":25},"name":"try_cast_slice_rc","qualname":"::allocation::try_cast_slice_rc","value":"fn try_cast_slice_rc<A, B>(Rc<[A]>)\n-> Result<Rc<[B]>, (PodCastError, Rc<[A]>)> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a `Rc<[T]>`.","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a `Rc<[T]>`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26456,"byte_end":26509,"line_start":392,"line_end":392,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26510,"byte_end":26513,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Rc<[T]>`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26514,"byte_end":26585,"line_start":394,"line_end":394,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26586,"byte_end":26589,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ The bounds on this function are the same as [`cast_mut`], because a user","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26590,"byte_end":26666,"line_start":396,"line_end":396,"column_start":1,"column_end":77}},{"value":"/ could call `Rc::get_unchecked_mut` on the output, which could be observable","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26667,"byte_end":26746,"line_start":397,"line_end":397,"column_start":1,"column_end":80}},{"value":"/ in the input.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26747,"byte_end":26764,"line_start":398,"line_end":398,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26765,"byte_end":26768,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26769,"byte_end":26783,"line_start":400,"line_end":400,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26784,"byte_end":26787,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Rc<[T]>` must have the exact same","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26788,"byte_end":26866,"line_start":402,"line_end":402,"column_start":1,"column_end":79}},{"value":"/   alignment.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26867,"byte_end":26883,"line_start":403,"line_end":403,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Rc<[T]>` must be the exact","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26884,"byte_end":26964,"line_start":404,"line_end":404,"column_start":1,"column_end":81}},{"value":"/   same.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26965,"byte_end":26976,"line_start":405,"line_end":405,"column_start":1,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":26977,"byte_end":26986,"line_start":406,"line_end":406,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":99},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":28797,"byte_end":28811,"line_start":446,"line_end":446,"column_start":8,"column_end":22},"name":"cast_slice_arc","qualname":"::allocation::cast_slice_arc","value":"fn cast_slice_arc<A, B>(Arc<[A]>) -> Arc<[B]> where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As [`try_cast_slice_arc`](try_cast_slice_arc), but unwraps for you.\n","sig":null,"attributes":[{"value":"/ As [`try_cast_slice_arc`](try_cast_slice_arc), but unwraps for you.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":28674,"byte_end":28745,"line_start":443,"line_end":443,"column_start":1,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":28746,"byte_end":28755,"line_start":444,"line_end":444,"column_start":1,"column_end":10}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":28756,"byte_end":28789,"line_start":445,"line_end":445,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":103},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29550,"byte_end":29568,"line_start":471,"line_end":471,"column_start":8,"column_end":26},"name":"try_cast_slice_arc","qualname":"::allocation::try_cast_slice_arc","value":"fn try_cast_slice_arc<A, B>(Arc<[A]>)\n-> Result<Arc<[B]>, (PodCastError, Arc<[A]>)> where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Attempts to cast the content type of a `Arc<[T]>`.","sig":null,"attributes":[{"value":"/ Attempts to cast the content type of a `Arc<[T]>`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":28974,"byte_end":29028,"line_start":455,"line_end":455,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29029,"byte_end":29032,"line_start":456,"line_end":456,"column_start":1,"column_end":4}},{"value":"/ On failure you get back an error along with the starting `Arc<[T]>`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29033,"byte_end":29105,"line_start":457,"line_end":457,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29106,"byte_end":29109,"line_start":458,"line_end":458,"column_start":1,"column_end":4}},{"value":"/ The bounds on this function are the same as [`cast_mut`], because a user","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29110,"byte_end":29186,"line_start":459,"line_end":459,"column_start":1,"column_end":77}},{"value":"/ could call `Rc::get_unchecked_mut` on the output, which could be observable","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29187,"byte_end":29266,"line_start":460,"line_end":460,"column_start":1,"column_end":80}},{"value":"/ in the input.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29267,"byte_end":29284,"line_start":461,"line_end":461,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29285,"byte_end":29288,"line_start":462,"line_end":462,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29289,"byte_end":29303,"line_start":463,"line_end":463,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29304,"byte_end":29307,"line_start":464,"line_end":464,"column_start":1,"column_end":4}},{"value":"/ * The start and end content type of the `Arc<[T]>` must have the exact same","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29308,"byte_end":29387,"line_start":465,"line_end":465,"column_start":1,"column_end":80}},{"value":"/   alignment.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29388,"byte_end":29404,"line_start":466,"line_end":466,"column_start":1,"column_end":17}},{"value":"/ * The start and end content size in bytes of the `Arc<[T]>` must be the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29405,"byte_end":29480,"line_start":467,"line_end":467,"column_start":1,"column_end":76}},{"value":"/   exact same.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29481,"byte_end":29498,"line_start":468,"line_end":468,"column_start":1,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29499,"byte_end":29508,"line_start":469,"line_end":469,"column_start":1,"column_end":10}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":29509,"byte_end":29542,"line_start":470,"line_end":470,"column_start":1,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":106},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":31326,"byte_end":31349,"line_start":508,"line_end":508,"column_start":11,"column_end":34},"name":"TransparentWrapperAlloc","qualname":"::allocation::TransparentWrapperAlloc","value":"TransparentWrapperAlloc<Inner>: TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" An extension trait for `TransparentWrapper` and alloc types.\n","sig":null,"attributes":[{"value":"/ An extension trait for `TransparentWrapper` and alloc types.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":31251,"byte_end":31315,"line_start":507,"line_end":507,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":31471,"byte_end":31479,"line_start":512,"line_end":512,"column_start":6,"column_end":14},"name":"wrap_vec","qualname":"::allocation::TransparentWrapperAlloc::wrap_vec","value":"fn wrap_vec(Vec<Inner>) -> Vec<Self> where Self: Sized, Inner: Sized","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Convert a vec of the inner type into a vec of the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a vec of the inner type into a vec of the wrapper type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":31398,"byte_end":31465,"line_start":511,"line_end":511,"column_start":3,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":32062,"byte_end":32070,"line_start":535,"line_end":535,"column_start":6,"column_end":14},"name":"wrap_box","qualname":"::allocation::TransparentWrapperAlloc::wrap_box","value":"fn wrap_box(Box<Inner>) -> Box<Self>","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Convert a box to the inner type into a box to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a box to the inner type into a box to the wrapper","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":31971,"byte_end":32032,"line_start":532,"line_end":532,"column_start":3,"column_end":64}},{"value":"/ type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":32035,"byte_end":32044,"line_start":533,"line_end":533,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":32047,"byte_end":32056,"line_start":534,"line_end":534,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":33007,"byte_end":33014,"line_start":559,"line_end":559,"column_start":6,"column_end":13},"name":"wrap_rc","qualname":"::allocation::TransparentWrapperAlloc::wrap_rc","value":"fn wrap_rc(Rc<Inner>) -> Rc<Self>","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Convert an [`Rc`](alloc::rc::Rc) to the inner type into an `Rc` to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert an [`Rc`](alloc::rc::Rc) to the inner type into an `Rc` to the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":32895,"byte_end":32969,"line_start":556,"line_end":556,"column_start":3,"column_end":77}},{"value":"/ wrapper type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":32972,"byte_end":32989,"line_start":557,"line_end":557,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":32992,"byte_end":33001,"line_start":558,"line_end":558,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":33937,"byte_end":33945,"line_start":582,"line_end":582,"column_start":6,"column_end":14},"name":"wrap_arc","qualname":"::allocation::TransparentWrapperAlloc::wrap_arc","value":"fn wrap_arc(Arc<Inner>) -> Arc<Self>","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Convert an [`Arc`](alloc::sync::Arc) to the inner type into an `Arc` to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert an [`Arc`](alloc::sync::Arc) to the inner type into an `Arc` to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":33784,"byte_end":33859,"line_start":578,"line_end":578,"column_start":3,"column_end":78}},{"value":"/ the wrapper type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":33862,"byte_end":33883,"line_start":579,"line_end":579,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":33886,"byte_end":33895,"line_start":580,"line_end":580,"column_start":3,"column_end":12}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":33898,"byte_end":33931,"line_start":581,"line_end":581,"column_start":3,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":34794,"byte_end":34802,"line_start":602,"line_end":602,"column_start":6,"column_end":14},"name":"peel_vec","qualname":"::allocation::TransparentWrapperAlloc::peel_vec","value":"fn peel_vec(Vec<Self>) -> Vec<Inner> where Self: Sized, Inner: Sized","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Convert a vec of the wrapper type into a vec of the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a vec of the wrapper type into a vec of the inner type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":34721,"byte_end":34788,"line_start":601,"line_end":601,"column_start":3,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":35386,"byte_end":35394,"line_start":625,"line_end":625,"column_start":6,"column_end":14},"name":"peel_box","qualname":"::allocation::TransparentWrapperAlloc::peel_box","value":"fn peel_box(Box<Self>) -> Box<Inner>","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Convert a box to the wrapper type into a box to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a box to the wrapper type into a box to the inner","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":35295,"byte_end":35356,"line_start":622,"line_end":622,"column_start":3,"column_end":64}},{"value":"/ type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":35359,"byte_end":35368,"line_start":623,"line_end":623,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":35371,"byte_end":35380,"line_start":624,"line_end":624,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":36331,"byte_end":36338,"line_start":649,"line_end":649,"column_start":6,"column_end":13},"name":"peel_rc","qualname":"::allocation::TransparentWrapperAlloc::peel_rc","value":"fn peel_rc(Rc<Self>) -> Rc<Inner>","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Convert an [`Rc`](alloc::rc::Rc) to the wrapper type into an `Rc` to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert an [`Rc`](alloc::rc::Rc) to the wrapper type into an `Rc` to the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":36219,"byte_end":36295,"line_start":646,"line_end":646,"column_start":3,"column_end":79}},{"value":"/ inner type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":36298,"byte_end":36313,"line_start":647,"line_end":647,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":36316,"byte_end":36325,"line_start":648,"line_end":648,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":37261,"byte_end":37269,"line_start":672,"line_end":672,"column_start":6,"column_end":14},"name":"peel_arc","qualname":"::allocation::TransparentWrapperAlloc::peel_arc","value":"fn peel_arc(Arc<Self>) -> Arc<Inner>","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Convert an [`Arc`](alloc::sync::Arc) to the wrapper type into an `Arc` to\n the inner type.\n","sig":null,"attributes":[{"value":"/ Convert an [`Arc`](alloc::sync::Arc) to the wrapper type into an `Arc` to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":37108,"byte_end":37185,"line_start":668,"line_end":668,"column_start":3,"column_end":80}},{"value":"/ the inner type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":37188,"byte_end":37207,"line_start":669,"line_end":669,"column_start":3,"column_end":22}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":37210,"byte_end":37219,"line_start":670,"line_end":670,"column_start":3,"column_end":12}},{"value":"cfg(target_has_atomic = \"ptr\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":37222,"byte_end":37255,"line_start":671,"line_end":671,"column_start":3,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":128},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41442,"byte_end":41455,"line_start":51,"line_end":51,"column_start":18,"column_end":31},"name":"AnyBitPattern","qualname":"::anybitpattern::AnyBitPattern","value":"AnyBitPattern: Zeroable + Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types that are valid for any bit pattern.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types that are valid for any bit pattern.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":38843,"byte_end":38922,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":38923,"byte_end":38926,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":38927,"byte_end":38984,"line_start":5,"line_end":5,"column_start":1,"column_end":58}},{"value":"/ except that the type can allow uninit (or padding) bytes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":38985,"byte_end":39046,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39047,"byte_end":39126,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ included types to `repr(C)` `struct`s that contain padding as well as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39127,"byte_end":39200,"line_start":8,"line_end":8,"column_start":1,"column_end":74}},{"value":"/ `union`s. Notably, you can only cast *immutable* references and *owned*","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39201,"byte_end":39276,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/ values into [`AnyBitPattern`] types, not *mutable* references.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39277,"byte_end":39343,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39344,"byte_end":39347,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`AnyBitPattern`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39348,"byte_end":39427,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ [`AnyBitPattern`] but any `T: AnyBitPattern` is not necessarily [`Pod`].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39428,"byte_end":39504,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39505,"byte_end":39508,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`Zeroable`], meaning that any `T:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39509,"byte_end":39580,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ AnyBitPattern` is also [`Zeroable`], but any `T: Zeroable` is not","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39581,"byte_end":39650,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ necessarily [`AnyBitPattern  ]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39651,"byte_end":39685,"line_start":17,"line_end":17,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39686,"byte_end":39689,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39690,"byte_end":39702,"line_start":19,"line_end":19,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39703,"byte_end":39706,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(AnyBitPattern)]` macro is provided under the `derive` feature","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39707,"byte_end":39784,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ flag which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39785,"byte_end":39862,"line_start":22,"line_end":22,"column_start":1,"column_end":78}},{"value":"/ implement the trait for you for both structs and enums. This is the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39863,"byte_end":39934,"line_start":23,"line_end":23,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":39935,"byte_end":40015,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40016,"byte_end":40094,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40095,"byte_end":40118,"line_start":26,"line_end":26,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40119,"byte_end":40122,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ * *NOTE: even `C-style`, fieldless enums are intentionally **excluded** from","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40123,"byte_end":40203,"line_start":28,"line_end":28,"column_start":1,"column_end":81}},{"value":"/ this trait, since it is **unsound** for an enum to have a discriminant value","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40204,"byte_end":40284,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ that is not one of its defined variants.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40285,"byte_end":40329,"line_start":30,"line_end":30,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40330,"byte_end":40333,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40334,"byte_end":40346,"line_start":32,"line_end":32,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40347,"byte_end":40350,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Similar to [`Pod`] except we disregard the rule about it must not contain","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40351,"byte_end":40428,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ uninit bytes. Still, this is a quite strong guarantee about a type, so *be","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40429,"byte_end":40507,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ careful* when implementing it manually.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40508,"byte_end":40551,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40552,"byte_end":40555,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40556,"byte_end":40596,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40597,"byte_end":40644,"line_start":39,"line_end":39,"column_start":1,"column_end":48}},{"value":"/ * The type must be valid for any bit pattern of its backing memory.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40645,"byte_end":40716,"line_start":40,"line_end":40,"column_start":1,"column_end":72}},{"value":"/ * Structs need to have all fields also be `AnyBitPattern`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40717,"byte_end":40779,"line_start":41,"line_end":41,"column_start":1,"column_end":63}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40780,"byte_end":40860,"line_start":42,"line_end":42,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40861,"byte_end":40919,"line_start":43,"line_end":43,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40920,"byte_end":40994,"line_start":44,"line_end":44,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":40995,"byte_end":41072,"line_start":45,"line_end":45,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41073,"byte_end":41153,"line_start":46,"line_end":46,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41154,"byte_end":41234,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41235,"byte_end":41314,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41315,"byte_end":41365,"line_start":49,"line_end":49,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41366,"byte_end":41424,"line_start":50,"line_end":50,"column_start":1,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":132},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::checked","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":569},{"krate":0,"index":573},{"krate":0,"index":577},{"krate":0,"index":581},{"krate":0,"index":585},{"krate":0,"index":589},{"krate":0,"index":593},{"krate":0,"index":597},{"krate":0,"index":601},{"krate":0,"index":605},{"krate":0,"index":609},{"krate":0,"index":613},{"krate":0,"index":617},{"krate":0,"index":623},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":635},{"krate":0,"index":161},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":184},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206}],"decl_id":null,"docs":" Checked versions of the casting functions exposed in crate root\n that support [`CheckedBitPattern`] types.\n","sig":null,"attributes":[{"value":"/ Checked versions of the casting functions exposed in crate root","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":41730,"byte_end":41797,"line_start":1,"line_end":1,"column_start":1,"column_end":68}},{"value":"/ that support [`CheckedBitPattern`] types.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":41798,"byte_end":41843,"line_start":2,"line_end":2,"column_start":1,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":147},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46571,"byte_end":46588,"line_start":130,"line_end":130,"column_start":18,"column_end":35},"name":"CheckedBitPattern","qualname":"::checked::CheckedBitPattern","value":"CheckedBitPattern: Copy","parent":null,"children":[{"krate":0,"index":148},{"krate":0,"index":149}],"decl_id":null,"docs":" A marker trait that allows types that have some invalid bit patterns to be\n used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by\n performing a runtime check on a perticular set of bits. This is particularly\n useful for types like fieldless ('C-style') enums, [`char`], bool, and\n structs containing them.","sig":null,"attributes":[{"value":"/ A marker trait that allows types that have some invalid bit patterns to be","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":41931,"byte_end":42009,"line_start":9,"line_end":9,"column_start":1,"column_end":79}},{"value":"/ used in places that otherwise require [`AnyBitPattern`] or [`Pod`] types by","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42010,"byte_end":42089,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ performing a runtime check on a perticular set of bits. This is particularly","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42090,"byte_end":42170,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ useful for types like fieldless ('C-style') enums, [`char`], bool, and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42171,"byte_end":42245,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ structs containing them.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42246,"byte_end":42274,"line_start":13,"line_end":13,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42275,"byte_end":42278,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ To do this, we define a `Bits` type which is a type with equivalent layout","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42279,"byte_end":42357,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ to `Self` other than the invalid bit patterns which disallow `Self` from","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42358,"byte_end":42434,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ being [`AnyBitPattern`]. This `Bits` type must itself implement","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42435,"byte_end":42502,"line_start":17,"line_end":17,"column_start":1,"column_end":68}},{"value":"/ [`AnyBitPattern`]. Then, we implement a function that checks wheter a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42503,"byte_end":42576,"line_start":18,"line_end":18,"column_start":1,"column_end":74}},{"value":"/ certain instance of the `Bits` is also a valid bit pattern of `Self`. If","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42577,"byte_end":42653,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ this check passes, then we can allow casting from the `Bits` to `Self` (and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42654,"byte_end":42733,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ therefore, any type which is able to be cast to `Bits` is also able to be","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42734,"byte_end":42811,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/ cast to `Self`).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42812,"byte_end":42832,"line_start":22,"line_end":22,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42833,"byte_end":42836,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [`AnyBitPattern`] is a subset of [`CheckedBitPattern`], meaning that any `T:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42837,"byte_end":42917,"line_start":24,"line_end":24,"column_start":1,"column_end":81}},{"value":"/ AnyBitPattern` is also [`CheckedBitPattern`]. This means you can also use","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42918,"byte_end":42995,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ any [`AnyBitPattern`] type in the checked versions of casting functions in","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":42996,"byte_end":43074,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ this module. If it's possible, prefer implementing [`AnyBitPattern`] for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43075,"byte_end":43151,"line_start":27,"line_end":27,"column_start":1,"column_end":77}},{"value":"/ your type directly instead of [`CheckedBitPattern`] as it gives greater","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43152,"byte_end":43227,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ flexibility.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43228,"byte_end":43244,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43245,"byte_end":43248,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43249,"byte_end":43261,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43262,"byte_end":43265,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(CheckedBitPattern)]` macro is provided under the `derive`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43266,"byte_end":43339,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ feature flag which will automatically validate the requirements of this","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43340,"byte_end":43415,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/ trait and implement the trait for you for both enums and structs. This is","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43416,"byte_end":43493,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ the recommended method for implementing the trait, however it's also","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43494,"byte_end":43566,"line_start":36,"line_end":36,"column_start":1,"column_end":73}},{"value":"/ possible to do manually.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43567,"byte_end":43595,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43596,"byte_end":43599,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43600,"byte_end":43613,"line_start":39,"line_end":39,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43614,"byte_end":43617,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ If manually implementing the trait, we can do something like so:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43618,"byte_end":43686,"line_start":41,"line_end":41,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43687,"byte_end":43690,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43691,"byte_end":43702,"line_start":43,"line_end":43,"column_start":1,"column_end":12}},{"value":"/ use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43703,"byte_end":43751,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43752,"byte_end":43755,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ #[repr(u32)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43756,"byte_end":43772,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/ #[derive(Copy, Clone)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43773,"byte_end":43799,"line_start":47,"line_end":47,"column_start":1,"column_end":27}},{"value":"/ enum MyEnum {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43800,"byte_end":43817,"line_start":48,"line_end":48,"column_start":1,"column_end":18}},{"value":"/     Variant0 = 0,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43818,"byte_end":43839,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/     Variant1 = 1,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43840,"byte_end":43861,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/     Variant2 = 2,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43862,"byte_end":43883,"line_start":51,"line_end":51,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43884,"byte_end":43889,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43890,"byte_end":43893,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43894,"byte_end":43940,"line_start":54,"line_end":54,"column_start":1,"column_end":47}},{"value":"/     type Bits = u32;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43941,"byte_end":43965,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43966,"byte_end":43969,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":43970,"byte_end":44023,"line_start":57,"line_end":57,"column_start":1,"column_end":54}},{"value":"/         match *bits {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44024,"byte_end":44049,"line_start":58,"line_end":58,"column_start":1,"column_end":26}},{"value":"/             0 | 1 | 2 => true,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44050,"byte_end":44084,"line_start":59,"line_end":59,"column_start":1,"column_end":35}},{"value":"/             _ => false,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44085,"byte_end":44112,"line_start":60,"line_end":60,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44113,"byte_end":44126,"line_start":61,"line_end":61,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44127,"byte_end":44136,"line_start":62,"line_end":62,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44137,"byte_end":44142,"line_start":63,"line_end":63,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44143,"byte_end":44146,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ // It is often useful to also implement `NoUninit` on our `CheckedBitPattern` types.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44147,"byte_end":44235,"line_start":65,"line_end":65,"column_start":1,"column_end":89}},{"value":"/ // This will allow us to do casting of mutable references (and mutable slices).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44236,"byte_end":44319,"line_start":66,"line_end":66,"column_start":1,"column_end":84}},{"value":"/ // It is not always possible to do so, but in this case we have no padding so it is.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44320,"byte_end":44408,"line_start":67,"line_end":67,"column_start":1,"column_end":89}},{"value":"/ unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44409,"byte_end":44447,"line_start":68,"line_end":68,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44448,"byte_end":44455,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44456,"byte_end":44459,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ We can now use relevant casting functions. For example,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44460,"byte_end":44519,"line_start":71,"line_end":71,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44520,"byte_end":44523,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44524,"byte_end":44535,"line_start":73,"line_end":73,"column_start":1,"column_end":12}},{"value":"/ # use bytemuck::{CheckedBitPattern, NoUninit};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44536,"byte_end":44586,"line_start":74,"line_end":74,"column_start":1,"column_end":51}},{"value":"/ # #[repr(u32)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44587,"byte_end":44605,"line_start":75,"line_end":75,"column_start":1,"column_end":19}},{"value":"/ # #[derive(Copy, Clone, PartialEq, Eq, Debug)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44606,"byte_end":44656,"line_start":76,"line_end":76,"column_start":1,"column_end":51}},{"value":"/ # enum MyEnum {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44657,"byte_end":44676,"line_start":77,"line_end":77,"column_start":1,"column_end":20}},{"value":"/ #     Variant0 = 0,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44677,"byte_end":44700,"line_start":78,"line_end":78,"column_start":1,"column_end":24}},{"value":"/ #     Variant1 = 1,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44701,"byte_end":44724,"line_start":79,"line_end":79,"column_start":1,"column_end":24}},{"value":"/ #     Variant2 = 2,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44725,"byte_end":44748,"line_start":80,"line_end":80,"column_start":1,"column_end":24}},{"value":"/ # }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44749,"byte_end":44756,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"/ # unsafe impl NoUninit for MyEnum {}","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44757,"byte_end":44797,"line_start":82,"line_end":82,"column_start":1,"column_end":41}},{"value":"/ # unsafe impl CheckedBitPattern for MyEnum {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44798,"byte_end":44846,"line_start":83,"line_end":83,"column_start":1,"column_end":49}},{"value":"/ #     type Bits = u32;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44847,"byte_end":44873,"line_start":84,"line_end":84,"column_start":1,"column_end":27}},{"value":"/ #     fn is_valid_bit_pattern(bits: &u32) -> bool {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44874,"byte_end":44929,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/ #         match *bits {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44930,"byte_end":44957,"line_start":86,"line_end":86,"column_start":1,"column_end":28}},{"value":"/ #             0 | 1 | 2 => true,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44958,"byte_end":44994,"line_start":87,"line_end":87,"column_start":1,"column_end":37}},{"value":"/ #             _ => false,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":44995,"byte_end":45024,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/ #         }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45025,"byte_end":45040,"line_start":89,"line_end":89,"column_start":1,"column_end":16}},{"value":"/ #     }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45041,"byte_end":45052,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ # }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45053,"byte_end":45060,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::{bytes_of, bytes_of_mut};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45061,"byte_end":45104,"line_start":92,"line_end":92,"column_start":1,"column_end":44}},{"value":"/ use bytemuck::checked;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45105,"byte_end":45131,"line_start":93,"line_end":93,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45132,"byte_end":45135,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ let bytes = bytes_of(&2u32);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45136,"byte_end":45168,"line_start":95,"line_end":95,"column_start":1,"column_end":33}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45169,"byte_end":45227,"line_start":96,"line_end":96,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(result, Ok(&MyEnum::Variant2));","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45228,"byte_end":45274,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45275,"byte_end":45278,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ // Fails for invalid discriminant","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45279,"byte_end":45316,"line_start":99,"line_end":99,"column_start":1,"column_end":38}},{"value":"/ let bytes = bytes_of(&100u32);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45317,"byte_end":45351,"line_start":100,"line_end":100,"column_start":1,"column_end":35}},{"value":"/ let result = checked::try_from_bytes::<MyEnum>(bytes);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45352,"byte_end":45410,"line_start":101,"line_end":101,"column_start":1,"column_end":59}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45411,"byte_end":45440,"line_start":102,"line_end":102,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45441,"byte_end":45444,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ // Since we implemented NoUninit, we can also cast mutably from an original type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45445,"byte_end":45529,"line_start":104,"line_end":104,"column_start":1,"column_end":85}},{"value":"/ // that is `NoUninit + AnyBitPattern`:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45530,"byte_end":45572,"line_start":105,"line_end":105,"column_start":1,"column_end":43}},{"value":"/ let mut my_u32 = 2u32;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45573,"byte_end":45599,"line_start":106,"line_end":106,"column_start":1,"column_end":27}},{"value":"/ {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45600,"byte_end":45605,"line_start":107,"line_end":107,"column_start":1,"column_end":6}},{"value":"/   let as_enum_mut = checked::cast_mut::<_, MyEnum>(&mut my_u32);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45606,"byte_end":45674,"line_start":108,"line_end":108,"column_start":1,"column_end":69}},{"value":"/   assert_eq!(as_enum_mut, &mut MyEnum::Variant2);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45675,"byte_end":45728,"line_start":109,"line_end":109,"column_start":1,"column_end":54}},{"value":"/   *as_enum_mut = MyEnum::Variant0;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45729,"byte_end":45767,"line_start":110,"line_end":110,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45768,"byte_end":45773,"line_start":111,"line_end":111,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(my_u32, 0u32);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45774,"byte_end":45803,"line_start":112,"line_end":112,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45804,"byte_end":45811,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45812,"byte_end":45815,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45816,"byte_end":45828,"line_start":115,"line_end":115,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45829,"byte_end":45832,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ * `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45833,"byte_end":45908,"line_start":117,"line_end":117,"column_start":1,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45909,"byte_end":45967,"line_start":118,"line_end":118,"column_start":1,"column_end":59}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45968,"byte_end":45997,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/   * This almost certainly means your type must be `#[repr(C)]` or a similar","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":45998,"byte_end":46077,"line_start":120,"line_end":120,"column_start":1,"column_end":80}},{"value":"/   specified repr, but if you think you know better, you probably don't. If","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46078,"byte_end":46156,"line_start":121,"line_end":121,"column_start":1,"column_end":79}},{"value":"/ you   still think you know better, be careful and have fun. And don't mess","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46157,"byte_end":46235,"line_start":122,"line_end":122,"column_start":1,"column_end":79}},{"value":"/ it up   (I mean it).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46236,"byte_end":46260,"line_start":123,"line_end":123,"column_start":1,"column_end":25}},{"value":"/ * If [`is_valid_bit_pattern`] returns true, then the bit pattern contained","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46261,"byte_end":46339,"line_start":124,"line_end":124,"column_start":1,"column_end":79}},{"value":"/   in `bits` must also be valid for an instance of `Self`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46340,"byte_end":46401,"line_start":125,"line_end":125,"column_start":1,"column_end":62}},{"value":"/ * Probably more, don't mess it up (I mean it 2.0)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46402,"byte_end":46455,"line_start":126,"line_end":126,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46456,"byte_end":46459,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46460,"byte_end":46529,"line_start":128,"line_end":128,"column_start":1,"column_end":70}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46530,"byte_end":46553,"line_start":129,"line_end":129,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":148},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46851,"byte_end":46855,"line_start":136,"line_end":136,"column_start":8,"column_end":12},"name":"Bits","qualname":"::checked::CheckedBitPattern::Bits","value":"type Bits: AnyBitPattern;","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" `Self` *must* have the same layout as the specified `Bits` except for\n the possible invalid bit patterns being checked during\n [`is_valid_bit_pattern`].","sig":null,"attributes":[{"value":"/ `Self` *must* have the same layout as the specified `Bits` except for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46599,"byte_end":46672,"line_start":131,"line_end":131,"column_start":3,"column_end":76}},{"value":"/ the possible invalid bit patterns being checked during","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46675,"byte_end":46733,"line_start":132,"line_end":132,"column_start":3,"column_end":61}},{"value":"/ [`is_valid_bit_pattern`].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46736,"byte_end":46765,"line_start":133,"line_end":133,"column_start":3,"column_end":32}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46768,"byte_end":46771,"line_start":134,"line_end":134,"column_start":3,"column_end":6}},{"value":"/ [`is_valid_bit_pattern`]: CheckedBitPattern::is_valid_bit_pattern","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46774,"byte_end":46843,"line_start":135,"line_end":135,"column_start":3,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46977,"byte_end":46997,"line_start":140,"line_end":140,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"::checked::CheckedBitPattern::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":147},"children":[],"decl_id":null,"docs":" If this function returns true, then it must be valid to reinterpret `bits`\n as `&Self`.\n","sig":null,"attributes":[{"value":"/ If this function returns true, then it must be valid to reinterpret `bits`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46875,"byte_end":46953,"line_start":138,"line_end":138,"column_start":3,"column_end":81}},{"value":"/ as `&Self`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46956,"byte_end":46971,"line_start":139,"line_end":139,"column_start":3,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":47128,"byte_end":47148,"line_start":147,"line_end":147,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<T as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ T) -> bool","parent":{"krate":0,"index":147},"children":[],"decl_id":{"krate":0,"index":149},"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":47105,"byte_end":47122,"line_start":146,"line_end":146,"column_start":3,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":47264,"byte_end":47284,"line_start":156,"line_end":156,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<char as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":147},"children":[],"decl_id":{"krate":0,"index":149},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":47249,"byte_end":47258,"line_start":155,"line_end":155,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":47440,"byte_end":47460,"line_start":165,"line_end":165,"column_start":6,"column_end":26},"name":"is_valid_bit_pattern","qualname":"<bool as checked::CheckedBitPattern>::is_valid_bit_pattern","value":"fn is_valid_bit_pattern<'_>(&'_ Self::Bits) -> bool","parent":{"krate":0,"index":147},"children":[],"decl_id":{"krate":0,"index":149},"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":47425,"byte_end":47434,"line_start":164,"line_end":164,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":618},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49047,"byte_end":49059,"line_start":216,"line_end":216,"column_start":3,"column_end":15},"name":"PodCastError","qualname":"::checked::CheckedCastError::PodCastError","value":"CheckedCastError::PodCastError(crate::PodCastError)","parent":{"krate":0,"index":617},"children":[],"decl_id":null,"docs":" An error occurred during a true-[`Pod`] cast","sig":null,"attributes":[{"value":"/ An error occurred during a true-[`Pod`] cast","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":48964,"byte_end":49012,"line_start":213,"line_end":213,"column_start":3,"column_end":51}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49015,"byte_end":49018,"line_start":214,"line_end":214,"column_start":3,"column_end":6}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49021,"byte_end":49044,"line_start":215,"line_end":215,"column_start":3,"column_end":26}}]},{"kind":"Field","id":{"krate":0,"index":620},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49060,"byte_end":49079,"line_start":216,"line_end":216,"column_start":16,"column_end":35},"name":"0","qualname":"::checked::CheckedCastError::PodCastError::0","value":"PodCastError","parent":{"krate":0,"index":618},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":621},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49366,"byte_end":49383,"line_start":223,"line_end":223,"column_start":3,"column_end":20},"name":"InvalidBitPattern","qualname":"::checked::CheckedCastError::InvalidBitPattern","value":"CheckedCastError::InvalidBitPattern","parent":{"krate":0,"index":617},"children":[],"decl_id":null,"docs":" When casting to a [`CheckedBitPattern`] type, it is possible that the\n original data contains an invalid bit pattern. If so, the cast will\n fail and this error will be returned. Will never happen on casts\n between [`Pod`] types.","sig":null,"attributes":[{"value":"/ When casting to a [`CheckedBitPattern`] type, it is possible that the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49084,"byte_end":49157,"line_start":217,"line_end":217,"column_start":3,"column_end":76}},{"value":"/ original data contains an invalid bit pattern. If so, the cast will","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49160,"byte_end":49231,"line_start":218,"line_end":218,"column_start":3,"column_end":74}},{"value":"/ fail and this error will be returned. Will never happen on casts","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49234,"byte_end":49302,"line_start":219,"line_end":219,"column_start":3,"column_end":71}},{"value":"/ between [`Pod`] types.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49305,"byte_end":49331,"line_start":220,"line_end":220,"column_start":3,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49334,"byte_end":49337,"line_start":221,"line_end":221,"column_start":3,"column_end":6}},{"value":"/ [`Pod`]: crate::Pod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49340,"byte_end":49363,"line_start":222,"line_end":222,"column_start":3,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":617},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":48943,"byte_end":48959,"line_start":212,"line_end":212,"column_start":10,"column_end":26},"name":"CheckedCastError","qualname":"::checked::CheckedCastError","value":"enum CheckedCastError {\n    PodCastError(crate::PodCastError),\n    InvalidBitPattern,\n}","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":621}],"decl_id":null,"docs":" The things that can go wrong when casting between [`CheckedBitPattern`] data\n forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`CheckedBitPattern`] data","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":48791,"byte_end":48871,"line_start":209,"line_end":209,"column_start":1,"column_end":81}},{"value":"/ forms.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":48872,"byte_end":48882,"line_start":210,"line_end":210,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49475,"byte_end":49478,"line_start":228,"line_end":228,"column_start":6,"column_end":9},"name":"fmt","qualname":"<CheckedCastError as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut core::fmt::Formatter)\n-> core::fmt::Result","parent":{"krate":1,"index":10302},"children":[],"decl_id":{"krate":1,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49717,"byte_end":49721,"line_start":236,"line_end":236,"column_start":6,"column_end":10},"name":"from","qualname":"<CheckedCastError as core::convert::From>::from","value":"fn from(crate::PodCastError) -> CheckedCastError","parent":{"krate":1,"index":3169},"children":[],"decl_id":{"krate":1,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":165},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50070,"byte_end":50084,"line_start":249,"line_end":249,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::checked::try_from_bytes","value":"fn try_from_bytes<T, '_>(&'_ [u8]) -> Result<&'_ T, CheckedCastError> where\nT: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49817,"byte_end":49851,"line_start":241,"line_end":241,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49852,"byte_end":49855,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49856,"byte_end":49870,"line_start":243,"line_end":243,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49871,"byte_end":49874,"line_start":244,"line_end":244,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49875,"byte_end":49924,"line_start":245,"line_end":245,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49925,"byte_end":49993,"line_start":246,"line_end":246,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49994,"byte_end":50052,"line_start":247,"line_end":247,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50053,"byte_end":50062,"line_start":248,"line_end":248,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":167},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50673,"byte_end":50691,"line_start":269,"line_end":269,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::checked::try_from_bytes_mut","value":"fn try_from_bytes_mut<T, '_>(&'_ mut [u8])\n-> Result<&'_ mut T, CheckedCastError> where T: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50412,"byte_end":50454,"line_start":261,"line_end":261,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50455,"byte_end":50458,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50459,"byte_end":50473,"line_start":263,"line_end":263,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50474,"byte_end":50477,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50478,"byte_end":50527,"line_start":265,"line_end":265,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50528,"byte_end":50596,"line_start":266,"line_end":266,"column_start":1,"column_end":67}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50597,"byte_end":50655,"line_start":267,"line_end":267,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":50656,"byte_end":50665,"line_start":268,"line_end":268,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":169},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51247,"byte_end":51269,"line_start":287,"line_end":287,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::checked::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T, '_>(&'_ [u8]) -> Result<T, CheckedCastError>\nwhere T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51042,"byte_end":51089,"line_start":281,"line_end":281,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51090,"byte_end":51093,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51094,"byte_end":51108,"line_start":283,"line_end":283,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51109,"byte_end":51170,"line_start":284,"line_end":284,"column_start":1,"column_end":62}},{"value":"/ * If the slice contains an invalid bit pattern for `T`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51171,"byte_end":51229,"line_start":285,"line_end":285,"column_start":1,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51230,"byte_end":51239,"line_start":286,"line_end":286,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52020,"byte_end":52028,"line_start":311,"line_end":311,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::checked::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, CheckedCastError> where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51568,"byte_end":51597,"line_start":299,"line_end":299,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51598,"byte_end":51601,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51602,"byte_end":51679,"line_start":301,"line_end":301,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51680,"byte_end":51759,"line_start":302,"line_end":302,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51760,"byte_end":51838,"line_start":303,"line_end":303,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51839,"byte_end":51858,"line_start":304,"line_end":304,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51859,"byte_end":51862,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51863,"byte_end":51877,"line_start":306,"line_end":306,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51878,"byte_end":51881,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51882,"byte_end":51937,"line_start":308,"line_end":308,"column_start":1,"column_end":56}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":51938,"byte_end":52002,"line_start":309,"line_end":309,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52003,"byte_end":52012,"line_start":310,"line_end":310,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52572,"byte_end":52584,"line_start":331,"line_end":331,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::checked::try_cast_ref","value":"fn try_cast_ref<A, B, '_>(&'_ A) -> Result<&'_ B, CheckedCastError> where\nA: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52314,"byte_end":52350,"line_start":323,"line_end":323,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52351,"byte_end":52354,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52355,"byte_end":52369,"line_start":325,"line_end":325,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52370,"byte_end":52373,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52374,"byte_end":52426,"line_start":327,"line_end":327,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52427,"byte_end":52489,"line_start":328,"line_end":328,"column_start":1,"column_end":63}},{"value":"/ * If `a` contains an invalid bit pattern for `B` this fails.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52490,"byte_end":52554,"line_start":329,"line_end":329,"column_start":1,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52555,"byte_end":52564,"line_start":330,"line_end":330,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":177},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53022,"byte_end":53034,"line_start":347,"line_end":347,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::checked::try_cast_mut","value":"fn try_cast_mut<A, B, '_>(&'_ mut A) -> Result<&'_ mut B, CheckedCastError>\nwhere A: NoUninit + AnyBitPattern, B: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52920,"byte_end":52964,"line_start":343,"line_end":343,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52965,"byte_end":52968,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":52969,"byte_end":53004,"line_start":345,"line_end":345,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53005,"byte_end":53014,"line_start":346,"line_end":346,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54277,"byte_end":54291,"line_start":380,"line_end":380,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::checked::try_cast_slice","value":"fn try_cast_slice<A, B, '_>(&'_ [A]) -> Result<&'_ [B], CheckedCastError>\nwhere A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53412,"byte_end":53485,"line_start":362,"line_end":362,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53486,"byte_end":53489,"line_start":363,"line_end":363,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53490,"byte_end":53549,"line_start":364,"line_end":364,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53550,"byte_end":53619,"line_start":365,"line_end":365,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53620,"byte_end":53623,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53624,"byte_end":53638,"line_start":367,"line_end":367,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53639,"byte_end":53642,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53643,"byte_end":53723,"line_start":369,"line_end":369,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53724,"byte_end":53744,"line_start":370,"line_end":370,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53745,"byte_end":53822,"line_start":371,"line_end":371,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53823,"byte_end":53899,"line_start":372,"line_end":372,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53900,"byte_end":53980,"line_start":373,"line_end":373,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":53981,"byte_end":54005,"line_start":374,"line_end":374,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54006,"byte_end":54131,"line_start":375,"line_end":375,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54132,"byte_end":54152,"line_start":376,"line_end":376,"column_start":1,"column_end":21}},{"value":"/ * If any element of the converted slice would contain an invalid bit pattern","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54153,"byte_end":54233,"line_start":377,"line_end":377,"column_start":1,"column_end":81}},{"value":"/   for `B` this fails.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54234,"byte_end":54259,"line_start":378,"line_end":378,"column_start":1,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54260,"byte_end":54269,"line_start":379,"line_end":379,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54815,"byte_end":54833,"line_start":399,"line_end":399,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::checked::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B, '_>(&'_ mut [A])\n-> Result<&'_ mut [B], CheckedCastError> where A: NoUninit + AnyBitPattern,\nB: CheckedBitPattern + NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54669,"byte_end":54741,"line_start":394,"line_end":394,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54742,"byte_end":54754,"line_start":395,"line_end":395,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54755,"byte_end":54758,"line_start":396,"line_end":396,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54759,"byte_end":54797,"line_start":397,"line_end":397,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":54798,"byte_end":54807,"line_start":398,"line_end":398,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55393,"byte_end":55403,"line_start":422,"line_end":422,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::checked::from_bytes","value":"fn from_bytes<T, '_>(&'_ [u8]) -> &'_ T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55263,"byte_end":55297,"line_start":416,"line_end":416,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55298,"byte_end":55301,"line_start":417,"line_end":417,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55302,"byte_end":55315,"line_start":418,"line_end":418,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55316,"byte_end":55319,"line_start":419,"line_end":419,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55320,"byte_end":55375,"line_start":420,"line_end":420,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55376,"byte_end":55385,"line_start":421,"line_end":421,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":190},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55690,"byte_end":55704,"line_start":435,"line_end":435,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::checked::from_bytes_mut","value":"fn from_bytes_mut<T, '_>(&'_ mut [u8]) -> &'_ mut T where T: NoUninit +\nCheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55548,"byte_end":55590,"line_start":429,"line_end":429,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55591,"byte_end":55594,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55595,"byte_end":55608,"line_start":431,"line_end":431,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55609,"byte_end":55612,"line_start":432,"line_end":432,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55613,"byte_end":55672,"line_start":433,"line_end":433,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55673,"byte_end":55682,"line_start":434,"line_end":434,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":192},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56020,"byte_end":56038,"line_start":447,"line_end":447,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::checked::pod_read_unaligned","value":"fn pod_read_unaligned<T, '_>(&'_ [u8]) -> T where T: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55876,"byte_end":55913,"line_start":442,"line_end":442,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55914,"byte_end":55917,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55918,"byte_end":55931,"line_start":444,"line_end":444,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":55932,"byte_end":56002,"line_start":445,"line_end":445,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56003,"byte_end":56012,"line_start":446,"line_end":446,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":194},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56345,"byte_end":56349,"line_start":460,"line_end":460,"column_start":8,"column_end":12},"name":"cast","qualname":"::checked::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56206,"byte_end":56227,"line_start":454,"line_end":454,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56228,"byte_end":56231,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56232,"byte_end":56245,"line_start":456,"line_end":456,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56246,"byte_end":56249,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56250,"byte_end":56327,"line_start":458,"line_end":458,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56328,"byte_end":56337,"line_start":459,"line_end":459,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":197},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56616,"byte_end":56624,"line_start":473,"line_end":473,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::checked::cast_mut","value":"fn cast_mut<A, B, '_>(&'_ mut A) -> &'_ mut B where A: NoUninit +\nAnyBitPattern, B: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56490,"byte_end":56522,"line_start":467,"line_end":467,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56523,"byte_end":56526,"line_start":468,"line_end":468,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56527,"byte_end":56540,"line_start":469,"line_end":469,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56541,"byte_end":56544,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56545,"byte_end":56598,"line_start":471,"line_end":471,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56599,"byte_end":56608,"line_start":472,"line_end":472,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":200},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56940,"byte_end":56948,"line_start":491,"line_end":491,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::checked::cast_ref","value":"fn cast_ref<A, B, '_>(&'_ A) -> &'_ B where A: NoUninit, B: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56822,"byte_end":56846,"line_start":485,"line_end":485,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56847,"byte_end":56850,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56851,"byte_end":56864,"line_start":487,"line_end":487,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56865,"byte_end":56868,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56869,"byte_end":56922,"line_start":489,"line_end":489,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":56923,"byte_end":56932,"line_start":490,"line_end":490,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57223,"byte_end":57233,"line_start":504,"line_end":504,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::checked::cast_slice","value":"fn cast_slice<A, B, '_>(&'_ [A]) -> &'_ [B] where A: NoUninit,\nB: CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57099,"byte_end":57127,"line_start":498,"line_end":498,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57128,"byte_end":57131,"line_start":499,"line_end":499,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57132,"byte_end":57145,"line_start":500,"line_end":500,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57146,"byte_end":57149,"line_start":501,"line_end":501,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57150,"byte_end":57205,"line_start":502,"line_end":502,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57206,"byte_end":57215,"line_start":503,"line_end":503,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":206},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57528,"byte_end":57542,"line_start":517,"line_end":517,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::checked::cast_slice_mut","value":"fn cast_slice_mut<A, B, '_>(&'_ mut [A]) -> &'_ mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + CheckedBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57392,"byte_end":57428,"line_start":511,"line_end":511,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57429,"byte_end":57432,"line_start":512,"line_end":512,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57433,"byte_end":57446,"line_start":513,"line_end":513,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57447,"byte_end":57450,"line_start":514,"line_end":514,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57451,"byte_end":57510,"line_start":515,"line_end":515,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":57511,"byte_end":57520,"line_start":516,"line_end":516,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":269},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71376,"byte_end":71384,"line_start":25,"line_end":25,"column_start":18,"column_end":26},"name":"Zeroable","qualname":"::zeroable::Zeroable","value":"Zeroable: Sized","parent":null,"children":[{"krate":0,"index":270}],"decl_id":null,"docs":" Trait for types that can be safely created with\n [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Trait for types that can be safely created with","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70480,"byte_end":70531,"line_start":3,"line_end":3,"column_start":1,"column_end":52}},{"value":"/ [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70532,"byte_end":70566,"line_start":4,"line_end":4,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70567,"byte_end":70570,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ An all-zeroes value may or may not be the same value as the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70571,"byte_end":70634,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/ [Default](core::default::Default) value of the type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70635,"byte_end":70691,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70692,"byte_end":70695,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70696,"byte_end":70709,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70710,"byte_end":70713,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * Your type must be inhabited (eg: no","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70714,"byte_end":70755,"line_start":11,"line_end":11,"column_start":1,"column_end":42}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70756,"byte_end":70803,"line_start":12,"line_end":12,"column_start":1,"column_end":48}},{"value":"/ * Your type must be allowed to be an \"all zeroes\" bit pattern (eg: no","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70804,"byte_end":70877,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/   [`NonNull<T>`](core::ptr::NonNull)).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70878,"byte_end":70920,"line_start":14,"line_end":14,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70921,"byte_end":70924,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ## Features","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70925,"byte_end":70940,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70941,"byte_end":70944,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Some `impl`s are feature gated due to the MSRV policy:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":70945,"byte_end":71003,"line_start":18,"line_end":18,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71004,"byte_end":71007,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ * `MaybeUninit<T>` was not available in 1.34.0, but is available under the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71008,"byte_end":71086,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/   `zeroable_maybe_uninit` feature flag.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71087,"byte_end":71130,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ * `Atomic*` types require Rust 1.60.0 or later to work on certain platforms, but is available","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71131,"byte_end":71228,"line_start":22,"line_end":22,"column_start":1,"column_end":98}},{"value":"/   under the `zeroable_atomics` feature flag.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71229,"byte_end":71277,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/ * `[T; N]` for arbitrary `N` requires the `min_const_generics` feature flag.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71278,"byte_end":71358,"line_start":24,"line_end":24,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71664,"byte_end":71670,"line_start":32,"line_end":32,"column_start":6,"column_end":12},"name":"zeroed","qualname":"::zeroable::Zeroable::zeroed","value":"fn zeroed() -> Self","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":" Calls [`zeroed`](core::mem::zeroed).","sig":null,"attributes":[{"value":"/ Calls [`zeroed`](core::mem::zeroed).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71396,"byte_end":71436,"line_start":26,"line_end":26,"column_start":3,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71439,"byte_end":71442,"line_start":27,"line_end":27,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `MyType::zeroed()` in your","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71445,"byte_end":71520,"line_start":28,"line_end":28,"column_start":3,"column_end":78}},{"value":"/ code. It is a contract of this trait that if you implement it on your type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71523,"byte_end":71601,"line_start":29,"line_end":29,"column_start":3,"column_end":81}},{"value":"/ you **must not** override this method.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71604,"byte_end":71646,"line_start":30,"line_end":30,"column_start":3,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71649,"byte_end":71658,"line_start":31,"line_end":31,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79179,"byte_end":79195,"line_start":13,"line_end":13,"column_start":18,"column_end":34},"name":"ZeroableInOption","qualname":"::zeroable_in_option::ZeroableInOption","value":"ZeroableInOption: Sized","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Zeroable](Zeroable) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Zeroable](Zeroable) when wrapped in","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":78949,"byte_end":79015,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79016,"byte_end":79051,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79052,"byte_end":79055,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79056,"byte_end":79069,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79070,"byte_end":79073,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<YourType>` must uphold the same invariants as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79074,"byte_end":79133,"line_start":11,"line_end":11,"column_start":1,"column_end":60}},{"value":"/   [Zeroable](Zeroable).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79134,"byte_end":79161,"line_start":12,"line_end":12,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":384},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82068,"byte_end":82071,"line_start":37,"line_end":37,"column_start":18,"column_end":21},"name":"Pod","qualname":"::pod::Pod","value":"Pod: Zeroable + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\".","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\".","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80174,"byte_end":80212,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80213,"byte_end":80216,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ The point of this trait is that once something is marked \"plain old data\"","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80217,"byte_end":80294,"line_start":5,"line_end":5,"column_start":1,"column_end":78}},{"value":"/ you can really go to town with the bit fiddling and bit casting. Therefore,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80295,"byte_end":80374,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ it's a relatively strong claim to make about a type. Do not add this to your","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80375,"byte_end":80455,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ type casually.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80456,"byte_end":80474,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80475,"byte_end":80478,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ **Reminder:** The results of casting around bytes between data types are","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80479,"byte_end":80555,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ _endian dependant_. Little-endian machines are the most common, but","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80556,"byte_end":80627,"line_start":11,"line_end":11,"column_start":1,"column_end":72}},{"value":"/ big-endian machines do exist (and big-endian is also used for \"network","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80628,"byte_end":80702,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/ order\" bytes).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80703,"byte_end":80721,"line_start":13,"line_end":13,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80722,"byte_end":80725,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80726,"byte_end":80739,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80740,"byte_end":80743,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80744,"byte_end":80784,"line_start":17,"line_end":17,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80785,"byte_end":80832,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/ * The type must allow any bit pattern (eg: no `bool` or `char`, which have","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80833,"byte_end":80911,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/   illegal bit patterns).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80912,"byte_end":80940,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":80941,"byte_end":81017,"line_start":21,"line_end":21,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81018,"byte_end":81096,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81097,"byte_end":81177,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81178,"byte_end":81208,"line_start":24,"line_end":24,"column_start":1,"column_end":31}},{"value":"/ * The type needs to have all fields also be `Pod`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81209,"byte_end":81263,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/ * The type needs to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81264,"byte_end":81339,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81340,"byte_end":81419,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81420,"byte_end":81464,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81465,"byte_end":81545,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81546,"byte_end":81604,"line_start":30,"line_end":30,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81605,"byte_end":81679,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81680,"byte_end":81757,"line_start":32,"line_end":32,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81758,"byte_end":81838,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81839,"byte_end":81919,"line_start":34,"line_end":34,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":81920,"byte_end":81999,"line_start":35,"line_end":35,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82000,"byte_end":82050,"line_start":36,"line_end":36,"column_start":1,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":412},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86715,"byte_end":86726,"line_start":14,"line_end":14,"column_start":18,"column_end":29},"name":"PodInOption","qualname":"::pod_in_option::PodInOption","value":"PodInOption: ZeroableInOption + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Trait for types which are [Pod](Pod) when wrapped in\n [Option](core::option::Option).","sig":null,"attributes":[{"value":"/ Trait for types which are [Pod](Pod) when wrapped in","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86389,"byte_end":86445,"line_start":6,"line_end":6,"column_start":1,"column_end":57}},{"value":"/ [Option](core::option::Option).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86446,"byte_end":86481,"line_start":7,"line_end":7,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86482,"byte_end":86485,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ## Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86486,"byte_end":86499,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86500,"byte_end":86503,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ * `Option<T>` must uphold the same invariants as [Pod](Pod).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86504,"byte_end":86568,"line_start":11,"line_end":11,"column_start":1,"column_end":65}},{"value":"/ * **Reminder:** pointers are **not** pod! **Do not** mix this trait with a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86569,"byte_end":86647,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/   newtype over [NonNull](core::ptr::NonNull).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86648,"byte_end":86697,"line_start":13,"line_end":13,"column_start":1,"column_end":50}}]},{"kind":"Trait","id":{"krate":0,"index":467},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90575,"byte_end":90583,"line_start":61,"line_end":61,"column_start":18,"column_end":26},"name":"NoUninit","qualname":"::no_uninit::NoUninit","value":"NoUninit: Sized + Copy + 'static","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","sig":null,"attributes":[{"value":"/ Marker trait for \"plain old data\" types with no uninit (or padding) bytes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":87491,"byte_end":87569,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":87570,"byte_end":87573,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ The requirements for this is very similar to [`Pod`],","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":87574,"byte_end":87631,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/ except that it doesn't require that all bit patterns of the type are valid,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":87632,"byte_end":87711,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ i.e. it does not require the type to be [`Zeroable`][crate::Zeroable].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":87712,"byte_end":87786,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ This limits what you can do with a type of this kind, but also broadens the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":87787,"byte_end":87866,"line_start":12,"line_end":12,"column_start":1,"column_end":80}},{"value":"/ included types to things like C-style enums. Notably, you can only cast from","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":87867,"byte_end":87947,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ *immutable* references to a [`NoUninit`] type into *immutable* references of","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":87948,"byte_end":88028,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/ any other type, no casting of mutable references or mutable references to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88029,"byte_end":88106,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ slices etc.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88107,"byte_end":88122,"line_start":16,"line_end":16,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88123,"byte_end":88126,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ [`Pod`] is a subset of [`NoUninit`], meaning that any `T: Pod` is also","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88127,"byte_end":88201,"line_start":18,"line_end":18,"column_start":1,"column_end":75}},{"value":"/ [`NoUninit`] but any `T: NoUninit` is not necessarily [`Pod`]. If possible,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88202,"byte_end":88281,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ prefer implementing [`Pod`] directly. To get more [`Pod`]-like functionality","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88282,"byte_end":88362,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/ for a type that is only [`NoUninit`], consider also implementing","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88363,"byte_end":88431,"line_start":21,"line_end":21,"column_start":1,"column_end":69}},{"value":"/ [`CheckedBitPattern`][crate::CheckedBitPattern].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88432,"byte_end":88484,"line_start":22,"line_end":22,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88485,"byte_end":88488,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Derive","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88489,"byte_end":88501,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88502,"byte_end":88505,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ A `#[derive(NoUninit)]` macro is provided under the `derive` feature flag","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88506,"byte_end":88583,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ which will automatically validate the requirements of this trait and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88584,"byte_end":88656,"line_start":27,"line_end":27,"column_start":1,"column_end":73}},{"value":"/ implement the trait for you for both enums and structs. This is the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88657,"byte_end":88728,"line_start":28,"line_end":28,"column_start":1,"column_end":72}},{"value":"/ recommended method for implementing the trait, however it's also possible to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88729,"byte_end":88809,"line_start":29,"line_end":29,"column_start":1,"column_end":81}},{"value":"/ do manually. If you implement it manually, you *must* carefully follow the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88810,"byte_end":88888,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/ below safety rules.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88889,"byte_end":88912,"line_start":31,"line_end":31,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88913,"byte_end":88916,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88917,"byte_end":88929,"line_start":33,"line_end":33,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88930,"byte_end":88933,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The same as [`Pod`] except we disregard the rule about it must","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":88934,"byte_end":89000,"line_start":35,"line_end":35,"column_start":1,"column_end":67}},{"value":"/ allow any bit pattern (i.e. it does not need to be","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89001,"byte_end":89055,"line_start":36,"line_end":36,"column_start":1,"column_end":55}},{"value":"/ [`Zeroable`][crate::Zeroable]). Still, this is a quite strong guarantee","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89056,"byte_end":89131,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ about a type, so *be careful* whem implementing it manually.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89132,"byte_end":89196,"line_start":38,"line_end":38,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89197,"byte_end":89200,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ * The type must be inhabited (eg: no","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89201,"byte_end":89241,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/   [Infallible](core::convert::Infallible)).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89242,"byte_end":89289,"line_start":41,"line_end":41,"column_start":1,"column_end":48}},{"value":"/ * The type must not contain any uninit (or padding) bytes, either in the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89290,"byte_end":89366,"line_start":42,"line_end":42,"column_start":1,"column_end":77}},{"value":"/   middle or on the end (eg: no `#[repr(C)] struct Foo(u8, u16)`, which has","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89367,"byte_end":89445,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/   padding in the middle, and also no `#[repr(C)] struct Foo(u16, u8)`, which","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89446,"byte_end":89526,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/   has padding on the end).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89527,"byte_end":89557,"line_start":45,"line_end":45,"column_start":1,"column_end":31}},{"value":"/ * Structs need to have all fields also be `NoUninit`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89558,"byte_end":89615,"line_start":46,"line_end":46,"column_start":1,"column_end":58}},{"value":"/ * Structs need to be `repr(C)` or `repr(transparent)`. In the case of","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89616,"byte_end":89689,"line_start":47,"line_end":47,"column_start":1,"column_end":74}},{"value":"/   `repr(C)`, the `packed` and `align` repr modifiers can be used as long as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89690,"byte_end":89769,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/   all other rules end up being followed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89770,"byte_end":89814,"line_start":49,"line_end":49,"column_start":1,"column_end":45}},{"value":"/ * Enums need to have an explicit `#[repr(Int)]`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89815,"byte_end":89866,"line_start":50,"line_end":50,"column_start":1,"column_end":52}},{"value":"/ * Enums must have only fieldless variants","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89867,"byte_end":89912,"line_start":51,"line_end":51,"column_start":1,"column_end":46}},{"value":"/ * It is disallowed for types to contain pointer types, `Cell`, `UnsafeCell`,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89913,"byte_end":89993,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/   atomics, and any other forms of interior mutability.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":89994,"byte_end":90052,"line_start":53,"line_end":53,"column_start":1,"column_end":59}},{"value":"/ * More precisely: A shared reference to the type must allow reads, and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90053,"byte_end":90127,"line_start":54,"line_end":54,"column_start":1,"column_end":75}},{"value":"/   *only* reads. RustBelt's separation logic is based on the notion that a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90128,"byte_end":90205,"line_start":55,"line_end":55,"column_start":1,"column_end":78}},{"value":"/   type is allowed to define a sharing predicate, its own invariant that must","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90206,"byte_end":90286,"line_start":56,"line_end":56,"column_start":1,"column_end":81}},{"value":"/   hold for shared references, and this predicate is the reasoning that allow","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90287,"byte_end":90367,"line_start":57,"line_end":57,"column_start":1,"column_end":81}},{"value":"/   it to deal with atomic and cells etc. We require the sharing predicate to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90368,"byte_end":90447,"line_start":58,"line_end":58,"column_start":1,"column_end":80}},{"value":"/   be trivial and permit only read-only access.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90448,"byte_end":90498,"line_start":59,"line_end":59,"column_start":1,"column_end":51}},{"value":"/ * There's probably more, don't mess it up (I mean it).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90499,"byte_end":90557,"line_start":60,"line_end":60,"column_start":1,"column_end":59}}]},{"kind":"Trait","id":{"krate":0,"index":487},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94255,"byte_end":94265,"line_start":78,"line_end":78,"column_start":18,"column_end":28},"name":"Contiguous","qualname":"::contiguous::Contiguous","value":"Contiguous: Copy + 'static","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492}],"decl_id":null,"docs":" A trait indicating that:","sig":null,"attributes":[{"value":"/ A trait indicating that:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91287,"byte_end":91315,"line_start":3,"line_end":3,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91316,"byte_end":91319,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ 1. A type has an equivalent representation to some known integral type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91320,"byte_end":91395,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/ 2. All instances of this type fall in a fixed range of values.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91396,"byte_end":91462,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ 3. Within that range, there are no gaps.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91463,"byte_end":91507,"line_start":7,"line_end":7,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91508,"byte_end":91511,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This is generally useful for fieldless enums (aka \"c-style\" enums), however","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91512,"byte_end":91591,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ it's important that it only be used for those with an explicit `#[repr]`, as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91592,"byte_end":91672,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ `#[repr(Rust)]` fieldess enums have an unspecified layout.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91673,"byte_end":91735,"line_start":11,"line_end":11,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91736,"byte_end":91739,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Additionally, you shouldn't assume that all implementations are enums. Any","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91740,"byte_end":91818,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ type which meets the requirements above while following the rules under","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91819,"byte_end":91894,"line_start":14,"line_end":14,"column_start":1,"column_end":76}},{"value":"/ \"Safety\" below is valid.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91895,"byte_end":91923,"line_start":15,"line_end":15,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91924,"byte_end":91927,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91928,"byte_end":91941,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91942,"byte_end":91945,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91946,"byte_end":91953,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ # use bytemuck::Contiguous;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91954,"byte_end":91985,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/ #[repr(u8)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":91986,"byte_end":92001,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ #[derive(Debug, Copy, Clone, PartialEq)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92002,"byte_end":92046,"line_start":22,"line_end":22,"column_start":1,"column_end":45}},{"value":"/ enum Foo {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92047,"byte_end":92061,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/   A = 0,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92062,"byte_end":92074,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/   B = 1,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92075,"byte_end":92087,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/   C = 2,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92088,"byte_end":92100,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/   D = 3,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92101,"byte_end":92113,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/   E = 4,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92114,"byte_end":92126,"line_start":28,"line_end":28,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92127,"byte_end":92132,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/ unsafe impl Contiguous for Foo {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92133,"byte_end":92169,"line_start":30,"line_end":30,"column_start":1,"column_end":37}},{"value":"/   type Int = u8;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92170,"byte_end":92190,"line_start":31,"line_end":31,"column_start":1,"column_end":21}},{"value":"/   const MIN_VALUE: u8 = Foo::A as u8;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92191,"byte_end":92232,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/   const MAX_VALUE: u8 = Foo::E as u8;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92233,"byte_end":92274,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92275,"byte_end":92280,"line_start":34,"line_end":34,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(Foo::from_integer(3).unwrap(), Foo::D);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92281,"byte_end":92335,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(Foo::from_integer(8), None);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92336,"byte_end":92379,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(Foo::C.into_integer(), 2);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92380,"byte_end":92421,"line_start":37,"line_end":37,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92422,"byte_end":92429,"line_start":38,"line_end":38,"column_start":1,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92430,"byte_end":92442,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92443,"byte_end":92446,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This is an unsafe trait, and incorrectly implementing it is undefined","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92447,"byte_end":92520,"line_start":41,"line_end":41,"column_start":1,"column_end":74}},{"value":"/ behavior.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92521,"byte_end":92534,"line_start":42,"line_end":42,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92535,"byte_end":92538,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Informally, by implementing it, you're asserting that `C` is identical to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92539,"byte_end":92616,"line_start":44,"line_end":44,"column_start":1,"column_end":78}},{"value":"/ the integral type `C::Int`, and that every `C` falls between `C::MIN_VALUE`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92617,"byte_end":92696,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ and `C::MAX_VALUE` exactly once, without any gaps.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92697,"byte_end":92751,"line_start":46,"line_end":46,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92752,"byte_end":92755,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Precisely, the guarantees you must uphold when implementing `Contiguous` for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92756,"byte_end":92836,"line_start":48,"line_end":48,"column_start":1,"column_end":81}},{"value":"/ some type `C` are:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92837,"byte_end":92859,"line_start":49,"line_end":49,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92860,"byte_end":92863,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ 1. The size of `C` and `C::Int` must be the same, and neither may be a ZST.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92864,"byte_end":92944,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/    (Note: alignment is explicitly allowed to differ)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":92945,"byte_end":93001,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93002,"byte_end":93005,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ 2. `C::Int` must be a primitive integer, and not a wrapper type. In the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93006,"byte_end":93081,"line_start":54,"line_end":54,"column_start":1,"column_end":76}},{"value":"/    future, this may be lifted to include cases where the behavior is","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93082,"byte_end":93154,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/    identical for a relevant set of traits (Ord, arithmetic, ...).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93155,"byte_end":93224,"line_start":56,"line_end":56,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93225,"byte_end":93228,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ 3. All `C::Int`s which are in the *inclusive* range between `C::MIN_VALUE`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93229,"byte_end":93307,"line_start":58,"line_end":58,"column_start":1,"column_end":79}},{"value":"/    and `C::MAX_VALUE` are bitwise identical to unique valid instances of","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93308,"byte_end":93384,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/    `C`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93385,"byte_end":93396,"line_start":60,"line_end":60,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93397,"byte_end":93400,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ 4. There exist no instances of `C` such that their bitpatterns, when","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93401,"byte_end":93473,"line_start":62,"line_end":62,"column_start":1,"column_end":73}},{"value":"/    interpreted as instances of `C::Int`, fall outside of the `MAX_VALUE` /","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93474,"byte_end":93552,"line_start":63,"line_end":63,"column_start":1,"column_end":79}},{"value":"/    `MIN_VALUE` range -- It is legal for unsafe code to assume that if it","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93553,"byte_end":93629,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/    gets a `C` that implements `Contiguous`, it is in the appropriate range.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93630,"byte_end":93709,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93710,"byte_end":93713,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ 5. Finally, you promise not to provide overridden implementations of","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93714,"byte_end":93786,"line_start":67,"line_end":67,"column_start":1,"column_end":73}},{"value":"/    `Contiguous::from_integer` and `Contiguous::into_integer`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93787,"byte_end":93852,"line_start":68,"line_end":68,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93853,"byte_end":93856,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ For clarity, the following rules could be derived from the above, but are","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93857,"byte_end":93934,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/ listed explicitly:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93935,"byte_end":93957,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93958,"byte_end":93961,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ - `C::MAX_VALUE` must be greater or equal to `C::MIN_VALUE` (therefore, `C`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":93962,"byte_end":94041,"line_start":73,"line_end":73,"column_start":1,"column_end":80}},{"value":"/   must be an inhabited type).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94042,"byte_end":94075,"line_start":74,"line_end":74,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94076,"byte_end":94079,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ - There exist no two values between `MIN_VALUE` and `MAX_VALUE` such that","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94080,"byte_end":94157,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/   when interpreted as a `C` they are considered identical (by, say, match).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94158,"byte_end":94237,"line_start":77,"line_end":77,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":488},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95090,"byte_end":95093,"line_start":96,"line_end":96,"column_start":8,"column_end":11},"name":"Int","qualname":"::contiguous::Contiguous::Int","value":"type Int: Copy + Ord;","parent":{"krate":0,"index":487},"children":[],"decl_id":null,"docs":" The primitive integer type with an identical representation to this\n type.","sig":null,"attributes":[{"value":"/ The primitive integer type with an identical representation to this","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94286,"byte_end":94357,"line_start":79,"line_end":79,"column_start":3,"column_end":74}},{"value":"/ type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94360,"byte_end":94369,"line_start":80,"line_end":80,"column_start":3,"column_end":12}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94372,"byte_end":94375,"line_start":81,"line_end":81,"column_start":3,"column_end":6}},{"value":"/ Contiguous is broadly intended for use with fieldless enums, and for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94378,"byte_end":94450,"line_start":82,"line_end":82,"column_start":3,"column_end":75}},{"value":"/ these the correct integer type is easy: The enum should have a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94453,"byte_end":94519,"line_start":83,"line_end":83,"column_start":3,"column_end":69}},{"value":"/ `#[repr(Int)]` or `#[repr(C)]` attribute, (if it does not, it is","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94522,"byte_end":94590,"line_start":84,"line_end":84,"column_start":3,"column_end":71}},{"value":"/ *unsound* to implement `Contiguous`!).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94593,"byte_end":94635,"line_start":85,"line_end":85,"column_start":3,"column_end":45}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94638,"byte_end":94641,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(Int)]`, use the listed `Int`. e.g. `#[repr(u8)]` should use","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94644,"byte_end":94721,"line_start":87,"line_end":87,"column_start":3,"column_end":80}},{"value":"/   `type Int = u8`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94724,"byte_end":94746,"line_start":88,"line_end":88,"column_start":3,"column_end":25}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94749,"byte_end":94752,"line_start":89,"line_end":89,"column_start":3,"column_end":6}},{"value":"/ - For `#[repr(C)]`, use whichever type the C compiler will use to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94755,"byte_end":94824,"line_start":90,"line_end":90,"column_start":3,"column_end":72}},{"value":"/   represent the given enum. This is usually `c_int` (from `std::os::raw`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94827,"byte_end":94903,"line_start":91,"line_end":91,"column_start":3,"column_end":79}},{"value":"/   or `libc`), but it's up to you to make the determination as the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94906,"byte_end":94975,"line_start":92,"line_end":92,"column_start":3,"column_end":72}},{"value":"/   implementer of the unsafe trait.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94978,"byte_end":95016,"line_start":93,"line_end":93,"column_start":3,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95019,"byte_end":95022,"line_start":94,"line_end":94,"column_start":3,"column_end":6}},{"value":"/ For precise rules, see the list under \"Safety\" above.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95025,"byte_end":95082,"line_start":95,"line_end":95,"column_start":3,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":489},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95184,"byte_end":95193,"line_start":99,"line_end":99,"column_start":9,"column_end":18},"name":"MAX_VALUE","qualname":"::contiguous::Contiguous::MAX_VALUE","value":"Self::Int","parent":{"krate":0,"index":487},"children":[],"decl_id":null,"docs":" The upper *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The upper *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95110,"byte_end":95175,"line_start":98,"line_end":98,"column_start":3,"column_end":68}}]},{"kind":"Const","id":{"krate":0,"index":490},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95283,"byte_end":95292,"line_start":102,"line_end":102,"column_start":9,"column_end":18},"name":"MIN_VALUE","qualname":"::contiguous::Contiguous::MIN_VALUE","value":"Self::Int","parent":{"krate":0,"index":487},"children":[],"decl_id":null,"docs":" The lower *inclusive* bound for valid instances of this type.\n","sig":null,"attributes":[{"value":"/ The lower *inclusive* bound for valid instances of this type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95209,"byte_end":95274,"line_start":101,"line_end":101,"column_start":3,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95957,"byte_end":95969,"line_start":119,"line_end":119,"column_start":6,"column_end":18},"name":"from_integer","qualname":"::contiguous::Contiguous::from_integer","value":"fn from_integer(Self::Int) -> Option<Self>","parent":{"krate":0,"index":487},"children":[],"decl_id":null,"docs":" If `value` is within the range for valid instances of this type,\n returns `Some(converted_value)`, otherwise, returns `None`.","sig":null,"attributes":[{"value":"/ If `value` is within the range for valid instances of this type,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95308,"byte_end":95376,"line_start":104,"line_end":104,"column_start":3,"column_end":71}},{"value":"/ returns `Some(converted_value)`, otherwise, returns `None`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95379,"byte_end":95442,"line_start":105,"line_end":105,"column_start":3,"column_end":66}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95445,"byte_end":95448,"line_start":106,"line_end":106,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95451,"byte_end":95525,"line_start":107,"line_end":107,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95528,"byte_end":95595,"line_start":108,"line_end":108,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95598,"byte_end":95666,"line_start":109,"line_end":109,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95669,"byte_end":95672,"line_start":110,"line_end":110,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95675,"byte_end":95687,"line_start":111,"line_end":111,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95690,"byte_end":95693,"line_start":112,"line_end":112,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95696,"byte_end":95769,"line_start":113,"line_end":113,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95772,"byte_end":95818,"line_start":114,"line_end":114,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95821,"byte_end":95824,"line_start":115,"line_end":115,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95827,"byte_end":95901,"line_start":116,"line_end":116,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95904,"byte_end":95939,"line_start":117,"line_end":117,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":95942,"byte_end":95951,"line_start":118,"line_end":118,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97492,"byte_end":97504,"line_start":154,"line_end":154,"column_start":6,"column_end":18},"name":"into_integer","qualname":"::contiguous::Contiguous::into_integer","value":"fn into_integer(Self) -> Self::Int","parent":{"krate":0,"index":487},"children":[],"decl_id":null,"docs":" Perform the conversion from `C` into the underlying integral type. This\n mostly exists otherwise generic code would need unsafe for the `value as\n integer`","sig":null,"attributes":[{"value":"/ Perform the conversion from `C` into the underlying integral type. This","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":96808,"byte_end":96883,"line_start":138,"line_end":138,"column_start":3,"column_end":78}},{"value":"/ mostly exists otherwise generic code would need unsafe for the `value as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":96886,"byte_end":96962,"line_start":139,"line_end":139,"column_start":3,"column_end":79}},{"value":"/ integer`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":96965,"byte_end":96977,"line_start":140,"line_end":140,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":96980,"byte_end":96983,"line_start":141,"line_end":141,"column_start":3,"column_end":6}},{"value":"/ This is a trait method so that you can write `value.into_integer()` in","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":96986,"byte_end":97060,"line_start":142,"line_end":142,"column_start":3,"column_end":77}},{"value":"/ your code. It is a contract of this trait that if you implement","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97063,"byte_end":97130,"line_start":143,"line_end":143,"column_start":3,"column_end":70}},{"value":"/ `Contiguous` on your type you **must not** override this method.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97133,"byte_end":97201,"line_start":144,"line_end":144,"column_start":3,"column_end":71}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97204,"byte_end":97207,"line_start":145,"line_end":145,"column_start":3,"column_end":6}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97210,"byte_end":97222,"line_start":146,"line_end":146,"column_start":3,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97225,"byte_end":97228,"line_start":147,"line_end":147,"column_start":3,"column_end":6}},{"value":"/ We will not panic for any correct implementation of `Contiguous`, but","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97231,"byte_end":97304,"line_start":148,"line_end":148,"column_start":3,"column_end":76}},{"value":"/ *may* panic if we detect an incorrect one.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97307,"byte_end":97353,"line_start":149,"line_end":149,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97356,"byte_end":97359,"line_start":150,"line_end":150,"column_start":3,"column_end":6}},{"value":"/ This is undefined behavior regardless, so it could have been the nasal","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97362,"byte_end":97436,"line_start":151,"line_end":151,"column_start":3,"column_end":77}},{"value":"/ demons at that point anyway ;).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97439,"byte_end":97474,"line_start":152,"line_end":152,"column_start":3,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":97477,"byte_end":97486,"line_start":153,"line_end":153,"column_start":3,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":500},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107638,"byte_end":107656,"line_start":87,"line_end":87,"column_start":18,"column_end":36},"name":"TransparentWrapper","qualname":"::transparent::TransparentWrapper","value":"TransparentWrapper<Inner>","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"decl_id":null,"docs":" A trait which indicates that a type is a `#[repr(transparent)]` wrapper\n around the `Inner` value.","sig":null,"attributes":[{"value":"/ A trait which indicates that a type is a `#[repr(transparent)]` wrapper","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":104549,"byte_end":104624,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ around the `Inner` value.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":104625,"byte_end":104654,"line_start":4,"line_end":4,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":104655,"byte_end":104658,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This allows safely copy transmuting between the `Inner` type and the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":104659,"byte_end":104731,"line_start":6,"line_end":6,"column_start":1,"column_end":73}},{"value":"/ `TransparentWrapper` type. Functions like `wrap_{}` convert from the inner","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":104732,"byte_end":104810,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ type to the wrapper type and `peel_{}` functions do the inverse conversion","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":104811,"byte_end":104889,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ from the wrapper type to the inner type. We deliberately do not call the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":104890,"byte_end":104966,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ wrapper-removing methods \"unwrap\" because at this point that word is too","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":104967,"byte_end":105043,"line_start":10,"line_end":10,"column_start":1,"column_end":77}},{"value":"/ strongly tied to the Option/ Result methods.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105044,"byte_end":105092,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105093,"byte_end":105096,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105097,"byte_end":105109,"line_start":13,"line_end":13,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105110,"byte_end":105113,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The safety contract of `TransparentWrapper` is relatively simple:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105114,"byte_end":105183,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105184,"byte_end":105187,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ For a given `Wrapper` which implements `TransparentWrapper<Inner>`:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105188,"byte_end":105259,"line_start":17,"line_end":17,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105260,"byte_end":105263,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ 1. `Wrapper` must be a wrapper around `Inner` with an identical data","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105264,"byte_end":105336,"line_start":19,"line_end":19,"column_start":1,"column_end":73}},{"value":"/    representations. This    either means that it must be a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105337,"byte_end":105399,"line_start":20,"line_end":20,"column_start":1,"column_end":63}},{"value":"/    `#[repr(transparent)]` struct which    contains a either a field of type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105400,"byte_end":105479,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/    `Inner` (or a field of some other    transparent wrapper for `Inner`) as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105480,"byte_end":105559,"line_start":22,"line_end":22,"column_start":1,"column_end":80}},{"value":"/    the only non-ZST field.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105560,"byte_end":105590,"line_start":23,"line_end":23,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105591,"byte_end":105594,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ 2. Any fields *other* than the `Inner` field must be trivially constructable","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105595,"byte_end":105675,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/    ZSTs, for example `PhantomData`, `PhantomPinned`, etc.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105676,"byte_end":105737,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105738,"byte_end":105741,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ 3. The `Wrapper` may not impose additional alignment requirements over","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105742,"byte_end":105816,"line_start":28,"line_end":28,"column_start":1,"column_end":75}},{"value":"/    `Inner`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105817,"byte_end":105832,"line_start":29,"line_end":29,"column_start":1,"column_end":16}},{"value":"/     - Note: this is currently guaranteed by `repr(transparent)`, but there","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105833,"byte_end":105911,"line_start":30,"line_end":30,"column_start":1,"column_end":79}},{"value":"/       have been discussions of lifting it, so it's stated here explicitly.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105912,"byte_end":105990,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105991,"byte_end":105994,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ 4. All functions on `TransparentWrapper` **may not** be overridden.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":105995,"byte_end":106066,"line_start":33,"line_end":33,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106067,"byte_end":106070,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ## Caveats","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106071,"byte_end":106085,"line_start":35,"line_end":35,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106086,"byte_end":106089,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ If the wrapper imposes additional constraints upon the inner type which are","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106090,"byte_end":106169,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ required for safety, it's responsible for ensuring those still hold -- this","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106170,"byte_end":106249,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ generally requires preventing access to instances of the inner type, as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106250,"byte_end":106325,"line_start":39,"line_end":39,"column_start":1,"column_end":76}},{"value":"/ implementing `TransparentWrapper<U> for T` means anybody can call","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106326,"byte_end":106395,"line_start":40,"line_end":40,"column_start":1,"column_end":70}},{"value":"/ `T::cast_ref(any_instance_of_u)`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106396,"byte_end":106433,"line_start":41,"line_end":41,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106434,"byte_end":106437,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ For example, it would be invalid to implement TransparentWrapper for `str`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106438,"byte_end":106516,"line_start":43,"line_end":43,"column_start":1,"column_end":79}},{"value":"/ to implement `TransparentWrapper` around `[u8]` because of this.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106517,"byte_end":106585,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106586,"byte_end":106589,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106590,"byte_end":106604,"line_start":46,"line_end":46,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106605,"byte_end":106608,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ ## Basic","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106609,"byte_end":106621,"line_start":48,"line_end":48,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106622,"byte_end":106625,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106626,"byte_end":106633,"line_start":50,"line_end":50,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106634,"byte_end":106671,"line_start":51,"line_end":51,"column_start":1,"column_end":38}},{"value":"/ # #[derive(Default)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106672,"byte_end":106696,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/ # struct SomeStruct(u32);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106697,"byte_end":106726,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106727,"byte_end":106730,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106731,"byte_end":106755,"line_start":55,"line_end":55,"column_start":1,"column_end":25}},{"value":"/ struct MyWrapper(SomeStruct);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106756,"byte_end":106789,"line_start":56,"line_end":56,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106790,"byte_end":106793,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ unsafe impl TransparentWrapper<SomeStruct> for MyWrapper {}","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106794,"byte_end":106857,"line_start":58,"line_end":58,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106858,"byte_end":106861,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ // interpret a reference to &SomeStruct as a &MyWrapper","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106862,"byte_end":106921,"line_start":60,"line_end":60,"column_start":1,"column_end":60}},{"value":"/ let thing = SomeStruct::default();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106922,"byte_end":106960,"line_start":61,"line_end":61,"column_start":1,"column_end":39}},{"value":"/ let inner_ref: &MyWrapper = MyWrapper::wrap_ref(&thing);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":106961,"byte_end":107021,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107022,"byte_end":107025,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Works with &mut too.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107026,"byte_end":107053,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ let mut mut_thing = SomeStruct::default();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107054,"byte_end":107100,"line_start":65,"line_end":65,"column_start":1,"column_end":47}},{"value":"/ let inner_mut: &mut MyWrapper = MyWrapper::wrap_mut(&mut mut_thing);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107101,"byte_end":107173,"line_start":66,"line_end":66,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107174,"byte_end":107177,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # let _ = (inner_ref, inner_mut); // silence warnings","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107178,"byte_end":107235,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107236,"byte_end":107243,"line_start":69,"line_end":69,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107244,"byte_end":107247,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ## Use with dynamically sized types","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107248,"byte_end":107287,"line_start":71,"line_end":71,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107288,"byte_end":107291,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107292,"byte_end":107299,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ use bytemuck::TransparentWrapper;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107300,"byte_end":107337,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107338,"byte_end":107341,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ #[repr(transparent)]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107342,"byte_end":107366,"line_start":76,"line_end":76,"column_start":1,"column_end":25}},{"value":"/ struct Slice<T>([T]);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107367,"byte_end":107392,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107393,"byte_end":107396,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ unsafe impl<T> TransparentWrapper<[T]> for Slice<T> {}","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107397,"byte_end":107455,"line_start":79,"line_end":79,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107456,"byte_end":107459,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ let s = Slice::wrap_ref(&[1u32, 2, 3]);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107460,"byte_end":107503,"line_start":81,"line_end":81,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(&s.0, &[1, 2, 3]);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107504,"byte_end":107537,"line_start":82,"line_end":82,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107538,"byte_end":107541,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [1, 2, 3u8];","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107542,"byte_end":107572,"line_start":84,"line_end":84,"column_start":1,"column_end":31}},{"value":"/ let sm = Slice::wrap_mut(&mut buf);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107573,"byte_end":107612,"line_start":85,"line_end":85,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107613,"byte_end":107620,"line_start":86,"line_end":86,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107743,"byte_end":107747,"line_start":90,"line_end":90,"column_start":6,"column_end":10},"name":"wrap","qualname":"::transparent::TransparentWrapper::wrap","value":"fn wrap(Inner) -> Self where Self: Sized, Inner: Sized","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert the inner type into the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert the inner type into the wrapper type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107676,"byte_end":107725,"line_start":88,"line_end":88,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107728,"byte_end":107737,"line_start":89,"line_end":89,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":108059,"byte_end":108067,"line_start":103,"line_end":103,"column_start":6,"column_end":14},"name":"wrap_ref","qualname":"::transparent::TransparentWrapper::wrap_ref","value":"fn wrap_ref<'_>(&'_ Inner) -> &'_ Self","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert a reference to the inner type into a reference to the wrapper\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the inner type into a reference to the wrapper","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":107956,"byte_end":108029,"line_start":100,"line_end":100,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":108032,"byte_end":108041,"line_start":101,"line_end":101,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":108044,"byte_end":108053,"line_start":102,"line_end":102,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":108757,"byte_end":108765,"line_start":121,"line_end":121,"column_start":6,"column_end":14},"name":"wrap_mut","qualname":"::transparent::TransparentWrapper::wrap_mut","value":"fn wrap_mut<'_>(&'_ mut Inner) -> &'_ mut Self","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the inner type into a mutable reference to\n the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the inner type into a mutable reference to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":108638,"byte_end":108715,"line_start":118,"line_end":118,"column_start":3,"column_end":80}},{"value":"/ the wrapper type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":108718,"byte_end":108739,"line_start":119,"line_end":119,"column_start":3,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":108742,"byte_end":108751,"line_start":120,"line_end":120,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":109429,"byte_end":109439,"line_start":138,"line_end":138,"column_start":6,"column_end":16},"name":"wrap_slice","qualname":"::transparent::TransparentWrapper::wrap_slice","value":"fn wrap_slice<'_>(&'_ [Inner]) -> &'_ [Self] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert a slice to the inner type into a slice to the wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the inner type into a slice to the wrapper type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":109340,"byte_end":109411,"line_start":136,"line_end":136,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":109414,"byte_end":109423,"line_start":137,"line_end":137,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":109983,"byte_end":109997,"line_start":155,"line_end":155,"column_start":6,"column_end":20},"name":"wrap_slice_mut","qualname":"::transparent::TransparentWrapper::wrap_slice_mut","value":"fn wrap_slice_mut<'_>(&'_ mut [Inner]) -> &'_ mut [Self] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the inner type into a mutable slice to the\n wrapper type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the inner type into a mutable slice to the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":109872,"byte_end":109945,"line_start":152,"line_end":152,"column_start":3,"column_end":76}},{"value":"/ wrapper type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":109948,"byte_end":109965,"line_start":153,"line_end":153,"column_start":3,"column_end":20}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":109968,"byte_end":109977,"line_start":154,"line_end":154,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":110503,"byte_end":110507,"line_start":171,"line_end":171,"column_start":6,"column_end":10},"name":"peel","qualname":"::transparent::TransparentWrapper::peel","value":"fn peel(Self) -> Inner where Self: Sized, Inner: Sized","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert the wrapper type into the inner type.\n","sig":null,"attributes":[{"value":"/ Convert the wrapper type into the inner type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":110436,"byte_end":110485,"line_start":169,"line_end":169,"column_start":3,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":110488,"byte_end":110497,"line_start":170,"line_end":170,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":110712,"byte_end":110720,"line_start":182,"line_end":182,"column_start":6,"column_end":14},"name":"peel_ref","qualname":"::transparent::TransparentWrapper::peel_ref","value":"fn peel_ref<'_>(&'_ Self) -> &'_ Inner","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert a reference to the wrapper type into a reference to the inner\n type.\n","sig":null,"attributes":[{"value":"/ Convert a reference to the wrapper type into a reference to the inner","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":110609,"byte_end":110682,"line_start":179,"line_end":179,"column_start":3,"column_end":76}},{"value":"/ type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":110685,"byte_end":110694,"line_start":180,"line_end":180,"column_start":3,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":110697,"byte_end":110706,"line_start":181,"line_end":181,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":111410,"byte_end":111418,"line_start":200,"line_end":200,"column_start":6,"column_end":14},"name":"peel_mut","qualname":"::transparent::TransparentWrapper::peel_mut","value":"fn peel_mut<'_>(&'_ mut Self) -> &'_ mut Inner","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert a mutable reference to the wrapper type into a mutable reference\n to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable reference to the wrapper type into a mutable reference","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":111291,"byte_end":111367,"line_start":197,"line_end":197,"column_start":3,"column_end":79}},{"value":"/ to the inner type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":111370,"byte_end":111392,"line_start":198,"line_end":198,"column_start":3,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":111395,"byte_end":111404,"line_start":199,"line_end":199,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":112082,"byte_end":112092,"line_start":217,"line_end":217,"column_start":6,"column_end":16},"name":"peel_slice","qualname":"::transparent::TransparentWrapper::peel_slice","value":"fn peel_slice<'_>(&'_ [Self]) -> &'_ [Inner] where Self: Sized, Inner: Sized","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert a slice to the wrapped type into a slice to the inner type.\n","sig":null,"attributes":[{"value":"/ Convert a slice to the wrapped type into a slice to the inner type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":111993,"byte_end":112064,"line_start":215,"line_end":215,"column_start":3,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":112067,"byte_end":112076,"line_start":216,"line_end":216,"column_start":3,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":112637,"byte_end":112651,"line_start":234,"line_end":234,"column_start":6,"column_end":20},"name":"peel_slice_mut","qualname":"::transparent::TransparentWrapper::peel_slice_mut","value":"fn peel_slice_mut<'_>(&'_ mut [Self]) -> &'_ mut [Inner] where Self: Sized,\nInner: Sized","parent":{"krate":0,"index":500},"children":[],"decl_id":null,"docs":" Convert a mutable slice to the wrapped type into a mutable slice to the\n inner type.\n","sig":null,"attributes":[{"value":"/ Convert a mutable slice to the wrapped type into a mutable slice to the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":112526,"byte_end":112601,"line_start":231,"line_end":231,"column_start":3,"column_end":78}},{"value":"/ inner type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":112604,"byte_end":112619,"line_start":232,"line_end":232,"column_start":3,"column_end":18}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":112622,"byte_end":112631,"line_start":233,"line_end":233,"column_start":3,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":967},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4346,"byte_end":4386,"line_start":138,"line_end":138,"column_start":3,"column_end":43},"name":"TargetAlignmentGreaterAndInputNotAligned","qualname":"::PodCastError::TargetAlignmentGreaterAndInputNotAligned","value":"PodCastError::TargetAlignmentGreaterAndInputNotAligned","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" You tried to cast a slice to an element type with a higher alignment\n requirement but the slice wasn't aligned.\n","sig":null,"attributes":[{"value":"/ You tried to cast a slice to an element type with a higher alignment","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4223,"byte_end":4295,"line_start":136,"line_end":136,"column_start":3,"column_end":75}},{"value":"/ requirement but the slice wasn't aligned.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4298,"byte_end":4343,"line_start":137,"line_end":137,"column_start":3,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":969},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4572,"byte_end":4596,"line_start":142,"line_end":142,"column_start":3,"column_end":27},"name":"OutputSliceWouldHaveSlop","qualname":"::PodCastError::OutputSliceWouldHaveSlop","value":"PodCastError::OutputSliceWouldHaveSlop","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" If the element size changes then the output slice changes length\n accordingly. If the output slice wouldn't be a whole number of elements\n then the conversion fails.\n","sig":null,"attributes":[{"value":"/ If the element size changes then the output slice changes length","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4390,"byte_end":4458,"line_start":139,"line_end":139,"column_start":3,"column_end":71}},{"value":"/ accordingly. If the output slice wouldn't be a whole number of elements","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4461,"byte_end":4536,"line_start":140,"line_end":140,"column_start":3,"column_end":78}},{"value":"/ then the conversion fails.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4539,"byte_end":4569,"line_start":141,"line_end":141,"column_start":3,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":971},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4817,"byte_end":4829,"line_start":146,"line_end":146,"column_start":3,"column_end":15},"name":"SizeMismatch","qualname":"::PodCastError::SizeMismatch","value":"PodCastError::SizeMismatch","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" When casting a slice you can't convert between ZST elements and non-ZST\n elements. When casting an individual `T`, `&T`, or `&mut T` value the\n source size and destination size must be an exact match.\n","sig":null,"attributes":[{"value":"/ When casting a slice you can't convert between ZST elements and non-ZST","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4600,"byte_end":4675,"line_start":143,"line_end":143,"column_start":3,"column_end":78}},{"value":"/ elements. When casting an individual `T`, `&T`, or `&mut T` value the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4678,"byte_end":4751,"line_start":144,"line_end":144,"column_start":3,"column_end":76}},{"value":"/ source size and destination size must be an exact match.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4754,"byte_end":4814,"line_start":145,"line_end":145,"column_start":3,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":973},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5120,"byte_end":5137,"line_start":153,"line_end":153,"column_start":3,"column_end":20},"name":"AlignmentMismatch","qualname":"::PodCastError::AlignmentMismatch","value":"PodCastError::AlignmentMismatch","parent":{"krate":0,"index":966},"children":[],"decl_id":null,"docs":" For this type of cast the alignments must be exactly the same and they\n were not so now you're sad.","sig":null,"attributes":[{"value":"/ For this type of cast the alignments must be exactly the same and they","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4833,"byte_end":4907,"line_start":147,"line_end":147,"column_start":3,"column_end":77}},{"value":"/ were not so now you're sad.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4910,"byte_end":4941,"line_start":148,"line_end":148,"column_start":3,"column_end":34}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4944,"byte_end":4947,"line_start":149,"line_end":149,"column_start":3,"column_end":6}},{"value":"/ This error is generated **only** by operations that cast allocated types","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4950,"byte_end":5026,"line_start":150,"line_end":150,"column_start":3,"column_end":79}},{"value":"/ (such as `Box` and `Vec`), because in that case the alignment must stay","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5029,"byte_end":5104,"line_start":151,"line_end":151,"column_start":3,"column_end":78}},{"value":"/ exact.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5107,"byte_end":5117,"line_start":152,"line_end":152,"column_start":3,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":966},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4206,"byte_end":4218,"line_start":135,"line_end":135,"column_start":10,"column_end":22},"name":"PodCastError","qualname":"::PodCastError","value":"enum PodCastError {\n    TargetAlignmentGreaterAndInputNotAligned,\n    OutputSliceWouldHaveSlop,\n    SizeMismatch,\n    AlignmentMismatch,\n}","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":969},{"krate":0,"index":971},{"krate":0,"index":973}],"decl_id":null,"docs":" The things that can go wrong when casting between [`Pod`] data forms.\n","sig":null,"attributes":[{"value":"/ The things that can go wrong when casting between [`Pod`] data forms.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":4072,"byte_end":4145,"line_start":133,"line_end":133,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5224,"byte_end":5227,"line_start":157,"line_end":157,"column_start":6,"column_end":9},"name":"fmt","qualname":"<PodCastError as core::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut core::fmt::Formatter)\n-> core::fmt::Result","parent":{"krate":1,"index":10302},"children":[],"decl_id":{"krate":1,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":517},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5612,"byte_end":5620,"line_start":169,"line_end":169,"column_start":8,"column_end":16},"name":"bytes_of","qualname":"::bytes_of","value":"fn bytes_of<T, '_>(&'_ T) -> &'_ [u8] where T: NoUninit","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&T` as `&[u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&T` as `&[u8]`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5403,"byte_end":5437,"line_start":164,"line_end":164,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5438,"byte_end":5441,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5442,"byte_end":5520,"line_start":166,"line_end":166,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5521,"byte_end":5594,"line_start":167,"line_end":167,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5595,"byte_end":5604,"line_start":168,"line_end":168,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5907,"byte_end":5919,"line_start":178,"line_end":178,"column_start":8,"column_end":20},"name":"bytes_of_mut","qualname":"::bytes_of_mut","value":"fn bytes_of_mut<T, '_>(&'_ mut T) -> &'_ mut [u8] where T: NoUninit +\nAnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut T` as `&mut [u8]`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut T` as `&mut [u8]`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5690,"byte_end":5732,"line_start":173,"line_end":173,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5733,"byte_end":5736,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ Any ZST becomes an empty slice, and in that case the pointer value of that","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5737,"byte_end":5815,"line_start":175,"line_end":175,"column_start":1,"column_end":79}},{"value":"/ empty slice might not match the pointer value of the input reference.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5816,"byte_end":5889,"line_start":176,"line_end":176,"column_start":1,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5890,"byte_end":5899,"line_start":177,"line_end":177,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":521},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6147,"byte_end":6157,"line_start":188,"line_end":188,"column_start":8,"column_end":18},"name":"from_bytes","qualname":"::from_bytes","value":"fn from_bytes<T, '_>(&'_ [u8]) -> &'_ T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6017,"byte_end":6051,"line_start":182,"line_end":182,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6052,"byte_end":6055,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6056,"byte_end":6069,"line_start":184,"line_end":184,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6070,"byte_end":6073,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6074,"byte_end":6129,"line_start":186,"line_end":186,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6130,"byte_end":6139,"line_start":187,"line_end":187,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6376,"byte_end":6390,"line_start":198,"line_end":198,"column_start":8,"column_end":22},"name":"from_bytes_mut","qualname":"::from_bytes_mut","value":"fn from_bytes_mut<T, '_>(&'_ mut [u8]) -> &'_ mut T where T: NoUninit +\nAnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6234,"byte_end":6276,"line_start":192,"line_end":192,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6277,"byte_end":6280,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6281,"byte_end":6294,"line_start":194,"line_end":194,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6295,"byte_end":6298,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ This is [`try_from_bytes_mut`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6299,"byte_end":6358,"line_start":196,"line_end":196,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6359,"byte_end":6368,"line_start":197,"line_end":197,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":525},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6636,"byte_end":6658,"line_start":207,"line_end":207,"column_start":8,"column_end":30},"name":"try_pod_read_unaligned","qualname":"::try_pod_read_unaligned","value":"fn try_pod_read_unaligned<T, '_>(&'_ [u8]) -> Result<T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads from the bytes as if they were a `T`.","sig":null,"attributes":[{"value":"/ Reads from the bytes as if they were a `T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6490,"byte_end":6537,"line_start":202,"line_end":202,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6538,"byte_end":6541,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6542,"byte_end":6556,"line_start":204,"line_end":204,"column_start":1,"column_end":15}},{"value":"/ * If the `bytes` length is not equal to `size_of::<T>()`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6557,"byte_end":6618,"line_start":205,"line_end":205,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6619,"byte_end":6628,"line_start":206,"line_end":206,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6925,"byte_end":6943,"line_start":218,"line_end":218,"column_start":8,"column_end":26},"name":"pod_read_unaligned","qualname":"::pod_read_unaligned","value":"fn pod_read_unaligned<T, '_>(&'_ [u8]) -> T where T: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Reads the slice into a `T` value.","sig":null,"attributes":[{"value":"/ Reads the slice into a `T` value.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6781,"byte_end":6818,"line_start":213,"line_end":213,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6819,"byte_end":6822,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6823,"byte_end":6836,"line_start":215,"line_end":215,"column_start":1,"column_end":14}},{"value":"/ * This is like `try_pod_read_unaligned` but will panic on failure.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6837,"byte_end":6907,"line_start":216,"line_end":216,"column_start":1,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":6908,"byte_end":6917,"line_start":217,"line_end":217,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7229,"byte_end":7243,"line_start":229,"line_end":229,"column_start":8,"column_end":22},"name":"try_from_bytes","qualname":"::try_from_bytes","value":"fn try_from_bytes<T, '_>(&'_ [u8]) -> Result<&'_ T, PodCastError> where\nT: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&[u8]` as `&T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&[u8]` as `&T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7035,"byte_end":7069,"line_start":222,"line_end":222,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7070,"byte_end":7073,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7074,"byte_end":7088,"line_start":224,"line_end":224,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7089,"byte_end":7092,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7093,"byte_end":7142,"line_start":226,"line_end":226,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7143,"byte_end":7211,"line_start":227,"line_end":227,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7212,"byte_end":7221,"line_start":228,"line_end":228,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":531},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7548,"byte_end":7566,"line_start":240,"line_end":240,"column_start":8,"column_end":26},"name":"try_from_bytes_mut","qualname":"::try_from_bytes_mut","value":"fn try_from_bytes_mut<T, '_>(&'_ mut [u8]) -> Result<&'_ mut T, PodCastError>\nwhere T: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Re-interprets `&mut [u8]` as `&mut T`.","sig":null,"attributes":[{"value":"/ Re-interprets `&mut [u8]` as `&mut T`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7346,"byte_end":7388,"line_start":233,"line_end":233,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7389,"byte_end":7392,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7393,"byte_end":7407,"line_start":235,"line_end":235,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7408,"byte_end":7411,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ * If the slice isn't aligned for the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7412,"byte_end":7461,"line_start":237,"line_end":237,"column_start":1,"column_end":50}},{"value":"/ * If the slice's length isn’t exactly the size of the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7462,"byte_end":7530,"line_start":238,"line_end":238,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7531,"byte_end":7540,"line_start":239,"line_end":239,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":533},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7836,"byte_end":7840,"line_start":252,"line_end":252,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast","value":"fn cast<A, B>(A) -> B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `T` into `U`","sig":null,"attributes":[{"value":"/ Cast `T` into `U`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7697,"byte_end":7718,"line_start":246,"line_end":246,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7719,"byte_end":7722,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7723,"byte_end":7736,"line_start":248,"line_end":248,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7737,"byte_end":7740,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ * This is like [`try_cast`](try_cast), but will panic on a size mismatch.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7741,"byte_end":7818,"line_start":250,"line_end":250,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7819,"byte_end":7828,"line_start":251,"line_end":251,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":536},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8045,"byte_end":8053,"line_start":262,"line_end":262,"column_start":8,"column_end":16},"name":"cast_mut","qualname":"::cast_mut","value":"fn cast_mut<A, B, '_>(&'_ mut A) -> &'_ mut B where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Cast `&mut T` into `&mut U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7919,"byte_end":7951,"line_start":256,"line_end":256,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7952,"byte_end":7955,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7956,"byte_end":7969,"line_start":258,"line_end":258,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7970,"byte_end":7973,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_mut`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":7974,"byte_end":8027,"line_start":260,"line_end":260,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8028,"byte_end":8037,"line_start":261,"line_end":261,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":539},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8296,"byte_end":8304,"line_start":274,"line_end":274,"column_start":8,"column_end":16},"name":"cast_ref","qualname":"::cast_ref","value":"fn cast_ref<A, B, '_>(&'_ A) -> &'_ B where A: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Cast `&T` into `&U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8178,"byte_end":8202,"line_start":268,"line_end":268,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8203,"byte_end":8206,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8207,"byte_end":8220,"line_start":270,"line_end":270,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8221,"byte_end":8224,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_ref`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8225,"byte_end":8278,"line_start":272,"line_end":272,"column_start":1,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8279,"byte_end":8288,"line_start":273,"line_end":273,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":542},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8513,"byte_end":8523,"line_start":284,"line_end":284,"column_start":8,"column_end":18},"name":"cast_slice","qualname":"::cast_slice","value":"fn cast_slice<A, B, '_>(&'_ [A]) -> &'_ [B] where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&[A]` into `&[B]`.","sig":null,"attributes":[{"value":"/ Cast `&[A]` into `&[B]`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8389,"byte_end":8417,"line_start":278,"line_end":278,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8418,"byte_end":8421,"line_start":279,"line_end":279,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8422,"byte_end":8435,"line_start":280,"line_end":280,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8436,"byte_end":8439,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8440,"byte_end":8495,"line_start":282,"line_end":282,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8496,"byte_end":8505,"line_start":283,"line_end":283,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":545},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8750,"byte_end":8764,"line_start":294,"line_end":294,"column_start":8,"column_end":22},"name":"cast_slice_mut","qualname":"::cast_slice_mut","value":"fn cast_slice_mut<A, B, '_>(&'_ mut [A]) -> &'_ mut [B] where A: NoUninit +\nAnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Cast `&mut [T]` into `&mut [U]`.","sig":null,"attributes":[{"value":"/ Cast `&mut [T]` into `&mut [U]`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8614,"byte_end":8650,"line_start":288,"line_end":288,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8651,"byte_end":8654,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ ## Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8655,"byte_end":8668,"line_start":290,"line_end":290,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8669,"byte_end":8672,"line_start":291,"line_end":291,"column_start":1,"column_end":4}},{"value":"/ This is [`try_cast_slice_mut`] but will panic on error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8673,"byte_end":8732,"line_start":292,"line_end":292,"column_start":1,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8733,"byte_end":8742,"line_start":293,"line_end":293,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":548},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8981,"byte_end":8993,"line_start":305,"line_end":305,"column_start":8,"column_end":20},"name":"pod_align_to","qualname":"::pod_align_to","value":"fn pod_align_to<T, U, '_>(&'_ [T]) -> (&'_ [T], &'_ [U], &'_ [T]) where\nT: NoUninit, U: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8906,"byte_end":8963,"line_start":303,"line_end":303,"column_start":1,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":8964,"byte_end":8973,"line_start":304,"line_end":304,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":551},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9182,"byte_end":9198,"line_start":313,"line_end":313,"column_start":8,"column_end":24},"name":"pod_align_to_mut","qualname":"::pod_align_to_mut","value":"fn pod_align_to_mut<T, U, '_>(&'_ mut [T])\n-> (&'_ mut [T], &'_ mut [U], &'_ mut [T]) where T: NoUninit + AnyBitPattern,\nU: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" As `align_to_mut`, but safe because of the [`Pod`] bound.\n","sig":null,"attributes":[{"value":"/ As `align_to_mut`, but safe because of the [`Pod`] bound.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9103,"byte_end":9164,"line_start":311,"line_end":311,"column_start":1,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9165,"byte_end":9174,"line_start":312,"line_end":312,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9749,"byte_end":9757,"line_start":333,"line_end":333,"column_start":8,"column_end":16},"name":"try_cast","qualname":"::try_cast","value":"fn try_cast<A, B>(A) -> Result<B, PodCastError> where A: NoUninit,\nB: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to cast `T` into `U`.","sig":null,"attributes":[{"value":"/ Try to cast `T` into `U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9362,"byte_end":9391,"line_start":322,"line_end":322,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9392,"byte_end":9395,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ Note that for this particular type of cast, alignment isn't a factor. The","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9396,"byte_end":9473,"line_start":324,"line_end":324,"column_start":1,"column_end":78}},{"value":"/ input value is semantically copied into the function and then returned to a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9474,"byte_end":9553,"line_start":325,"line_end":325,"column_start":1,"column_end":80}},{"value":"/ new memory location which will have whatever the required alignment of the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9554,"byte_end":9632,"line_start":326,"line_end":326,"column_start":1,"column_end":79}},{"value":"/ output type is.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9633,"byte_end":9652,"line_start":327,"line_end":327,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9653,"byte_end":9656,"line_start":328,"line_end":328,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9657,"byte_end":9671,"line_start":329,"line_end":329,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9672,"byte_end":9675,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ * If the types don't have the same size this fails.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9676,"byte_end":9731,"line_start":331,"line_end":331,"column_start":1,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9732,"byte_end":9741,"line_start":332,"line_end":332,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":557},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10060,"byte_end":10072,"line_start":346,"line_end":346,"column_start":8,"column_end":20},"name":"try_cast_ref","qualname":"::try_cast_ref","value":"fn try_cast_ref<A, B, '_>(&'_ A) -> Result<&'_ B, PodCastError> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&T` into `&U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&T` into `&U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9867,"byte_end":9903,"line_start":339,"line_end":339,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9904,"byte_end":9907,"line_start":340,"line_end":340,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9908,"byte_end":9922,"line_start":341,"line_end":341,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9923,"byte_end":9926,"line_start":342,"line_end":342,"column_start":1,"column_end":4}},{"value":"/ * If the reference isn't aligned in the new type","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9927,"byte_end":9979,"line_start":343,"line_end":343,"column_start":1,"column_end":53}},{"value":"/ * If the source type and target type aren't the same size.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":9980,"byte_end":10042,"line_start":344,"line_end":344,"column_start":1,"column_end":63}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10043,"byte_end":10052,"line_start":345,"line_end":345,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":560},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10290,"byte_end":10302,"line_start":356,"line_end":356,"column_start":8,"column_end":20},"name":"try_cast_mut","qualname":"::try_cast_mut","value":"fn try_cast_mut<A, B, '_>(&'_ mut A) -> Result<&'_ mut B, PodCastError> where\nA: NoUninit + AnyBitPattern, B: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert a `&mut T` into `&mut U`.","sig":null,"attributes":[{"value":"/ Try to convert a `&mut T` into `&mut U`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10188,"byte_end":10232,"line_start":352,"line_end":352,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10233,"byte_end":10236,"line_start":353,"line_end":353,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_ref`], but `mut`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10237,"byte_end":10272,"line_start":354,"line_end":354,"column_start":1,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10273,"byte_end":10282,"line_start":355,"line_end":355,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":563},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11218,"byte_end":11232,"line_start":381,"line_end":381,"column_start":8,"column_end":22},"name":"try_cast_slice","qualname":"::try_cast_slice","value":"fn try_cast_slice<A, B, '_>(&'_ [A]) -> Result<&'_ [B], PodCastError> where\nA: NoUninit, B: AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&[A]` into `&[B]` (possibly with a change in length).","sig":null,"attributes":[{"value":"/ Try to convert `&[A]` into `&[B]` (possibly with a change in length).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10460,"byte_end":10533,"line_start":365,"line_end":365,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10534,"byte_end":10537,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ * `input.as_ptr() as usize == output.as_ptr() as usize`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10538,"byte_end":10597,"line_start":367,"line_end":367,"column_start":1,"column_end":60}},{"value":"/ * `input.len() * size_of::<A>() == output.len() * size_of::<B>()`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10598,"byte_end":10667,"line_start":368,"line_end":368,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10668,"byte_end":10671,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"/ ## Failure","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10672,"byte_end":10686,"line_start":370,"line_end":370,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10687,"byte_end":10690,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ * If the target type has a greater alignment requirement and the input slice","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10691,"byte_end":10771,"line_start":372,"line_end":372,"column_start":1,"column_end":81}},{"value":"/   isn't aligned.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10772,"byte_end":10792,"line_start":373,"line_end":373,"column_start":1,"column_end":21}},{"value":"/ * If the target element type is a different size from the current element","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10793,"byte_end":10870,"line_start":374,"line_end":374,"column_start":1,"column_end":78}},{"value":"/   type, and the output slice wouldn't be a whole number of elements when","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10871,"byte_end":10947,"line_start":375,"line_end":375,"column_start":1,"column_end":77}},{"value":"/   accounting for the size change (eg: 3 `u16` values is 1.5 `u32` values, so","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":10948,"byte_end":11028,"line_start":376,"line_end":376,"column_start":1,"column_end":81}},{"value":"/   that's a failure).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11029,"byte_end":11053,"line_start":377,"line_end":377,"column_start":1,"column_end":25}},{"value":"/ * Similarly, you can't convert between a [ZST](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11054,"byte_end":11179,"line_start":378,"line_end":378,"column_start":1,"column_end":126}},{"value":"/   and a non-ZST.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11180,"byte_end":11200,"line_start":379,"line_end":379,"column_start":1,"column_end":21}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11201,"byte_end":11210,"line_start":380,"line_end":380,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":566},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11500,"byte_end":11518,"line_start":392,"line_end":392,"column_start":8,"column_end":26},"name":"try_cast_slice_mut","qualname":"::try_cast_slice_mut","value":"fn try_cast_slice_mut<A, B, '_>(&'_ mut [A])\n-> Result<&'_ mut [B], PodCastError> where A: NoUninit + AnyBitPattern,\nB: NoUninit + AnyBitPattern","parent":null,"children":[],"decl_id":null,"docs":" Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in\n length).","sig":null,"attributes":[{"value":"/ Try to convert `&mut [A]` into `&mut [B]` (possibly with a change in","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11354,"byte_end":11426,"line_start":387,"line_end":387,"column_start":1,"column_end":73}},{"value":"/ length).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11427,"byte_end":11439,"line_start":388,"line_end":388,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11440,"byte_end":11443,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ As [`try_cast_slice`], but `&mut`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11444,"byte_end":11482,"line_start":390,"line_end":390,"column_start":1,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":11483,"byte_end":11492,"line_start":391,"line_end":391,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":38117,"byte_end":38118,"line_start":691,"line_end":691,"column_start":74,"column_end":75},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41536,"byte_end":41537,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":47081,"byte_end":47082,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49451,"byte_end":49467,"line_start":227,"line_end":227,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49693,"byte_end":49709,"line_start":235,"line_end":235,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":72311,"byte_end":72319,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":72375,"byte_end":72382,"line_start":54,"line_end":54,"column_start":50,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":72907,"byte_end":72918,"line_start":67,"line_end":67,"column_start":39,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":72950,"byte_end":72963,"line_start":68,"line_end":68,"column_start":26,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":73005,"byte_end":73017,"line_start":69,"line_end":69,"column_start":39,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":73074,"byte_end":73084,"line_start":70,"line_end":70,"column_start":51,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":73141,"byte_end":73145,"line_start":71,"line_end":71,"column_start":51,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":78935,"byte_end":78941,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79240,"byte_end":79249,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79286,"byte_end":79296,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79333,"byte_end":79343,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79380,"byte_end":79390,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79427,"byte_end":79438,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79475,"byte_end":79487,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79524,"byte_end":79533,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79570,"byte_end":79580,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79617,"byte_end":79627,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79664,"byte_end":79674,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79711,"byte_end":79722,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79759,"byte_end":79771,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79892,"byte_end":79899,"line_start":29,"line_end":29,"column_start":45,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":80114,"byte_end":80117,"line_start":34,"line_end":34,"column_start":59,"column_end":62},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82539,"byte_end":82547,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82847,"byte_end":82858,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82885,"byte_end":82898,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82930,"byte_end":82942,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86375,"byte_end":86381,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86794,"byte_end":86803,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86835,"byte_end":86845,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86877,"byte_end":86887,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86919,"byte_end":86929,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86961,"byte_end":86972,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87004,"byte_end":87016,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87048,"byte_end":87057,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87089,"byte_end":87099,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87131,"byte_end":87141,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87173,"byte_end":87183,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87215,"byte_end":87226,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87258,"byte_end":87270,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90645,"byte_end":90646,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90744,"byte_end":90753,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90782,"byte_end":90791,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90820,"byte_end":90830,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90859,"byte_end":90869,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90898,"byte_end":90908,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90937,"byte_end":90947,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90976,"byte_end":90986,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91015,"byte_end":91025,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91054,"byte_end":91065,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91094,"byte_end":91105,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91134,"byte_end":91146,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91175,"byte_end":91187,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":113143,"byte_end":113151,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5204,"byte_end":5216,"line_start":156,"line_end":156,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3391,"byte_end":3401,"line_start":93,"line_end":93,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":16}},{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":3520,"byte_end":3527,"line_start":100,"line_end":100,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":132}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":31368,"byte_end":31386,"line_start":509,"line_end":509,"column_start":3,"column_end":21},"kind":"SuperTrait","from":{"krate":0,"index":500},"to":{"krate":0,"index":106}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/allocation.rs","byte_start":38117,"byte_end":38118,"line_start":691,"line_end":691,"column_start":74,"column_end":75},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":118},"to":{"krate":0,"index":106}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41459,"byte_end":41467,"line_start":52,"line_end":52,"column_start":3,"column_end":11},"kind":"SuperTrait","from":{"krate":0,"index":269},"to":{"krate":0,"index":128}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41470,"byte_end":41475,"line_start":52,"line_end":52,"column_start":14,"column_end":19},"kind":"SuperTrait","from":{"krate":1,"index":3268},"to":{"krate":0,"index":128}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41478,"byte_end":41482,"line_start":52,"line_end":52,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":128}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/anybitpattern.rs","byte_start":41536,"byte_end":41537,"line_start":56,"line_end":56,"column_start":39,"column_end":40},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":130},"to":{"krate":0,"index":128}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":46590,"byte_end":46594,"line_start":130,"line_end":130,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":47081,"byte_end":47082,"line_start":143,"line_end":143,"column_start":53,"column_end":54},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":151},"to":{"krate":0,"index":147}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49451,"byte_end":49467,"line_start":227,"line_end":227,"column_start":29,"column_end":45},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":617},"to":{"krate":1,"index":10302}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/checked.rs","byte_start":49693,"byte_end":49709,"line_start":235,"line_end":235,"column_start":36,"column_end":52},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":617},"to":{"krate":1,"index":3169}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":71386,"byte_end":71391,"line_start":25,"line_end":25,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3268},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":72311,"byte_end":72319,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"kind":{"Impl":{"id":35}},"from":{"krate":1,"index":21435},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":72375,"byte_end":72382,"line_start":54,"line_end":54,"column_start":50,"column_end":57},"kind":{"Impl":{"id":36}},"from":{"krate":1,"index":31030},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":72907,"byte_end":72918,"line_start":67,"line_end":67,"column_start":39,"column_end":50},"kind":{"Impl":{"id":37}},"from":{"krate":1,"index":3281},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":72950,"byte_end":72963,"line_start":68,"line_end":68,"column_start":26,"column_end":39},"kind":{"Impl":{"id":38}},"from":{"krate":1,"index":32250},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":73005,"byte_end":73017,"line_start":69,"line_end":69,"column_start":39,"column_end":51},"kind":{"Impl":{"id":39}},"from":{"krate":1,"index":25680},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":73074,"byte_end":73084,"line_start":70,"line_end":70,"column_start":51,"column_end":61},"kind":{"Impl":{"id":40}},"from":{"krate":1,"index":5179},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable.rs","byte_start":73141,"byte_end":73145,"line_start":71,"line_end":71,"column_start":51,"column_end":55},"kind":{"Impl":{"id":41}},"from":{"krate":1,"index":4959},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":78935,"byte_end":78941,"line_start":4,"line_end":4,"column_start":47,"column_end":53},"kind":{"Impl":{"id":42}},"from":{"krate":1,"index":40864},"to":{"krate":0,"index":269}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79197,"byte_end":79202,"line_start":13,"line_end":13,"column_start":36,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":3268},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79240,"byte_end":79249,"line_start":15,"line_end":15,"column_start":34,"column_end":43},"kind":{"Impl":{"id":43}},"from":{"krate":1,"index":18084},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79286,"byte_end":79296,"line_start":16,"line_end":16,"column_start":34,"column_end":44},"kind":{"Impl":{"id":44}},"from":{"krate":1,"index":18118},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79333,"byte_end":79343,"line_start":17,"line_end":17,"column_start":34,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":18152},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79380,"byte_end":79390,"line_start":18,"line_end":18,"column_start":34,"column_end":44},"kind":{"Impl":{"id":46}},"from":{"krate":1,"index":18186},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79427,"byte_end":79438,"line_start":19,"line_end":19,"column_start":34,"column_end":45},"kind":{"Impl":{"id":47}},"from":{"krate":1,"index":18220},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79475,"byte_end":79487,"line_start":20,"line_end":20,"column_start":34,"column_end":46},"kind":{"Impl":{"id":48}},"from":{"krate":1,"index":18254},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79524,"byte_end":79533,"line_start":21,"line_end":21,"column_start":34,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":1,"index":17880},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79570,"byte_end":79580,"line_start":22,"line_end":22,"column_start":34,"column_end":44},"kind":{"Impl":{"id":50}},"from":{"krate":1,"index":17914},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79617,"byte_end":79627,"line_start":23,"line_end":23,"column_start":34,"column_end":44},"kind":{"Impl":{"id":51}},"from":{"krate":1,"index":17948},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79664,"byte_end":79674,"line_start":24,"line_end":24,"column_start":34,"column_end":44},"kind":{"Impl":{"id":52}},"from":{"krate":1,"index":17982},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79711,"byte_end":79722,"line_start":25,"line_end":25,"column_start":34,"column_end":45},"kind":{"Impl":{"id":53}},"from":{"krate":1,"index":18016},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79759,"byte_end":79771,"line_start":26,"line_end":26,"column_start":34,"column_end":46},"kind":{"Impl":{"id":54}},"from":{"krate":1,"index":18050},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":79892,"byte_end":79899,"line_start":29,"line_end":29,"column_start":45,"column_end":52},"kind":{"Impl":{"id":55}},"from":{"krate":1,"index":2391},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/zeroable_in_option.rs","byte_start":80114,"byte_end":80117,"line_start":34,"line_end":34,"column_start":59,"column_end":62},"kind":{"Impl":{"id":56}},"from":{"krate":4,"index":432},"to":{"krate":0,"index":360}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82073,"byte_end":82081,"line_start":37,"line_end":37,"column_start":23,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":269},"to":{"krate":0,"index":384}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82084,"byte_end":82088,"line_start":37,"line_end":37,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":384}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82539,"byte_end":82547,"line_start":54,"line_end":54,"column_start":29,"column_end":37},"kind":{"Impl":{"id":71}},"from":{"krate":1,"index":21435},"to":{"krate":0,"index":384}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82847,"byte_end":82858,"line_start":63,"line_end":63,"column_start":29,"column_end":40},"kind":{"Impl":{"id":72}},"from":{"krate":1,"index":3281},"to":{"krate":0,"index":384}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82885,"byte_end":82898,"line_start":64,"line_end":64,"column_start":21,"column_end":34},"kind":{"Impl":{"id":73}},"from":{"krate":1,"index":32250},"to":{"krate":0,"index":384}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod.rs","byte_start":82930,"byte_end":82942,"line_start":65,"line_end":65,"column_start":29,"column_end":41},"kind":{"Impl":{"id":74}},"from":{"krate":1,"index":25680},"to":{"krate":0,"index":384}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86375,"byte_end":86381,"line_start":4,"line_end":4,"column_start":37,"column_end":43},"kind":{"Impl":{"id":75}},"from":{"krate":1,"index":40864},"to":{"krate":0,"index":384}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86728,"byte_end":86744,"line_start":14,"line_end":14,"column_start":31,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":360},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86747,"byte_end":86751,"line_start":14,"line_end":14,"column_start":50,"column_end":54},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86794,"byte_end":86803,"line_start":16,"line_end":16,"column_start":29,"column_end":38},"kind":{"Impl":{"id":76}},"from":{"krate":1,"index":18084},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86835,"byte_end":86845,"line_start":17,"line_end":17,"column_start":29,"column_end":39},"kind":{"Impl":{"id":77}},"from":{"krate":1,"index":18118},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86877,"byte_end":86887,"line_start":18,"line_end":18,"column_start":29,"column_end":39},"kind":{"Impl":{"id":78}},"from":{"krate":1,"index":18152},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86919,"byte_end":86929,"line_start":19,"line_end":19,"column_start":29,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":1,"index":18186},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":86961,"byte_end":86972,"line_start":20,"line_end":20,"column_start":29,"column_end":40},"kind":{"Impl":{"id":80}},"from":{"krate":1,"index":18220},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87004,"byte_end":87016,"line_start":21,"line_end":21,"column_start":29,"column_end":41},"kind":{"Impl":{"id":81}},"from":{"krate":1,"index":18254},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87048,"byte_end":87057,"line_start":22,"line_end":22,"column_start":29,"column_end":38},"kind":{"Impl":{"id":82}},"from":{"krate":1,"index":17880},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87089,"byte_end":87099,"line_start":23,"line_end":23,"column_start":29,"column_end":39},"kind":{"Impl":{"id":83}},"from":{"krate":1,"index":17914},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87131,"byte_end":87141,"line_start":24,"line_end":24,"column_start":29,"column_end":39},"kind":{"Impl":{"id":84}},"from":{"krate":1,"index":17948},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87173,"byte_end":87183,"line_start":25,"line_end":25,"column_start":29,"column_end":39},"kind":{"Impl":{"id":85}},"from":{"krate":1,"index":17982},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87215,"byte_end":87226,"line_start":26,"line_end":26,"column_start":29,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":1,"index":18016},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/pod_in_option.rs","byte_start":87258,"byte_end":87270,"line_start":27,"line_end":27,"column_start":29,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":1,"index":18050},"to":{"krate":0,"index":412}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90585,"byte_end":90590,"line_start":61,"line_end":61,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3268},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90593,"byte_end":90597,"line_start":61,"line_end":61,"column_start":36,"column_end":40},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90645,"byte_end":90646,"line_start":63,"line_end":63,"column_start":34,"column_end":35},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":469},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90744,"byte_end":90753,"line_start":69,"line_end":69,"column_start":26,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":1,"index":17880},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90782,"byte_end":90791,"line_start":70,"line_end":70,"column_start":26,"column_end":35},"kind":{"Impl":{"id":92}},"from":{"krate":1,"index":18084},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90820,"byte_end":90830,"line_start":71,"line_end":71,"column_start":26,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":1,"index":17914},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90859,"byte_end":90869,"line_start":72,"line_end":72,"column_start":26,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":1,"index":18118},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90898,"byte_end":90908,"line_start":73,"line_end":73,"column_start":26,"column_end":36},"kind":{"Impl":{"id":95}},"from":{"krate":1,"index":17948},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90937,"byte_end":90947,"line_start":74,"line_end":74,"column_start":26,"column_end":36},"kind":{"Impl":{"id":96}},"from":{"krate":1,"index":18152},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":90976,"byte_end":90986,"line_start":75,"line_end":75,"column_start":26,"column_end":36},"kind":{"Impl":{"id":97}},"from":{"krate":1,"index":17982},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91015,"byte_end":91025,"line_start":76,"line_end":76,"column_start":26,"column_end":36},"kind":{"Impl":{"id":98}},"from":{"krate":1,"index":18186},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91054,"byte_end":91065,"line_start":77,"line_end":77,"column_start":26,"column_end":37},"kind":{"Impl":{"id":99}},"from":{"krate":1,"index":18016},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91094,"byte_end":91105,"line_start":78,"line_end":78,"column_start":26,"column_end":37},"kind":{"Impl":{"id":100}},"from":{"krate":1,"index":18220},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91134,"byte_end":91146,"line_start":79,"line_end":79,"column_start":26,"column_end":38},"kind":{"Impl":{"id":101}},"from":{"krate":1,"index":18050},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/no_uninit.rs","byte_start":91175,"byte_end":91187,"line_start":80,"line_end":80,"column_start":26,"column_end":38},"kind":{"Impl":{"id":102}},"from":{"krate":1,"index":18254},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/contiguous.rs","byte_start":94267,"byte_end":94271,"line_start":78,"line_end":78,"column_start":30,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3273},"to":{"krate":0,"index":487}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/transparent.rs","byte_start":113143,"byte_end":113151,"line_start":249,"line_end":249,"column_start":53,"column_end":61},"kind":{"Impl":{"id":122}},"from":{"krate":1,"index":21435},"to":{"krate":0,"index":500}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/bytemuck-1.13.0/src/lib.rs","byte_start":5204,"byte_end":5216,"line_start":156,"line_end":156,"column_start":29,"column_end":41},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":966},"to":{"krate":1,"index":10302}}]}