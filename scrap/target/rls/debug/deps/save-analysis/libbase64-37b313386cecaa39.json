{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0","program":"/Users/itayeshkar/.rustup/toolchains/stable-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","base64","--edition=2021","/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=37b313386cecaa39","-C","extra-filename=-37b313386cecaa39","--out-dir","/Users/itayeshkar/Documents/GitHub/project/scrap/target/rls/debug/deps","-L","dependency=/Users/itayeshkar/Documents/GitHub/project/scrap/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/itayeshkar/.rustup/toolchains/stable-aarch64-apple-darwin"],"output":"/Users/itayeshkar/Documents/GitHub/project/scrap/target/rls/debug/deps/libbase64-37b313386cecaa39.rmeta"},"prelude":{"crate_id":{"name":"base64","disambiguator":[3840190102876181564,0]},"crate_root":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src","external_crates":[{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16128539464339909492,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/chunked_encoder.rs","num":2,"id":{"name":"core","disambiguator":[5119190964148522055,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[10836880961308110442,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9122960886372739080,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16262469955255852816,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[6458319553461162962,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12001007181761242293,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[17631836945948346775,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[14397519445266417684,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8668729914222175237,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[6081650140881955662,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[5498968616666872476,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[2537156866219993108,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[16178185567501436822,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[3784531562979233881,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[17755498883195052578,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[11111166150786070161,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[518337477295170700,0]}},{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[6962753159787162907,0]}}],"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":0,"byte_end":6881,"line_start":1,"line_end":179,"column_start":1,"column_end":27}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":120},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/mod.rs","byte_start":16881,"byte_end":16894,"line_start":3,"line_end":3,"column_start":24,"column_end":37},"alias_span":null,"name":"DecoderReader","value":"","parent":{"krate":0,"index":98}},{"kind":"Use","ref_id":{"krate":0,"index":188},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/mod.rs","byte_start":28882,"byte_end":28895,"line_start":6,"line_end":6,"column_start":14,"column_end":27},"alias_span":null,"name":"EncoderWriter","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/mod.rs","byte_start":28925,"byte_end":28944,"line_start":7,"line_end":7,"column_start":29,"column_end":48},"alias_span":null,"name":"EncoderStringWriter","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/mod.rs","byte_start":28946,"byte_end":28957,"line_start":7,"line_end":7,"column_start":50,"column_end":61},"alias_span":null,"name":"StrConsumer","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":365},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":67966,"byte_end":67988,"line_start":12,"line_end":12,"column_start":17,"column_end":39},"alias_span":null,"name":"GeneralPurposeEstimate","value":"","parent":{"krate":0,"index":320}},{"kind":"Use","ref_id":{"krate":0,"index":401},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52101,"byte_end":52115,"line_start":22,"line_end":22,"column_start":27,"column_end":41},"alias_span":null,"name":"GeneralPurpose","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":650},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52117,"byte_end":52137,"line_start":22,"line_end":22,"column_start":43,"column_end":63},"alias_span":null,"name":"GeneralPurposeConfig","value":"","parent":{"krate":0,"index":289}},{"kind":"Use","ref_id":{"krate":0,"index":448},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6253,"byte_end":6259,"line_start":156,"line_end":156,"column_start":17,"column_end":23},"alias_span":null,"name":"Engine","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":527},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6392,"byte_end":6398,"line_start":163,"line_end":163,"column_start":25,"column_end":31},"alias_span":null,"name":"encode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":529},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6400,"byte_end":6413,"line_start":163,"line_end":163,"column_start":33,"column_end":46},"alias_span":null,"name":"encode_engine","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":532},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6415,"byte_end":6435,"line_start":163,"line_end":163,"column_start":48,"column_end":68},"alias_span":null,"name":"encode_engine_string","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":535},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6483,"byte_end":6502,"line_start":165,"line_end":165,"column_start":25,"column_end":44},"alias_span":null,"name":"encode_engine_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":540},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6504,"byte_end":6515,"line_start":165,"line_end":165,"column_start":46,"column_end":57},"alias_span":null,"name":"encoded_len","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":713},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6517,"byte_end":6533,"line_start":165,"line_end":165,"column_start":59,"column_end":75},"alias_span":null,"name":"EncodeSliceError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":598},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6648,"byte_end":6654,"line_start":170,"line_end":170,"column_start":25,"column_end":31},"alias_span":null,"name":"decode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":600},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6656,"byte_end":6669,"line_start":170,"line_end":170,"column_start":33,"column_end":46},"alias_span":null,"name":"decode_engine","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":603},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6671,"byte_end":6688,"line_start":170,"line_end":170,"column_start":48,"column_end":65},"alias_span":null,"name":"decode_engine_vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":606},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6736,"byte_end":6755,"line_start":172,"line_end":172,"column_start":25,"column_end":44},"alias_span":null,"name":"decode_engine_slice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":609},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6757,"byte_end":6777,"line_start":172,"line_end":172,"column_start":46,"column_end":66},"alias_span":null,"name":"decoded_len_estimate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":726},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6779,"byte_end":6790,"line_start":172,"line_end":172,"column_start":68,"column_end":79},"alias_span":null,"name":"DecodeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":750},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6792,"byte_end":6808,"line_start":172,"line_end":172,"column_start":81,"column_end":97},"alias_span":null,"name":"DecodeSliceError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":448},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":138034,"byte_end":138040,"line_start":14,"line_end":14,"column_start":24,"column_end":30},"alias_span":null,"name":"Engine","value":"","parent":{"krate":0,"index":633}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":138083,"byte_end":138091,"line_start":16,"line_end":16,"column_start":41,"column_end":49},"alias_span":null,"name":"BASE64_STANDARD","value":"","parent":{"krate":0,"index":633}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":138152,"byte_end":138167,"line_start":17,"line_end":17,"column_start":41,"column_end":56},"alias_span":null,"name":"BASE64_STANDARD_NO_PAD","value":"","parent":{"krate":0,"index":633}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":138235,"byte_end":138243,"line_start":18,"line_end":18,"column_start":41,"column_end":49},"alias_span":null,"name":"BASE64_URL_SAFE","value":"","parent":{"krate":0,"index":633}},{"kind":"Use","ref_id":{"krate":0,"index":438},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":138304,"byte_end":138319,"line_start":19,"line_end":19,"column_start":41,"column_end":56},"alias_span":null,"name":"BASE64_URL_SAFE_NO_PAD","value":"","parent":{"krate":0,"index":633}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":0,"byte_end":6881,"line_start":1,"line_end":179,"column_start":1,"column_end":27},"name":"","qualname":"::","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":52},{"krate":0,"index":98},{"krate":0,"index":163},{"krate":0,"index":289},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":504},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":624},{"krate":0,"index":627},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":649}],"decl_id":null,"docs":" # Getting started","sig":null,"attributes":[{"value":"/ # Getting started","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":0,"byte_end":21,"line_start":1,"line_end":1,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":22,"byte_end":25,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ 1. Perhaps one of the preconfigured engines in [engine::general_purpose] will suit, e.g.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":26,"byte_end":118,"line_start":3,"line_end":3,"column_start":1,"column_end":93}},{"value":"/ [engine::general_purpose::STANDARD_NO_PAD].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":119,"byte_end":166,"line_start":4,"line_end":4,"column_start":1,"column_end":48}},{"value":"/     - These are re-exported in [prelude] with a `BASE64_` prefix for those who prefer to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":167,"byte_end":259,"line_start":5,"line_end":5,"column_start":1,"column_end":93}},{"value":"/       `use base64::prelude::*` or equivalent, e.g. [prelude::BASE64_STANDARD_NO_PAD]","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":260,"byte_end":348,"line_start":6,"line_end":6,"column_start":1,"column_end":89}},{"value":"/ 1. If not, choose which alphabet you want. Most usage will want [alphabet::STANDARD] or [alphabet::URL_SAFE].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":349,"byte_end":462,"line_start":7,"line_end":7,"column_start":1,"column_end":114}},{"value":"/ 1. Choose which [Engine] implementation you want. For the moment there is only one: [engine::GeneralPurpose].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":463,"byte_end":576,"line_start":8,"line_end":8,"column_start":1,"column_end":114}},{"value":"/ 1. Configure the engine appropriately using the engine's `Config` type.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":577,"byte_end":652,"line_start":9,"line_end":9,"column_start":1,"column_end":76}},{"value":"/     - This is where you'll select whether to add padding (when encoding) or expect it (when","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":653,"byte_end":748,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/     decoding). If given the choice, prefer no padding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":749,"byte_end":807,"line_start":11,"line_end":11,"column_start":1,"column_end":59}},{"value":"/ 1. Build the engine using the selected alphabet and config.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":808,"byte_end":871,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":872,"byte_end":875,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ For more detail, see below.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":876,"byte_end":907,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":908,"byte_end":911,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ## Alphabets","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":912,"byte_end":928,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":929,"byte_end":932,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ An [alphabet::Alphabet] defines what ASCII symbols are used to encode to or decode from.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":933,"byte_end":1025,"line_start":18,"line_end":18,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1026,"byte_end":1029,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Constants in [alphabet] like [alphabet::STANDARD] or [alphabet::URL_SAFE] provide commonly used","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1030,"byte_end":1129,"line_start":20,"line_end":20,"column_start":1,"column_end":100}},{"value":"/ alphabets, but you can also build your own custom [alphabet::Alphabet] if needed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1130,"byte_end":1215,"line_start":21,"line_end":21,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1216,"byte_end":1219,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Engines","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1220,"byte_end":1234,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1235,"byte_end":1238,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Once you have an `Alphabet`, you can pick which `Engine` you want. A few parts of the public","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1239,"byte_end":1335,"line_start":25,"line_end":25,"column_start":1,"column_end":97}},{"value":"/ API provide a default, but otherwise the user must provide an `Engine` to use.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1336,"byte_end":1418,"line_start":26,"line_end":26,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1419,"byte_end":1422,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ See [Engine] for more.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1423,"byte_end":1449,"line_start":28,"line_end":28,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1450,"byte_end":1453,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ## Config","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1454,"byte_end":1467,"line_start":30,"line_end":30,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1468,"byte_end":1471,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ In addition to an `Alphabet`, constructing an `Engine` also requires an [engine::Config]. Each","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1472,"byte_end":1570,"line_start":32,"line_end":32,"column_start":1,"column_end":99}},{"value":"/ `Engine` has a corresponding `Config` implementation since different `Engine`s may offer different","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1571,"byte_end":1673,"line_start":33,"line_end":33,"column_start":1,"column_end":103}},{"value":"/ levels of configurability.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1674,"byte_end":1704,"line_start":34,"line_end":34,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1705,"byte_end":1708,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Encoding","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1709,"byte_end":1723,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1724,"byte_end":1727,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Several different encoding methods on [Engine] are available to you depending on your desire for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1728,"byte_end":1828,"line_start":38,"line_end":38,"column_start":1,"column_end":101}},{"value":"/ convenience vs performance.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1829,"byte_end":1860,"line_start":39,"line_end":39,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1861,"byte_end":1864,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ | Method                   | Output                       | Allocates                      |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1865,"byte_end":1961,"line_start":41,"line_end":41,"column_start":1,"column_end":97}},{"value":"/ | ------------------------ | ---------------------------- | ------------------------------ |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":1962,"byte_end":2058,"line_start":42,"line_end":42,"column_start":1,"column_end":97}},{"value":"/ | [Engine::encode]         | Returns a new `String`       | Always                         |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2059,"byte_end":2155,"line_start":43,"line_end":43,"column_start":1,"column_end":97}},{"value":"/ | [Engine::encode_string]  | Appends to provided `String` | Only if `String` needs to grow |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2156,"byte_end":2252,"line_start":44,"line_end":44,"column_start":1,"column_end":97}},{"value":"/ | [Engine::encode_slice]   | Writes to provided `&[u8]`   | Never - fastest                |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2253,"byte_end":2349,"line_start":45,"line_end":45,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2350,"byte_end":2353,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ All of the encoding methods will pad as per the engine's config.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2354,"byte_end":2422,"line_start":47,"line_end":47,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2423,"byte_end":2426,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ # Decoding","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2427,"byte_end":2441,"line_start":49,"line_end":49,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2442,"byte_end":2445,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ Just as for encoding, there are different decoding methods available.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2446,"byte_end":2519,"line_start":51,"line_end":51,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2520,"byte_end":2523,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ | Method                   | Output                        | Allocates                      |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2524,"byte_end":2621,"line_start":53,"line_end":53,"column_start":1,"column_end":98}},{"value":"/ | ------------------------ | ----------------------------- | ------------------------------ |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2622,"byte_end":2719,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/ | [Engine::decode]         | Returns a new `Vec<u8>`       | Always                         |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2720,"byte_end":2817,"line_start":55,"line_end":55,"column_start":1,"column_end":98}},{"value":"/ | [Engine::decode_vec]     | Appends to provided `Vec<u8>` | Only if `Vec` needs to grow    |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2818,"byte_end":2915,"line_start":56,"line_end":56,"column_start":1,"column_end":98}},{"value":"/ | [Engine::decode_slice]   | Writes to provided `&[u8]`    | Never - fastest                |","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":2916,"byte_end":3013,"line_start":57,"line_end":57,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3014,"byte_end":3017,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Unlike encoding, where all possible input is valid, decoding can fail (see [DecodeError]).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3018,"byte_end":3112,"line_start":59,"line_end":59,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3113,"byte_end":3116,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ Input can be invalid because it has invalid characters or invalid padding. The nature of how","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3117,"byte_end":3213,"line_start":61,"line_end":61,"column_start":1,"column_end":97}},{"value":"/ padding is checked depends on the engine's config.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3214,"byte_end":3268,"line_start":62,"line_end":62,"column_start":1,"column_end":55}},{"value":"/ Whitespace in the input is invalid, just like any other non-base64 byte.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3269,"byte_end":3345,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3346,"byte_end":3349,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # `Read` and `Write`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3350,"byte_end":3374,"line_start":65,"line_end":65,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3375,"byte_end":3378,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ To decode a [std::io::Read] of b64 bytes, wrap a reader (file, network socket, etc) with","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3379,"byte_end":3471,"line_start":67,"line_end":67,"column_start":1,"column_end":93}},{"value":"/ [read::DecoderReader].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3472,"byte_end":3498,"line_start":68,"line_end":68,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3499,"byte_end":3502,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ To write raw bytes and have them b64 encoded on the fly, wrap a [std::io::Write] with","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3503,"byte_end":3592,"line_start":70,"line_end":70,"column_start":1,"column_end":90}},{"value":"/ [write::EncoderWriter].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3593,"byte_end":3620,"line_start":71,"line_end":71,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3621,"byte_end":3624,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ There is some performance overhead (15% or so) because of the necessary buffer shuffling --","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3625,"byte_end":3720,"line_start":73,"line_end":73,"column_start":1,"column_end":96}},{"value":"/ still fast enough that almost nobody cares. Also, these implementations do not heap allocate.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3721,"byte_end":3818,"line_start":74,"line_end":74,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3819,"byte_end":3822,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ # `Display`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3823,"byte_end":3838,"line_start":76,"line_end":76,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3839,"byte_end":3842,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ See [display] for how to transparently base64 data via a `Display` implementation.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3843,"byte_end":3929,"line_start":78,"line_end":78,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3930,"byte_end":3933,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3934,"byte_end":3948,"line_start":80,"line_end":80,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3949,"byte_end":3952,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ ## Using predefined engines","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3953,"byte_end":3984,"line_start":82,"line_end":82,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3985,"byte_end":3988,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3989,"byte_end":3996,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ use base64::{Engine as _, engine::general_purpose};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":3997,"byte_end":4052,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4053,"byte_end":4056,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let orig = b\"data\";","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4057,"byte_end":4080,"line_start":87,"line_end":87,"column_start":1,"column_end":24}},{"value":"/ let encoded: String = general_purpose::STANDARD_NO_PAD.encode(orig);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4081,"byte_end":4153,"line_start":88,"line_end":88,"column_start":1,"column_end":73}},{"value":"/ assert_eq!(\"ZGF0YQ\", encoded);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4154,"byte_end":4188,"line_start":89,"line_end":89,"column_start":1,"column_end":35}},{"value":"/ assert_eq!(orig.as_slice(), &general_purpose::STANDARD_NO_PAD.decode(encoded).unwrap());","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4189,"byte_end":4281,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4282,"byte_end":4285,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ // or, URL-safe","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4286,"byte_end":4305,"line_start":92,"line_end":92,"column_start":1,"column_end":20}},{"value":"/ let encoded_url = general_purpose::URL_SAFE_NO_PAD.encode(orig);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4306,"byte_end":4374,"line_start":93,"line_end":93,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4375,"byte_end":4382,"line_start":94,"line_end":94,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4383,"byte_end":4386,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ ## Custom alphabet, config, and engine","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4387,"byte_end":4429,"line_start":96,"line_end":96,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4430,"byte_end":4433,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4434,"byte_end":4441,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/ use base64::{engine, alphabet, Engine as _};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4442,"byte_end":4490,"line_start":99,"line_end":99,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4491,"byte_end":4494,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ // bizarro-world base64: +/ as the first symbols instead of the last","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4495,"byte_end":4567,"line_start":101,"line_end":101,"column_start":1,"column_end":73}},{"value":"/ let alphabet =","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4568,"byte_end":4586,"line_start":102,"line_end":102,"column_start":1,"column_end":19}},{"value":"/     alphabet::Alphabet::new(\"+/ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4587,"byte_end":4686,"line_start":103,"line_end":103,"column_start":1,"column_end":100}},{"value":"/     .unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4687,"byte_end":4705,"line_start":104,"line_end":104,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4706,"byte_end":4709,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ // a very weird config that encodes with padding but requires no padding when decoding...?","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4710,"byte_end":4804,"line_start":106,"line_end":106,"column_start":1,"column_end":95}},{"value":"/ let crazy_config = engine::GeneralPurposeConfig::new()","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4805,"byte_end":4863,"line_start":107,"line_end":107,"column_start":1,"column_end":59}},{"value":"/     .with_decode_allow_trailing_bits(true)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4864,"byte_end":4910,"line_start":108,"line_end":108,"column_start":1,"column_end":47}},{"value":"/     .with_encode_padding(true)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4911,"byte_end":4945,"line_start":109,"line_end":109,"column_start":1,"column_end":35}},{"value":"/     .with_decode_padding_mode(engine::DecodePaddingMode::RequireNone);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":4946,"byte_end":5020,"line_start":110,"line_end":110,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5021,"byte_end":5024,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ let crazy_engine = engine::GeneralPurpose::new(&alphabet, crazy_config);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5025,"byte_end":5101,"line_start":112,"line_end":112,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5102,"byte_end":5105,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ let encoded = crazy_engine.encode(b\"abc 123\");","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5106,"byte_end":5156,"line_start":114,"line_end":114,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5157,"byte_end":5160,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5161,"byte_end":5168,"line_start":116,"line_end":116,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5169,"byte_end":5172,"line_start":117,"line_end":117,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5173,"byte_end":5185,"line_start":118,"line_end":118,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5186,"byte_end":5189,"line_start":119,"line_end":119,"column_start":1,"column_end":4}},{"value":"/ If length calculations result in overflowing `usize`, a panic will result.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5190,"byte_end":5268,"line_start":120,"line_end":120,"column_start":1,"column_end":79}},{"value":"deny(missing_docs, trivial_casts, trivial_numeric_casts,\nunused_extern_crates, unused_import_braces, unused_results,\nvariant_size_differences, warnings)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5339,"byte_end":5529,"line_start":123,"line_end":132,"column_start":1,"column_end":3}},{"value":"forbid(unsafe_code)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5530,"byte_end":5553,"line_start":133,"line_end":133,"column_start":1,"column_end":24}},{"value":"allow(clippy :: single_component_path_imports)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":5714,"byte_end":5762,"line_start":136,"line_end":136,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":25},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/chunked_encoder.rs","byte_start":7206,"byte_end":7211,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Error","qualname":"::chunked_encoder::Sink::Error","value":"type Error;","parent":{"krate":0,"index":24},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":52},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"display","qualname":"::display","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":79},{"krate":0,"index":84},{"krate":0,"index":89},{"krate":0,"index":93}],"decl_id":null,"docs":" Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","sig":null,"attributes":[{"value":"/ Enables base64'd output anywhere you might use a `Display` implementation, like a format string.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14047,"byte_end":14147,"line_start":1,"line_end":1,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14148,"byte_end":14151,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14152,"byte_end":14159,"line_start":3,"line_end":3,"column_start":1,"column_end":8}},{"value":"/ use base64::{display::Base64Display, engine::general_purpose::STANDARD};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14160,"byte_end":14236,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14237,"byte_end":14240,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ let data = vec![0x0, 0x1, 0x2, 0x3];","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14241,"byte_end":14281,"line_start":6,"line_end":6,"column_start":1,"column_end":41}},{"value":"/ let wrapper = Base64Display::new(&data, &STANDARD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14282,"byte_end":14337,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14338,"byte_end":14341,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"base64: AAECAw==\", format!(\"base64: {}\", wrapper));","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14342,"byte_end":14409,"line_start":9,"line_end":9,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14410,"byte_end":14417,"line_start":10,"line_end":10,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":73},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14654,"byte_end":14667,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"Base64Display","qualname":"::display::Base64Display","value":"Base64Display {  }","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78}],"decl_id":null,"docs":" A convenience wrapper for base64'ing bytes into a format string without heap allocation.\n","sig":null,"attributes":[{"value":"/ A convenience wrapper for base64'ing bytes into a format string without heap allocation.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14550,"byte_end":14642,"line_start":17,"line_end":17,"column_start":1,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14878,"byte_end":14881,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<Base64Display>::new","value":"fn new(&'a [u8], &'e E) -> Base64Display","parent":null,"children":[],"decl_id":null,"docs":" Create a `Base64Display` with the provided engine.\n","sig":null,"attributes":[{"value":"/ Create a `Base64Display` with the provided engine.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14812,"byte_end":14866,"line_start":24,"line_end":24,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":15134,"byte_end":15137,"line_start":34,"line_end":34,"column_start":8,"column_end":11},"name":"fmt","qualname":"<Base64Display as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut Formatter) -> Result<(), fmt::Error>","parent":{"krate":2,"index":10302},"children":[],"decl_id":{"krate":2,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":98},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/mod.rs","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":160}],"decl_id":null,"docs":" Implementations of `io::Read` to transparently decode base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6121,"byte_end":6155,"line_start":150,"line_end":150,"column_start":1,"column_end":35}},{"value":"/ Implementations of `io::Read` to transparently decode base64.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/mod.rs","byte_start":16779,"byte_end":16844,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":120},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17918,"byte_end":17931,"line_start":33,"line_end":33,"column_start":12,"column_end":25},"name":"DecoderReader","qualname":"::read::decoder::DecoderReader","value":"DecoderReader {  }","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134}],"decl_id":null,"docs":" A `Read` implementation that decodes base64 data read from an underlying reader.","sig":null,"attributes":[{"value":"/ A `Read` implementation that decodes base64 data read from an underlying reader.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17242,"byte_end":17326,"line_start":11,"line_end":11,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17327,"byte_end":17330,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17331,"byte_end":17345,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17346,"byte_end":17349,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17350,"byte_end":17357,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use std::io::Read;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17358,"byte_end":17380,"line_start":16,"line_end":16,"column_start":1,"column_end":23}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17381,"byte_end":17405,"line_start":17,"line_end":17,"column_start":1,"column_end":25}},{"value":"/ use base64::engine::general_purpose;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17406,"byte_end":17446,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17447,"byte_end":17450,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // use a cursor as the simplest possible `Read` -- in real code this is probably a file, etc.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17451,"byte_end":17548,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/ let mut wrapped_reader = Cursor::new(b\"YXNkZg==\");","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17549,"byte_end":17603,"line_start":21,"line_end":21,"column_start":1,"column_end":55}},{"value":"/ let mut decoder = base64::read::DecoderReader::new(","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17604,"byte_end":17659,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/     &mut wrapped_reader,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17660,"byte_end":17688,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/     &general_purpose::STANDARD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17689,"byte_end":17725,"line_start":24,"line_end":24,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17726,"byte_end":17729,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // handle errors as you normally would","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17730,"byte_end":17772,"line_start":26,"line_end":26,"column_start":1,"column_end":43}},{"value":"/ let mut result = Vec::new();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17773,"byte_end":17805,"line_start":27,"line_end":27,"column_start":1,"column_end":33}},{"value":"/ decoder.read_to_end(&mut result).unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17806,"byte_end":17852,"line_start":28,"line_end":28,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17853,"byte_end":17856,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(b\"asdf\", &result[..]);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17857,"byte_end":17894,"line_start":30,"line_end":30,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17895,"byte_end":17898,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":17899,"byte_end":17906,"line_start":32,"line_end":32,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":19032,"byte_end":19035,"line_start":59,"line_end":59,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DecoderReader as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":19631,"byte_end":19634,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"new","qualname":"<DecoderReader>::new","value":"fn new(R, &'e E) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that will read from the provided reader `r`.\n","sig":null,"attributes":[{"value":"/ Create a new decoder that will read from the provided reader `r`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":19550,"byte_end":19619,"line_start":72,"line_end":72,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23442,"byte_end":23452,"line_start":169,"line_end":169,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DecoderReader>::into_inner","value":"fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this `DecoderReader`, returning the base reader which it reads base64 encoded\n input from.","sig":null,"attributes":[{"value":"/ Unwraps this `DecoderReader`, returning the base reader which it reads base64 encoded","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23030,"byte_end":23119,"line_start":163,"line_end":163,"column_start":5,"column_end":94}},{"value":"/ input from.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23124,"byte_end":23139,"line_start":164,"line_end":164,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23144,"byte_end":23147,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Because `DecoderReader` performs internal buffering, the state of the inner reader is","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23152,"byte_end":23241,"line_start":166,"line_end":166,"column_start":5,"column_end":94}},{"value":"/ unspecified. This function is mainly provided because the inner reader type may provide","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23246,"byte_end":23337,"line_start":167,"line_end":167,"column_start":5,"column_end":96}},{"value":"/ additional functionality beyond the `Read` implementation which may still be useful.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23342,"byte_end":23430,"line_start":168,"line_end":168,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":24089,"byte_end":24093,"line_start":187,"line_end":187,"column_start":8,"column_end":12},"name":"read","qualname":"<DecoderReader as std::io::Read>::read","value":"fn read<'_, '_>(&'_ mut Self, &'_ mut [u8]) -> io::Result<usize>","parent":{"krate":1,"index":4667},"children":[],"decl_id":{"krate":1,"index":4668},"docs":" Decode input from the wrapped reader.","sig":null,"attributes":[{"value":"/ Decode input from the wrapped reader.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23570,"byte_end":23611,"line_start":175,"line_end":175,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23616,"byte_end":23619,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Under non-error circumstances, this returns `Ok` with the value being the number of bytes","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23624,"byte_end":23717,"line_start":177,"line_end":177,"column_start":5,"column_end":98}},{"value":"/ written in `buf`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23722,"byte_end":23743,"line_start":178,"line_end":178,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23748,"byte_end":23751,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ Where possible, this function buffers base64 to minimize the number of read() calls to the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23756,"byte_end":23850,"line_start":180,"line_end":180,"column_start":5,"column_end":99}},{"value":"/ delegate reader.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23855,"byte_end":23875,"line_start":181,"line_end":181,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23880,"byte_end":23883,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23888,"byte_end":23900,"line_start":183,"line_end":183,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23905,"byte_end":23908,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Any errors emitted by the delegate reader are returned. Decoding errors due to invalid","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23913,"byte_end":24003,"line_start":185,"line_end":185,"column_start":5,"column_end":95}},{"value":"/ base64 are also possible, and will have `io::ErrorKind::InvalidData`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":24008,"byte_end":24081,"line_start":186,"line_end":186,"column_start":5,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":163},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/mod.rs","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":233},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":286}],"decl_id":null,"docs":" Implementations of `io::Write` to transparently handle base64.\n","sig":null,"attributes":[{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6170,"byte_end":6204,"line_start":152,"line_end":152,"column_start":1,"column_end":35}},{"value":"/ Implementations of `io::Write` to transparently handle base64.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/mod.rs","byte_start":28745,"byte_end":28811,"line_start":1,"line_end":1,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":31419,"byte_end":31432,"line_start":63,"line_end":63,"column_start":12,"column_end":25},"name":"EncoderWriter","qualname":"::write::encoder::EncoderWriter","value":"EncoderWriter {  }","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":199},{"krate":0,"index":200}],"decl_id":null,"docs":" A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64 encodes data before delegating to the wrapped writer.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29359,"byte_end":29453,"line_start":13,"line_end":13,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29454,"byte_end":29457,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ Because base64 has special handling for the end of the input data (padding, etc), there's a","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29458,"byte_end":29553,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ `finish()` method on this type that encodes any leftover input bytes and adds padding if","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29554,"byte_end":29646,"line_start":16,"line_end":16,"column_start":1,"column_end":93}},{"value":"/ appropriate. It's called automatically when deallocated (see the `Drop` implementation), but","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29647,"byte_end":29743,"line_start":17,"line_end":17,"column_start":1,"column_end":97}},{"value":"/ any error that occurs when invoking the underlying writer will be suppressed. If you want to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29744,"byte_end":29840,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ handle such errors, call `finish()` yourself.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29841,"byte_end":29890,"line_start":19,"line_end":19,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29891,"byte_end":29894,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29895,"byte_end":29909,"line_start":21,"line_end":21,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29910,"byte_end":29913,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29914,"byte_end":29921,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29922,"byte_end":29945,"line_start":24,"line_end":24,"column_start":1,"column_end":24}},{"value":"/ use base64::engine::general_purpose;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29946,"byte_end":29986,"line_start":25,"line_end":25,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29987,"byte_end":29990,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // use a vec as the simplest possible `Write` -- in real code this is probably a file, etc.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":29991,"byte_end":30086,"line_start":27,"line_end":27,"column_start":1,"column_end":96}},{"value":"/ let mut enc = base64::write::EncoderWriter::new(Vec::new(), &general_purpose::STANDARD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30087,"byte_end":30179,"line_start":28,"line_end":28,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30180,"byte_end":30183,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // handle errors as you normally would","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30184,"byte_end":30226,"line_start":30,"line_end":30,"column_start":1,"column_end":43}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30227,"byte_end":30263,"line_start":31,"line_end":31,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30264,"byte_end":30267,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // could leave this out to be called by Drop, if you don't care","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30268,"byte_end":30335,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/ // about handling errors or getting the delegate writer back","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30336,"byte_end":30400,"line_start":34,"line_end":34,"column_start":1,"column_end":65}},{"value":"/ let delegate = enc.finish().unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30401,"byte_end":30442,"line_start":35,"line_end":35,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30443,"byte_end":30446,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ // base64 was written to the writer","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30447,"byte_end":30486,"line_start":37,"line_end":37,"column_start":1,"column_end":40}},{"value":"/ assert_eq!(b\"YXNkZg==\", &delegate[..]);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30487,"byte_end":30530,"line_start":38,"line_end":38,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30531,"byte_end":30534,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30535,"byte_end":30542,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30543,"byte_end":30546,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30547,"byte_end":30559,"line_start":42,"line_end":42,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30560,"byte_end":30563,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` (or related methods) or `finish()` after `finish()` has completed without","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30564,"byte_end":30659,"line_start":44,"line_end":44,"column_start":1,"column_end":96}},{"value":"/ error is invalid and will panic.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30660,"byte_end":30696,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30697,"byte_end":30700,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Errors","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30701,"byte_end":30713,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30714,"byte_end":30717,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Base64 encoding itself does not generate errors, but errors from the wrapped writer will be","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30718,"byte_end":30813,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ returned as per the contract of `Write`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30814,"byte_end":30858,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30859,"byte_end":30862,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30863,"byte_end":30880,"line_start":52,"line_end":52,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30881,"byte_end":30884,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ It has some minor performance loss compared to encoding slices (a couple percent).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30885,"byte_end":30971,"line_start":54,"line_end":54,"column_start":1,"column_end":87}},{"value":"/ It does not do any heap allocation.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":30972,"byte_end":31011,"line_start":55,"line_end":55,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":31012,"byte_end":31015,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":31016,"byte_end":31033,"line_start":57,"line_end":57,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":31034,"byte_end":31037,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Owing to the specification of the `write` and `flush` methods on the `Write` trait and their","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":31038,"byte_end":31134,"line_start":59,"line_end":59,"column_start":1,"column_end":97}},{"value":"/ implications for a buffering implementation, these methods may not behave as expected. In","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":31135,"byte_end":31228,"line_start":60,"line_end":60,"column_start":1,"column_end":94}},{"value":"/ particular, calling `write_all` on this interface may fail with `io::ErrorKind::WriteZero`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":31229,"byte_end":31324,"line_start":61,"line_end":61,"column_start":1,"column_end":96}},{"value":"/ See the documentation of the `Write` trait implementation for further details.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":31325,"byte_end":31407,"line_start":62,"line_end":62,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":32597,"byte_end":32600,"line_start":84,"line_end":84,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EncoderWriter as std::fmt::Debug>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10295},"children":[],"decl_id":{"krate":2,"index":10296},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33097,"byte_end":33100,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderWriter>::new","value":"fn new(W, &'e E) -> EncoderWriter","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that will write to the provided delegate writer.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that will write to the provided delegate writer.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33012,"byte_end":33085,"line_start":97,"line_end":97,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":34209,"byte_end":34215,"line_start":126,"line_end":126,"column_start":12,"column_end":18},"name":"finish","qualname":"<EncoderWriter>::finish","value":"fn finish<'_>(&'_ mut Self) -> Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data and write it, including any trailing incomplete input\n triples and associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data and write it, including any trailing incomplete input","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33459,"byte_end":33551,"line_start":110,"line_end":110,"column_start":5,"column_end":97}},{"value":"/ triples and associated padding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33556,"byte_end":33591,"line_start":111,"line_end":111,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33596,"byte_end":33599,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Once this succeeds, no further writes or calls to this method are allowed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33604,"byte_end":33682,"line_start":113,"line_end":113,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33687,"byte_end":33690,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ This may write to the delegate writer multiple times if the delegate writer does not accept","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33695,"byte_end":33790,"line_start":115,"line_end":115,"column_start":5,"column_end":100}},{"value":"/ all input provided to its `write` each invocation.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33795,"byte_end":33849,"line_start":116,"line_end":116,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33854,"byte_end":33857,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ If you don't care about error handling, it is not necessary to call this function, as the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33862,"byte_end":33955,"line_start":118,"line_end":118,"column_start":5,"column_end":98}},{"value":"/ equivalent finalization is done by the Drop impl.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":33960,"byte_end":34013,"line_start":119,"line_end":119,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":34018,"byte_end":34021,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Returns the writer that this was constructed around.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":34026,"byte_end":34082,"line_start":121,"line_end":121,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":34087,"byte_end":34090,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":34095,"byte_end":34107,"line_start":123,"line_end":123,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":34112,"byte_end":34115,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The first error that is not of `ErrorKind::Interrupted` will be returned.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":34120,"byte_end":34197,"line_start":125,"line_end":125,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38861,"byte_end":38871,"line_start":241,"line_end":241,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<EncoderWriter>::into_inner","value":"fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this `EncoderWriter`, returning the base writer it writes base64 encoded output\n to.","sig":null,"attributes":[{"value":"/ Unwraps this `EncoderWriter`, returning the base writer it writes base64 encoded output","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38127,"byte_end":38218,"line_start":228,"line_end":228,"column_start":5,"column_end":96}},{"value":"/ to.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38223,"byte_end":38230,"line_start":229,"line_end":229,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38235,"byte_end":38238,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Normally this method should not be needed, since `finish()` returns the inner writer if","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38243,"byte_end":38334,"line_start":231,"line_end":231,"column_start":5,"column_end":96}},{"value":"/ it completes successfully. That will also ensure all data has been flushed, which the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38339,"byte_end":38428,"line_start":232,"line_end":232,"column_start":5,"column_end":94}},{"value":"/ `into_inner()` function does *not* do.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38433,"byte_end":38475,"line_start":233,"line_end":233,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38480,"byte_end":38483,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Calling this method after `finish()` has completed successfully will panic, since the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38488,"byte_end":38577,"line_start":235,"line_end":235,"column_start":5,"column_end":94}},{"value":"/ writer has already been returned.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38582,"byte_end":38619,"line_start":236,"line_end":236,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38624,"byte_end":38627,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ This method may be useful if the writer implements additional APIs beyond the `Write`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38632,"byte_end":38721,"line_start":238,"line_end":238,"column_start":5,"column_end":94}},{"value":"/ trait. Note that the inner writer might be in an error state or have an incomplete","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38726,"byte_end":38812,"line_start":239,"line_end":239,"column_start":5,"column_end":91}},{"value":"/ base64 string written to it.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":38817,"byte_end":38849,"line_start":240,"line_end":240,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":40042,"byte_end":40047,"line_start":265,"line_end":265,"column_start":8,"column_end":13},"name":"write","qualname":"<EncoderWriter as std::io::Write>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8]) -> Result<usize>","parent":{"krate":1,"index":4724},"children":[],"decl_id":{"krate":1,"index":4725},"docs":" Encode input and then write to the delegate writer.","sig":null,"attributes":[{"value":"/ Encode input and then write to the delegate writer.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39081,"byte_end":39136,"line_start":249,"line_end":249,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39141,"byte_end":39144,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Under non-error circumstances, this returns `Ok` with the value being the number of bytes","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39149,"byte_end":39242,"line_start":251,"line_end":251,"column_start":5,"column_end":98}},{"value":"/ of `input` consumed. The value may be `0`, which interacts poorly with `write_all`, which","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39247,"byte_end":39340,"line_start":252,"line_end":252,"column_start":5,"column_end":98}},{"value":"/ interprets `Ok(0)` as an error, despite it being allowed by the contract of `write`. See","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39345,"byte_end":39437,"line_start":253,"line_end":253,"column_start":5,"column_end":97}},{"value":"/ <https://github.com/rust-lang/rust/issues/56889> for more on that.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39442,"byte_end":39512,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39517,"byte_end":39520,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ If the previous call to `write` provided more (encoded) data than the delegate writer could","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39525,"byte_end":39620,"line_start":256,"line_end":256,"column_start":5,"column_end":100}},{"value":"/ accept in a single call to its `write`, the remaining data is buffered. As long as buffered","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39625,"byte_end":39720,"line_start":257,"line_end":257,"column_start":5,"column_end":100}},{"value":"/ data is present, subsequent calls to `write` will try to write the remaining buffered data","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39725,"byte_end":39819,"line_start":258,"line_end":258,"column_start":5,"column_end":99}},{"value":"/ to the delegate and return either `Ok(0)` -- and therefore not consume any of `input` -- or","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39824,"byte_end":39919,"line_start":259,"line_end":259,"column_start":5,"column_end":100}},{"value":"/ an error.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39924,"byte_end":39937,"line_start":260,"line_end":260,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39942,"byte_end":39945,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ # Errors","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39950,"byte_end":39962,"line_start":262,"line_end":262,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39967,"byte_end":39970,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Any errors emitted by the delegate writer are returned.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39975,"byte_end":40034,"line_start":264,"line_end":264,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":45814,"byte_end":45819,"line_start":391,"line_end":391,"column_start":8,"column_end":13},"name":"flush","qualname":"<EncoderWriter as std::io::Write>::flush","value":"fn flush<'_>(&'_ mut Self) -> Result<()>","parent":{"krate":1,"index":4724},"children":[],"decl_id":{"krate":1,"index":4729},"docs":" Because this is usually treated as OK to call multiple times, it will *not* flush any\n incomplete chunks of input or write padding.\n # Errors","sig":null,"attributes":[{"value":"/ Because this is usually treated as OK to call multiple times, it will *not* flush any","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":45555,"byte_end":45644,"line_start":386,"line_end":386,"column_start":5,"column_end":94}},{"value":"/ incomplete chunks of input or write padding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":45649,"byte_end":45697,"line_start":387,"line_end":387,"column_start":5,"column_end":53}},{"value":"/ # Errors","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":45702,"byte_end":45714,"line_start":388,"line_end":388,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":45719,"byte_end":45722,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ The first error that is not of [`ErrorKind::Interrupted`] will be returned.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":45727,"byte_end":45806,"line_start":390,"line_end":390,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":46085,"byte_end":46089,"line_start":401,"line_end":401,"column_start":8,"column_end":12},"name":"drop","qualname":"<EncoderWriter as std::ops::Drop>::drop","value":"fn drop<'_>(&'_ mut Self)","parent":{"krate":2,"index":3510},"children":[],"decl_id":{"krate":2,"index":3511},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":243},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47781,"byte_end":47800,"line_start":56,"line_end":56,"column_start":12,"column_end":31},"name":"EncoderStringWriter","qualname":"::write::encoder_string_writer::EncoderStringWriter","value":"EncoderStringWriter {  }","parent":null,"children":[{"krate":0,"index":247}],"decl_id":null,"docs":" A `Write` implementation that base64-encodes data using the provided config and accumulates the\n resulting base64 utf8 `&str` in a [StrConsumer] implementation (typically `String`), which is\n then exposed via `into_inner()`.","sig":null,"attributes":[{"value":"/ A `Write` implementation that base64-encodes data using the provided config and accumulates the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46335,"byte_end":46434,"line_start":5,"line_end":5,"column_start":1,"column_end":100}},{"value":"/ resulting base64 utf8 `&str` in a [StrConsumer] implementation (typically `String`), which is","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46435,"byte_end":46532,"line_start":6,"line_end":6,"column_start":1,"column_end":98}},{"value":"/ then exposed via `into_inner()`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46533,"byte_end":46569,"line_start":7,"line_end":7,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46570,"byte_end":46573,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46574,"byte_end":46588,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46589,"byte_end":46592,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Buffer base64 in a new String:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46593,"byte_end":46627,"line_start":11,"line_end":11,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46628,"byte_end":46631,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46632,"byte_end":46639,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46640,"byte_end":46663,"line_start":14,"line_end":14,"column_start":1,"column_end":24}},{"value":"/ use base64::engine::general_purpose;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46664,"byte_end":46704,"line_start":15,"line_end":15,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46705,"byte_end":46708,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ let mut enc = base64::write::EncoderStringWriter::new(&general_purpose::STANDARD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46709,"byte_end":46795,"line_start":17,"line_end":17,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46796,"byte_end":46799,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46800,"byte_end":46836,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46837,"byte_end":46840,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ // get the resulting String","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46841,"byte_end":46872,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/ let b64_string = enc.into_inner();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46873,"byte_end":46911,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46912,"byte_end":46915,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"YXNkZg==\", &b64_string);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46916,"byte_end":46956,"line_start":24,"line_end":24,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46957,"byte_end":46964,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46965,"byte_end":46968,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Or, append to an existing `String`, which implements `StrConsumer`:","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":46969,"byte_end":47040,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47041,"byte_end":47044,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47045,"byte_end":47052,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47053,"byte_end":47076,"line_start":30,"line_end":30,"column_start":1,"column_end":24}},{"value":"/ use base64::engine::general_purpose;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47077,"byte_end":47117,"line_start":31,"line_end":31,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47118,"byte_end":47121,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let mut buf = String::from(\"base64: \");","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47122,"byte_end":47165,"line_start":33,"line_end":33,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47166,"byte_end":47169,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ let mut enc = base64::write::EncoderStringWriter::from_consumer(","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47170,"byte_end":47238,"line_start":35,"line_end":35,"column_start":1,"column_end":69}},{"value":"/     &mut buf,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47239,"byte_end":47256,"line_start":36,"line_end":36,"column_start":1,"column_end":18}},{"value":"/     &general_purpose::STANDARD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47257,"byte_end":47293,"line_start":37,"line_end":37,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47294,"byte_end":47297,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ enc.write_all(b\"asdf\").unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47298,"byte_end":47334,"line_start":39,"line_end":39,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47335,"byte_end":47338,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // release the &mut reference on buf","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47339,"byte_end":47379,"line_start":41,"line_end":41,"column_start":1,"column_end":41}},{"value":"/ let _ = enc.into_inner();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47380,"byte_end":47409,"line_start":42,"line_end":42,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47410,"byte_end":47413,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"base64: YXNkZg==\", &buf);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47414,"byte_end":47455,"line_start":44,"line_end":44,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47456,"byte_end":47463,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47464,"byte_end":47467,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47468,"byte_end":47480,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47481,"byte_end":47484,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Calling `write()` (or related methods) or `finish()` after `finish()` has completed without","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47485,"byte_end":47580,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ error is invalid and will panic.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47581,"byte_end":47617,"line_start":50,"line_end":50,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47618,"byte_end":47621,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ # Performance","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47622,"byte_end":47639,"line_start":52,"line_end":52,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47640,"byte_end":47643,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Because it has to validate that the base64 is UTF-8, it is about 80% as fast as writing plain","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47644,"byte_end":47741,"line_start":54,"line_end":54,"column_start":1,"column_end":98}},{"value":"/ bytes to a `io::Write`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47742,"byte_end":47769,"line_start":55,"line_end":55,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48065,"byte_end":48078,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"from_consumer","qualname":"<EncoderStringWriter>::from_consumer","value":"fn from_consumer(S, &'e E) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a EncoderStringWriter that will append to the provided `StrConsumer`.\n","sig":null,"attributes":[{"value":"/ Create a EncoderStringWriter that will append to the provided `StrConsumer`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47973,"byte_end":48053,"line_start":61,"line_end":61,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48476,"byte_end":48486,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<EncoderStringWriter>::into_inner","value":"fn into_inner(Self) -> S","parent":null,"children":[],"decl_id":null,"docs":" Encode all remaining buffered data, including any trailing incomplete input triples and\n associated padding.","sig":null,"attributes":[{"value":"/ Encode all remaining buffered data, including any trailing incomplete input triples and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48264,"byte_end":48355,"line_start":68,"line_end":68,"column_start":5,"column_end":96}},{"value":"/ associated padding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48360,"byte_end":48383,"line_start":69,"line_end":69,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48388,"byte_end":48391,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Returns the base64-encoded form of the accumulated written data.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48396,"byte_end":48464,"line_start":71,"line_end":71,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48813,"byte_end":48816,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"new","qualname":"<EncoderStringWriter>::new","value":"fn new(&'e E) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a EncoderStringWriter that will encode into a new `String` with the provided config.\n","sig":null,"attributes":[{"value":"/ Create a EncoderStringWriter that will encode into a new `String` with the provided config.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48706,"byte_end":48801,"line_start":81,"line_end":81,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49006,"byte_end":49011,"line_start":88,"line_end":88,"column_start":8,"column_end":13},"name":"write","qualname":"<EncoderStringWriter as std::io::Write>::write","value":"fn write<'_, '_>(&'_ mut Self, &'_ [u8]) -> io::Result<usize>","parent":{"krate":1,"index":4724},"children":[],"decl_id":{"krate":1,"index":4725},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49104,"byte_end":49109,"line_start":92,"line_end":92,"column_start":8,"column_end":13},"name":"flush","qualname":"<EncoderStringWriter as std::io::Write>::flush","value":"fn flush<'_>(&'_ mut Self) -> io::Result<()>","parent":{"krate":1,"index":4724},"children":[],"decl_id":{"krate":1,"index":4729},"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":264},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49261,"byte_end":49272,"line_start":98,"line_end":98,"column_start":11,"column_end":22},"name":"StrConsumer","qualname":"::write::encoder_string_writer::StrConsumer","value":"StrConsumer","parent":null,"children":[{"krate":0,"index":265}],"decl_id":null,"docs":" An abstraction around consuming `str`s produced by base64 encoding.\n","sig":null,"attributes":[{"value":"/ An abstraction around consuming `str`s produced by base64 encoding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49179,"byte_end":49250,"line_start":97,"line_end":97,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49331,"byte_end":49338,"line_start":100,"line_end":100,"column_start":8,"column_end":15},"name":"consume","qualname":"::write::encoder_string_writer::StrConsumer::consume","value":"fn consume<'_, '_>(&'_ mut Self, &'_ str)","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Consume the base64 encoded data in `buf`\n","sig":null,"attributes":[{"value":"/ Consume the base64 encoded data in `buf`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49279,"byte_end":49323,"line_start":99,"line_end":99,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49506,"byte_end":49513,"line_start":105,"line_end":105,"column_start":8,"column_end":15},"name":"consume","qualname":"<&'_ mut S as write::encoder_string_writer::StrConsumer>::consume","value":"fn consume<'_, '_>(&'_ mut Self, &'_ str)","parent":{"krate":0,"index":264},"children":[],"decl_id":{"krate":0,"index":265},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49661,"byte_end":49668,"line_start":112,"line_end":112,"column_start":8,"column_end":15},"name":"consume","qualname":"<String as write::encoder_string_writer::StrConsumer>::consume","value":"fn consume<'_, '_>(&'_ mut Self, &'_ str)","parent":{"krate":0,"index":264},"children":[],"decl_id":{"krate":0,"index":265},"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":289},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"engine","qualname":"::engine","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":298},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":320},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":659},{"krate":0,"index":666},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":675}],"decl_id":null,"docs":" Provides the [Engine] abstraction and out of the box implementations.\n","sig":null,"attributes":[{"value":"/ Provides the [Engine] abstraction and out of the box implementations.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":51561,"byte_end":51634,"line_start":1,"line_end":1,"column_start":1,"column_end":74}}]},{"kind":"Mod","id":{"krate":0,"index":320},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"general_purpose","qualname":"::engine::general_purpose","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","parent":null,"children":[{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":332},{"krate":0,"index":335},{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":380},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":419},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":650},{"krate":0,"index":654},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":426},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" Provides the [GeneralPurpose] engine and associated config types.\n","sig":null,"attributes":[{"value":"/ Provides the [GeneralPurpose] engine and associated config types.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":67697,"byte_end":67766,"line_start":1,"line_end":1,"column_start":1,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":365},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/decode.rs","byte_start":84119,"byte_end":84141,"line_start":25,"line_end":25,"column_start":12,"column_end":34},"name":"GeneralPurposeEstimate","qualname":"::engine::general_purpose::decode::GeneralPurposeEstimate","value":"GeneralPurposeEstimate {  }","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/decode.rs","byte_start":84847,"byte_end":84867,"line_start":48,"line_end":48,"column_start":8,"column_end":28},"name":"decoded_len_estimate","qualname":"<GeneralPurposeEstimate as engine::DecodeEstimate>::decoded_len_estimate","value":"fn decoded_len_estimate<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":472},"children":[],"decl_id":{"krate":0,"index":473},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":401},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68397,"byte_end":68411,"line_start":21,"line_end":21,"column_start":12,"column_end":26},"name":"GeneralPurpose","qualname":"::engine::general_purpose::GeneralPurpose","value":"GeneralPurpose {  }","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406}],"decl_id":null,"docs":" A general-purpose base64 engine.","sig":null,"attributes":[{"value":"/ A general-purpose base64 engine.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68034,"byte_end":68070,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68071,"byte_end":68074,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ - It uses no vector CPU instructions, so it will work on any system.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68075,"byte_end":68147,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/ - It is reasonably fast (~2-3GiB/s).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68148,"byte_end":68188,"line_start":19,"line_end":19,"column_start":1,"column_end":41}},{"value":"/ - It is not constant-time, though, so it is vulnerable to timing side-channel attacks. For loading cryptographic keys, etc, it is suggested to use the forthcoming constant-time implementation.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68189,"byte_end":68385,"line_start":20,"line_end":20,"column_start":1,"column_end":197}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68742,"byte_end":68745,"line_start":32,"line_end":32,"column_start":18,"column_end":21},"name":"new","qualname":"<GeneralPurpose>::new","value":"const fn new<'_>(&'_ Alphabet, GeneralPurposeConfig) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `GeneralPurpose` engine from an [Alphabet].","sig":null,"attributes":[{"value":"/ Create a `GeneralPurpose` engine from an [Alphabet].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68534,"byte_end":68590,"line_start":28,"line_end":28,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68595,"byte_end":68598,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ While not very expensive to initialize, ideally these should be cached","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68603,"byte_end":68677,"line_start":30,"line_end":30,"column_start":5,"column_end":79}},{"value":"/ if the engine will be used repeatedly.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68682,"byte_end":68724,"line_start":31,"line_end":31,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":69099,"byte_end":69114,"line_start":45,"line_end":45,"column_start":8,"column_end":23},"name":"internal_encode","qualname":"<GeneralPurpose as engine::Engine>::internal_encode","value":"fn internal_encode<'_, '_, '_>(&'_ Self, &'_ [u8], &'_ mut [u8]) -> usize","parent":{"krate":0,"index":448},"children":[],"decl_id":{"krate":0,"index":451},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":416},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":76025,"byte_end":76054,"line_start":164,"line_end":164,"column_start":8,"column_end":37},"name":"internal_decoded_len_estimate","qualname":"<GeneralPurpose as engine::Engine>::internal_decoded_len_estimate","value":"fn internal_decoded_len_estimate<'_>(&'_ Self, usize) -> Self::DecodeEstimate","parent":{"krate":0,"index":448},"children":[],"decl_id":{"krate":0,"index":452},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":76167,"byte_end":76182,"line_start":168,"line_end":168,"column_start":8,"column_end":23},"name":"internal_decode","qualname":"<GeneralPurpose as engine::Engine>::internal_decode","value":"fn internal_decode<'_, '_,\n'_>(&'_ Self, &'_ [u8], &'_ mut [u8], Self::DecodeEstimate)\n-> Result<usize, DecodeError>","parent":{"krate":0,"index":448},"children":[],"decl_id":{"krate":0,"index":453},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":76571,"byte_end":76577,"line_start":184,"line_end":184,"column_start":8,"column_end":14},"name":"config","qualname":"<GeneralPurpose as engine::Engine>::config","value":"fn config<'_>(&'_ Self) -> &'_ Self::Config","parent":{"krate":0,"index":448},"children":[],"decl_id":{"krate":0,"index":454},"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":650},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78392,"byte_end":78412,"line_start":242,"line_end":242,"column_start":12,"column_end":32},"name":"GeneralPurposeConfig","qualname":"::engine::general_purpose::GeneralPurposeConfig","value":"GeneralPurposeConfig {  }","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653}],"decl_id":null,"docs":" Contains configuration parameters for base64 encoding and decoding.","sig":null,"attributes":[{"value":"/ Contains configuration parameters for base64 encoding and decoding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":77947,"byte_end":78018,"line_start":229,"line_end":229,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78019,"byte_end":78022,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78023,"byte_end":78030,"line_start":231,"line_end":231,"column_start":1,"column_end":8}},{"value":"/ # use base64::engine::GeneralPurposeConfig;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78031,"byte_end":78078,"line_start":232,"line_end":232,"column_start":1,"column_end":48}},{"value":"/ let config = GeneralPurposeConfig::new()","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78079,"byte_end":78123,"line_start":233,"line_end":233,"column_start":1,"column_end":45}},{"value":"/     .with_encode_padding(false);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78124,"byte_end":78160,"line_start":234,"line_end":234,"column_start":1,"column_end":37}},{"value":"/     // further customize using `.with_*` methods as needed","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78161,"byte_end":78223,"line_start":235,"line_end":235,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78224,"byte_end":78231,"line_start":236,"line_end":236,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78232,"byte_end":78235,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/ The constants [PAD] and [NO_PAD] cover most use cases.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78236,"byte_end":78294,"line_start":238,"line_end":238,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78295,"byte_end":78298,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ To specify the characters used, see [Alphabet].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78299,"byte_end":78350,"line_start":240,"line_end":240,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78944,"byte_end":78947,"line_start":254,"line_end":254,"column_start":18,"column_end":21},"name":"new","qualname":"<GeneralPurposeConfig>::new","value":"const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new config with `padding` = `true`, `decode_allow_trailing_bits` = `false`, and\n `decode_padding_mode = DecodePaddingMode::RequireCanonicalPadding`.","sig":null,"attributes":[{"value":"/ Create a new config with `padding` = `true`, `decode_allow_trailing_bits` = `false`, and","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78558,"byte_end":78650,"line_start":249,"line_end":249,"column_start":5,"column_end":97}},{"value":"/ `decode_padding_mode = DecodePaddingMode::RequireCanonicalPadding`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78655,"byte_end":78726,"line_start":250,"line_end":250,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78731,"byte_end":78734,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ This probably matches most people's expectations, but consider disabling padding to save","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78739,"byte_end":78831,"line_start":252,"line_end":252,"column_start":5,"column_end":97}},{"value":"/ a few bytes unless you specifically need it for compatibility with some legacy system.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78836,"byte_end":78926,"line_start":253,"line_end":253,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79796,"byte_end":79815,"line_start":273,"line_end":273,"column_start":18,"column_end":37},"name":"with_encode_padding","qualname":"<GeneralPurposeConfig>::with_encode_padding","value":"const fn with_encode_padding(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new config based on `self` with an updated `padding` setting.","sig":null,"attributes":[{"value":"/ Create a new config based on `self` with an updated `padding` setting.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79213,"byte_end":79287,"line_start":263,"line_end":263,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79292,"byte_end":79295,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ If `padding` is `true`, encoding will append either 1 or 2 `=` padding characters as needed","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79300,"byte_end":79395,"line_start":265,"line_end":265,"column_start":5,"column_end":100}},{"value":"/ to produce an output whose length is a multiple of 4.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79400,"byte_end":79457,"line_start":266,"line_end":266,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79462,"byte_end":79465,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Padding is not needed for correct decoding and only serves to waste bytes, but it's in the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79470,"byte_end":79564,"line_start":268,"line_end":268,"column_start":5,"column_end":99}},{"value":"/ [spec](https://datatracker.ietf.org/doc/html/rfc4648#section-3.2).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79569,"byte_end":79639,"line_start":269,"line_end":269,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79644,"byte_end":79647,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ For new applications, consider not using padding if the decoders you're using don't require","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79652,"byte_end":79747,"line_start":271,"line_end":271,"column_start":5,"column_end":100}},{"value":"/ padding to be present.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79752,"byte_end":79778,"line_start":272,"line_end":272,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80517,"byte_end":80548,"line_start":287,"line_end":287,"column_start":18,"column_end":49},"name":"with_decode_allow_trailing_bits","qualname":"<GeneralPurposeConfig>::with_decode_allow_trailing_bits","value":"const fn with_decode_allow_trailing_bits(Self, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new config based on `self` with an updated `decode_allow_trailing_bits` setting.","sig":null,"attributes":[{"value":"/ Create a new config based on `self` with an updated `decode_allow_trailing_bits` setting.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":79939,"byte_end":80032,"line_start":280,"line_end":280,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80037,"byte_end":80040,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Most users will not need to configure this. It's useful if you need to decode base64","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80045,"byte_end":80133,"line_start":282,"line_end":282,"column_start":5,"column_end":93}},{"value":"/ produced by a buggy encoder that has bits set in the unused space on the last base64","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80138,"byte_end":80226,"line_start":283,"line_end":283,"column_start":5,"column_end":93}},{"value":"/ character as per [forgiving-base64 decode](https://infra.spec.whatwg.org/#forgiving-base64-decode).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80231,"byte_end":80334,"line_start":284,"line_end":284,"column_start":5,"column_end":108}},{"value":"/ If invalid trailing bits are present and this is `true`, those bits will","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80339,"byte_end":80415,"line_start":285,"line_end":285,"column_start":5,"column_end":81}},{"value":"/ be silently ignored, else `DecodeError::InvalidLastSymbol` will be emitted.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80420,"byte_end":80499,"line_start":286,"line_end":286,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":430},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81555,"byte_end":81579,"line_start":307,"line_end":307,"column_start":18,"column_end":42},"name":"with_decode_padding_mode","qualname":"<GeneralPurposeConfig>::with_decode_padding_mode","value":"const fn with_decode_padding_mode(Self, DecodePaddingMode) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new config based on `self` with an updated `decode_padding_mode` setting.","sig":null,"attributes":[{"value":"/ Create a new config based on `self` with an updated `decode_padding_mode` setting.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80680,"byte_end":80766,"line_start":294,"line_end":294,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80771,"byte_end":80774,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ Padding is not useful in terms of representing encoded data -- it makes no difference to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80779,"byte_end":80871,"line_start":296,"line_end":296,"column_start":5,"column_end":97}},{"value":"/ the decoder if padding is present or not, so if you have some un-padded input to decode, it","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80876,"byte_end":80971,"line_start":297,"line_end":297,"column_start":5,"column_end":100}},{"value":"/ is perfectly fine to use `DecodePaddingMode::Indifferent` to prevent errors from being","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":80976,"byte_end":81066,"line_start":298,"line_end":298,"column_start":5,"column_end":95}},{"value":"/ emitted.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81071,"byte_end":81083,"line_start":299,"line_end":299,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81088,"byte_end":81091,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ However, since in practice","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81096,"byte_end":81126,"line_start":301,"line_end":301,"column_start":5,"column_end":35}},{"value":"/ [people who learned nothing from BER vs DER seem to expect base64 to have one canonical encoding](https://eprint.iacr.org/2022/361),","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81131,"byte_end":81267,"line_start":302,"line_end":302,"column_start":5,"column_end":141}},{"value":"/ the default setting is the stricter `DecodePaddingMode::RequireCanonicalPadding`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81272,"byte_end":81357,"line_start":303,"line_end":303,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81362,"byte_end":81365,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Or, if \"canonical\" in your circumstance means _no_ padding rather than padding to the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81370,"byte_end":81459,"line_start":305,"line_end":305,"column_start":5,"column_end":94}},{"value":"/ next multiple of four, there's `DecodePaddingMode::RequireNoPadding`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81464,"byte_end":81537,"line_start":306,"line_end":306,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81810,"byte_end":81817,"line_start":317,"line_end":317,"column_start":8,"column_end":15},"name":"default","qualname":"<GeneralPurposeConfig as std::default::Default>::default","value":"fn default() -> Self","parent":{"krate":2,"index":3241},"children":[],"decl_id":{"krate":2,"index":3242},"docs":" Delegates to [GeneralPurposeConfig::new].\n","sig":null,"attributes":[{"value":"/ Delegates to [GeneralPurposeConfig::new].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81757,"byte_end":81802,"line_start":316,"line_end":316,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81905,"byte_end":81919,"line_start":323,"line_end":323,"column_start":8,"column_end":22},"name":"encode_padding","qualname":"<GeneralPurposeConfig as engine::Config>::encode_padding","value":"fn encode_padding<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":470},"children":[],"decl_id":{"krate":0,"index":471},"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":435},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82079,"byte_end":82087,"line_start":329,"line_end":329,"column_start":11,"column_end":19},"name":"STANDARD","qualname":"::engine::general_purpose::STANDARD","value":"GeneralPurpose","parent":null,"children":[],"decl_id":null,"docs":" A [GeneralPurpose] engine using the [alphabet::STANDARD] base64 alphabet and [PAD] config.\n","sig":null,"attributes":[{"value":"/ A [GeneralPurpose] engine using the [alphabet::STANDARD] base64 alphabet and [PAD] config.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81974,"byte_end":82068,"line_start":328,"line_end":328,"column_start":1,"column_end":95}}]},{"kind":"Const","id":{"krate":0,"index":436},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82262,"byte_end":82277,"line_start":332,"line_end":332,"column_start":11,"column_end":26},"name":"STANDARD_NO_PAD","qualname":"::engine::general_purpose::STANDARD_NO_PAD","value":"GeneralPurpose","parent":null,"children":[],"decl_id":null,"docs":" A [GeneralPurpose] engine using the [alphabet::STANDARD] base64 alphabet and [NO_PAD] config.\n","sig":null,"attributes":[{"value":"/ A [GeneralPurpose] engine using the [alphabet::STANDARD] base64 alphabet and [NO_PAD] config.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82154,"byte_end":82251,"line_start":331,"line_end":331,"column_start":1,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":437},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82452,"byte_end":82460,"line_start":335,"line_end":335,"column_start":11,"column_end":19},"name":"URL_SAFE","qualname":"::engine::general_purpose::URL_SAFE","value":"GeneralPurpose","parent":null,"children":[],"decl_id":null,"docs":" A [GeneralPurpose] engine using the [alphabet::URL_SAFE] base64 alphabet and [PAD] config.\n","sig":null,"attributes":[{"value":"/ A [GeneralPurpose] engine using the [alphabet::URL_SAFE] base64 alphabet and [PAD] config.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82347,"byte_end":82441,"line_start":334,"line_end":334,"column_start":1,"column_end":95}}]},{"kind":"Const","id":{"krate":0,"index":438},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82635,"byte_end":82650,"line_start":338,"line_end":338,"column_start":11,"column_end":26},"name":"URL_SAFE_NO_PAD","qualname":"::engine::general_purpose::URL_SAFE_NO_PAD","value":"GeneralPurpose","parent":null,"children":[],"decl_id":null,"docs":" A [GeneralPurpose] engine using the [alphabet::URL_SAFE] base64 alphabet and [NO_PAD] config.\n","sig":null,"attributes":[{"value":"/ A [GeneralPurpose] engine using the [alphabet::URL_SAFE] base64 alphabet and [NO_PAD] config.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82527,"byte_end":82624,"line_start":337,"line_end":337,"column_start":1,"column_end":98}}]},{"kind":"Const","id":{"krate":0,"index":439},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82954,"byte_end":82957,"line_start":344,"line_end":344,"column_start":11,"column_end":14},"name":"PAD","qualname":"::engine::general_purpose::PAD","value":"GeneralPurposeConfig","parent":null,"children":[],"decl_id":null,"docs":" Include padding bytes when encoding, and require that they be present when decoding.","sig":null,"attributes":[{"value":"/ Include padding bytes when encoding, and require that they be present when decoding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82720,"byte_end":82808,"line_start":340,"line_end":340,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82809,"byte_end":82812,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ This is the standard per the base64 RFC, but consider using [NO_PAD] instead as padding serves","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82813,"byte_end":82911,"line_start":342,"line_end":342,"column_start":1,"column_end":99}},{"value":"/ little purpose in practice.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":82912,"byte_end":82943,"line_start":343,"line_end":343,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":440},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":83097,"byte_end":83103,"line_start":347,"line_end":347,"column_start":11,"column_end":17},"name":"NO_PAD","qualname":"::engine::general_purpose::NO_PAD","value":"GeneralPurposeConfig","parent":null,"children":[],"decl_id":null,"docs":" Don't add padding when encoding, and require no padding when decoding.\n","sig":null,"attributes":[{"value":"/ Don't add padding when encoding, and require no padding when decoding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":83012,"byte_end":83086,"line_start":346,"line_end":346,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":448},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53278,"byte_end":53284,"line_start":39,"line_end":39,"column_start":11,"column_end":17},"name":"Engine","qualname":"::engine::Engine","value":"Engine: Send + Sync","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":459},{"krate":0,"index":461},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":468}],"decl_id":null,"docs":" An `Engine` provides low-level encoding and decoding operations that all other higher-level parts of the API use. Users of the library will generally not need to implement this.","sig":null,"attributes":[{"value":"/ An `Engine` provides low-level encoding and decoding operations that all other higher-level parts of the API use. Users of the library will generally not need to implement this.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52141,"byte_end":52322,"line_start":24,"line_end":24,"column_start":1,"column_end":182}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52323,"byte_end":52326,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Different implementations offer different characteristics. The library currently ships with","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52327,"byte_end":52422,"line_start":26,"line_end":26,"column_start":1,"column_end":96}},{"value":"/ [GeneralPurpose] that offers good speed and works on any CPU, with more choices","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52423,"byte_end":52506,"line_start":27,"line_end":27,"column_start":1,"column_end":84}},{"value":"/ coming later, like a constant-time one when side channel resistance is called for, and vendor-specific vectorized ones for more speed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52507,"byte_end":52645,"line_start":28,"line_end":28,"column_start":1,"column_end":139}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52646,"byte_end":52649,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ See [general_purpose::STANDARD_NO_PAD] if you just want standard base64. Otherwise, when possible, it's","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52650,"byte_end":52757,"line_start":30,"line_end":30,"column_start":1,"column_end":108}},{"value":"/ recommended to store the engine in a `const` so that references to it won't pose any lifetime","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52758,"byte_end":52855,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ issues, and to avoid repeating the cost of engine setup.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52856,"byte_end":52916,"line_start":32,"line_end":32,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52917,"byte_end":52920,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Since almost nobody will need to implement `Engine`, docs for internal methods are hidden.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52921,"byte_end":53015,"line_start":34,"line_end":34,"column_start":1,"column_end":95}}]},{"kind":"Type","id":{"krate":0,"index":449},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53353,"byte_end":53359,"line_start":41,"line_end":41,"column_start":10,"column_end":16},"name":"Config","qualname":"::engine::Engine::Config","value":"type Config: Config;","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" The config type used by this engine\n","sig":null,"attributes":[{"value":"/ The config type used by this engine","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53304,"byte_end":53343,"line_start":40,"line_end":40,"column_start":5,"column_end":44}}]},{"kind":"Type","id":{"krate":0,"index":450},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53426,"byte_end":53440,"line_start":43,"line_end":43,"column_start":10,"column_end":24},"name":"DecodeEstimate","qualname":"::engine::Engine::DecodeEstimate","value":"type DecodeEstimate: DecodeEstimate;","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" The decode estimate used by this engine\n","sig":null,"attributes":[{"value":"/ The decode estimate used by this engine","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53373,"byte_end":53416,"line_start":42,"line_end":42,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54025,"byte_end":54040,"line_start":58,"line_end":58,"column_start":8,"column_end":23},"name":"internal_encode","qualname":"::engine::Engine::internal_encode","value":"fn internal_encode<'_, '_, '_>(&'_ Self, &'_ [u8], &'_ mut [u8]) -> usize","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" This is not meant to be called directly; it is only for `Engine` implementors.\n See the other `encode*` functions on this trait.","sig":null,"attributes":[{"value":"/ This is not meant to be called directly; it is only for `Engine` implementors.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53463,"byte_end":53545,"line_start":45,"line_end":45,"column_start":5,"column_end":87}},{"value":"/ See the other `encode*` functions on this trait.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53550,"byte_end":53602,"line_start":46,"line_end":46,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53607,"byte_end":53610,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ Encode the `input` bytes into the `output` buffer based on the mapping in `encode_table`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53615,"byte_end":53708,"line_start":48,"line_end":48,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53713,"byte_end":53716,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ `output` will be long enough to hold the encoded data.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53721,"byte_end":53779,"line_start":50,"line_end":50,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53784,"byte_end":53787,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53792,"byte_end":53832,"line_start":52,"line_end":52,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53837,"byte_end":53840,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ No padding should be written; that is handled separately.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53845,"byte_end":53906,"line_start":54,"line_end":54,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53911,"byte_end":53914,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ Must not write any bytes into the output slice other than the encoded data.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53919,"byte_end":53998,"line_start":56,"line_end":56,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54589,"byte_end":54618,"line_start":70,"line_end":70,"column_start":8,"column_end":37},"name":"internal_decoded_len_estimate","qualname":"::engine::Engine::internal_decoded_len_estimate","value":"fn internal_decoded_len_estimate<'_>(&'_ Self, usize) -> Self::DecodeEstimate","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" This is not meant to be called directly; it is only for `Engine` implementors.","sig":null,"attributes":[{"value":"/ This is not meant to be called directly; it is only for `Engine` implementors.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54096,"byte_end":54178,"line_start":60,"line_end":60,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54183,"byte_end":54186,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ As an optimization to prevent the decoded length from being calculated twice, it is","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54191,"byte_end":54278,"line_start":62,"line_end":62,"column_start":5,"column_end":92}},{"value":"/ sometimes helpful to have a conservative estimate of the decoded size before doing the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54283,"byte_end":54373,"line_start":63,"line_end":63,"column_start":5,"column_end":95}},{"value":"/ decoding, so this calculation is done separately and passed to [Engine::decode()] as needed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54378,"byte_end":54474,"line_start":64,"line_end":64,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54479,"byte_end":54482,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54487,"byte_end":54499,"line_start":66,"line_end":66,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54504,"byte_end":54507,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ Panics if decoded length estimation overflows.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54512,"byte_end":54562,"line_start":68,"line_end":68,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55922,"byte_end":55937,"line_start":97,"line_end":97,"column_start":8,"column_end":23},"name":"internal_decode","qualname":"::engine::Engine::internal_decode","value":"fn internal_decode<'_, '_,\n'_>(&'_ Self, &'_ [u8], &'_ mut [u8], Self::DecodeEstimate)\n-> Result<usize, DecodeError>","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" This is not meant to be called directly; it is only for `Engine` implementors.\n See the other `decode*` functions on this trait.","sig":null,"attributes":[{"value":"/ This is not meant to be called directly; it is only for `Engine` implementors.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54674,"byte_end":54756,"line_start":72,"line_end":72,"column_start":5,"column_end":87}},{"value":"/ See the other `decode*` functions on this trait.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54761,"byte_end":54813,"line_start":73,"line_end":73,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54818,"byte_end":54821,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Decode `input` base64 bytes into the `output` buffer.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54826,"byte_end":54883,"line_start":75,"line_end":75,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54888,"byte_end":54891,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ `decode_estimate` is the result of [Engine::internal_decoded_len_estimate()], which is passed in to avoid","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":54896,"byte_end":55005,"line_start":77,"line_end":77,"column_start":5,"column_end":114}},{"value":"/ calculating it again (expensive on short inputs).`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55010,"byte_end":55064,"line_start":78,"line_end":78,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55069,"byte_end":55072,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Returns the number of bytes written to `output`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55077,"byte_end":55129,"line_start":80,"line_end":80,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55134,"byte_end":55137,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ Each complete 4-byte chunk of encoded data decodes to 3 bytes of decoded data, but this","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55142,"byte_end":55233,"line_start":82,"line_end":82,"column_start":5,"column_end":96}},{"value":"/ function must also handle the final possibly partial chunk.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55238,"byte_end":55301,"line_start":83,"line_end":83,"column_start":5,"column_end":68}},{"value":"/ If the input length is not a multiple of 4, or uses padding bytes to reach a multiple of 4,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55306,"byte_end":55401,"line_start":84,"line_end":84,"column_start":5,"column_end":100}},{"value":"/ the trailing 2 or 3 bytes must decode to 1 or 2 bytes, respectively, as per the","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55406,"byte_end":55489,"line_start":85,"line_end":85,"column_start":5,"column_end":88}},{"value":"/ [RFC](https://tools.ietf.org/html/rfc4648#section-3.5).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55494,"byte_end":55553,"line_start":86,"line_end":86,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55558,"byte_end":55561,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ Decoding must not write any bytes into the output slice other than the decoded data.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55566,"byte_end":55654,"line_start":88,"line_end":88,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55659,"byte_end":55662,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Non-canonical trailing bits in the final tokens or non-canonical padding must be reported as","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55667,"byte_end":55763,"line_start":90,"line_end":90,"column_start":5,"column_end":101}},{"value":"/ errors unless the engine is configured otherwise.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55768,"byte_end":55821,"line_start":91,"line_end":91,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55826,"byte_end":55829,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55834,"byte_end":55846,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55851,"byte_end":55854,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Panics if `output` is too small.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":55859,"byte_end":55895,"line_start":95,"line_end":95,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56139,"byte_end":56145,"line_start":105,"line_end":105,"column_start":8,"column_end":14},"name":"config","qualname":"::engine::Engine::config","value":"fn config<'_>(&'_ Self) -> &'_ Self::Config","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Returns the config for this engine.\n","sig":null,"attributes":[{"value":"/ Returns the config for this engine.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56092,"byte_end":56131,"line_start":104,"line_end":104,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":455},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56791,"byte_end":56797,"line_start":123,"line_end":123,"column_start":8,"column_end":14},"name":"encode","qualname":"::engine::Engine::encode","value":"fn encode<T, '_>(&'_ Self, T) -> String where T: AsRef<[u8]>","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64 using the provided `Engine`.\n Returns a `String`.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64 using the provided `Engine`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56176,"byte_end":56242,"line_start":107,"line_end":107,"column_start":5,"column_end":71}},{"value":"/ Returns a `String`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56247,"byte_end":56270,"line_start":108,"line_end":108,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56275,"byte_end":56278,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56283,"byte_end":56296,"line_start":110,"line_end":110,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56301,"byte_end":56304,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56309,"byte_end":56320,"line_start":112,"line_end":112,"column_start":5,"column_end":16}},{"value":"/ use base64::{Engine as _, engine::{self, general_purpose}, alphabet};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56325,"byte_end":56398,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56403,"byte_end":56406,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ let b64 = general_purpose::STANDARD.encode(b\"hello world~\");","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56411,"byte_end":56475,"line_start":115,"line_end":115,"column_start":5,"column_end":69}},{"value":"/ println!(\"{}\", b64);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56480,"byte_end":56504,"line_start":116,"line_end":116,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56509,"byte_end":56512,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ const CUSTOM_ENGINE: engine::GeneralPurpose =","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56517,"byte_end":56566,"line_start":118,"line_end":118,"column_start":5,"column_end":54}},{"value":"/     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56571,"byte_end":56653,"line_start":119,"line_end":119,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56658,"byte_end":56661,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let b64_url = CUSTOM_ENGINE.encode(b\"hello internet~\");","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56666,"byte_end":56725,"line_start":121,"line_end":121,"column_start":5,"column_end":64}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":56730,"byte_end":56783,"line_start":122,"line_end":122,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58039,"byte_end":58052,"line_start":154,"line_end":154,"column_start":8,"column_end":21},"name":"encode_string","qualname":"::engine::Engine::encode_string","value":"fn encode_string<T, '_, '_>(&'_ Self, T, &'_ mut String) where T: AsRef<[u8]>","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64 into a supplied `String`.\n Writes into the supplied `String`, which may allocate if its internal buffer isn't big enough.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64 into a supplied `String`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57197,"byte_end":57260,"line_start":133,"line_end":133,"column_start":5,"column_end":68}},{"value":"/ Writes into the supplied `String`, which may allocate if its internal buffer isn't big enough.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57265,"byte_end":57363,"line_start":134,"line_end":134,"column_start":5,"column_end":103}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57368,"byte_end":57371,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57376,"byte_end":57389,"line_start":136,"line_end":136,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57394,"byte_end":57397,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57402,"byte_end":57413,"line_start":138,"line_end":138,"column_start":5,"column_end":16}},{"value":"/ use base64::{Engine as _, engine::{self, general_purpose}, alphabet};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57418,"byte_end":57491,"line_start":139,"line_end":139,"column_start":5,"column_end":78}},{"value":"/ const CUSTOM_ENGINE: engine::GeneralPurpose =","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57496,"byte_end":57545,"line_start":140,"line_end":140,"column_start":5,"column_end":54}},{"value":"/     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::NO_PAD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57550,"byte_end":57632,"line_start":141,"line_end":141,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57637,"byte_end":57640,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57645,"byte_end":57660,"line_start":143,"line_end":143,"column_start":5,"column_end":20}},{"value":"/     let mut buf = String::new();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57665,"byte_end":57701,"line_start":144,"line_end":144,"column_start":5,"column_end":41}},{"value":"/     general_purpose::STANDARD.encode_string(b\"hello world~\", &mut buf);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57706,"byte_end":57781,"line_start":145,"line_end":145,"column_start":5,"column_end":80}},{"value":"/     println!(\"{}\", buf);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57786,"byte_end":57814,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57819,"byte_end":57822,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/     buf.clear();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57827,"byte_end":57847,"line_start":148,"line_end":148,"column_start":5,"column_end":25}},{"value":"/     CUSTOM_ENGINE.encode_string(b\"hello internet~\", &mut buf);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57852,"byte_end":57918,"line_start":149,"line_end":149,"column_start":5,"column_end":71}},{"value":"/     println!(\"{}\", buf);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57923,"byte_end":57951,"line_start":150,"line_end":150,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57956,"byte_end":57961,"line_start":151,"line_end":151,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57966,"byte_end":57973,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":57978,"byte_end":58031,"line_start":153,"line_end":153,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59292,"byte_end":59304,"line_start":188,"line_end":188,"column_start":8,"column_end":20},"name":"encode_slice","qualname":"::engine::Engine::encode_slice","value":"fn encode_slice<T, '_, '_>(&'_ Self, T, &'_ mut [u8])\n-> Result<usize, EncodeSliceError> where T: AsRef<[u8]>","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64 into a supplied slice.\n Writes into the supplied output buffer.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64 into a supplied slice.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58427,"byte_end":58487,"line_start":166,"line_end":166,"column_start":5,"column_end":65}},{"value":"/ Writes into the supplied output buffer.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58492,"byte_end":58535,"line_start":167,"line_end":167,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58540,"byte_end":58543,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ This is useful if you wish to avoid allocation entirely (e.g. encoding into a stack-resident","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58548,"byte_end":58644,"line_start":169,"line_end":169,"column_start":5,"column_end":101}},{"value":"/ or statically-allocated buffer).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58649,"byte_end":58685,"line_start":170,"line_end":170,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58690,"byte_end":58693,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58698,"byte_end":58711,"line_start":172,"line_end":172,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58716,"byte_end":58719,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58724,"byte_end":58735,"line_start":174,"line_end":174,"column_start":5,"column_end":16}},{"value":"/ use base64::{Engine as _, engine::general_purpose};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58740,"byte_end":58795,"line_start":175,"line_end":175,"column_start":5,"column_end":60}},{"value":"/ let s = b\"hello internet!\";","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58800,"byte_end":58831,"line_start":176,"line_end":176,"column_start":5,"column_end":36}},{"value":"/ let mut buf = Vec::new();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58836,"byte_end":58865,"line_start":177,"line_end":177,"column_start":5,"column_end":34}},{"value":"/ // make sure we'll have a slice big enough for base64 + padding","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58870,"byte_end":58937,"line_start":178,"line_end":178,"column_start":5,"column_end":72}},{"value":"/ buf.resize(s.len() * 4 / 3 + 4, 0);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58942,"byte_end":58981,"line_start":179,"line_end":179,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58986,"byte_end":58989,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ let bytes_written = general_purpose::STANDARD.encode_slice(s, &mut buf).unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":58994,"byte_end":59079,"line_start":181,"line_end":181,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59084,"byte_end":59087,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ // shorten our vec down to just what was written","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59092,"byte_end":59144,"line_start":183,"line_end":183,"column_start":5,"column_end":57}},{"value":"/ buf.truncate(bytes_written);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59149,"byte_end":59181,"line_start":184,"line_end":184,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59186,"byte_end":59189,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s, general_purpose::STANDARD.decode(&buf).unwrap().as_slice());","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59194,"byte_end":59272,"line_start":186,"line_end":186,"column_start":5,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59277,"byte_end":59284,"line_start":187,"line_end":187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60840,"byte_end":60846,"line_start":234,"line_end":234,"column_start":8,"column_end":14},"name":"decode","qualname":"::engine::Engine::decode","value":"fn decode<T, '_>(&'_ Self, T) -> Result<Vec<u8>, DecodeError> where\nT: AsRef<[u8]>","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Decode from string reference as octets using the specified [Engine].\n Returns a `Result` containing a `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Decode from string reference as octets using the specified [Engine].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59921,"byte_end":59993,"line_start":209,"line_end":209,"column_start":5,"column_end":77}},{"value":"/ Returns a `Result` containing a `Vec<u8>`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":59998,"byte_end":60044,"line_start":210,"line_end":210,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60049,"byte_end":60052,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60057,"byte_end":60070,"line_start":212,"line_end":212,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60075,"byte_end":60078,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60083,"byte_end":60094,"line_start":214,"line_end":214,"column_start":5,"column_end":16}},{"value":"/ use base64::{Engine as _, alphabet, engine::{self, general_purpose}};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60099,"byte_end":60172,"line_start":215,"line_end":215,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60177,"byte_end":60180,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ let bytes = general_purpose::STANDARD","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60185,"byte_end":60226,"line_start":217,"line_end":217,"column_start":5,"column_end":46}},{"value":"/     .decode(\"aGVsbG8gd29ybGR+Cg==\").unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60231,"byte_end":60280,"line_start":218,"line_end":218,"column_start":5,"column_end":54}},{"value":"/ println!(\"{:?}\", bytes);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60285,"byte_end":60313,"line_start":219,"line_end":219,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60318,"byte_end":60321,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ // custom engine setup","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60326,"byte_end":60352,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/ let bytes_url = engine::GeneralPurpose::new(","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60357,"byte_end":60405,"line_start":222,"line_end":222,"column_start":5,"column_end":53}},{"value":"/              &alphabet::URL_SAFE,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60410,"byte_end":60447,"line_start":223,"line_end":223,"column_start":5,"column_end":42}},{"value":"/              general_purpose::NO_PAD)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60452,"byte_end":60493,"line_start":224,"line_end":224,"column_start":5,"column_end":46}},{"value":"/     .decode(\"aGVsbG8gaW50ZXJuZXR-Cg\").unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60498,"byte_end":60549,"line_start":225,"line_end":225,"column_start":5,"column_end":56}},{"value":"/ println!(\"{:?}\", bytes_url);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60554,"byte_end":60586,"line_start":226,"line_end":226,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60591,"byte_end":60598,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60603,"byte_end":60606,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60611,"byte_end":60623,"line_start":229,"line_end":229,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60628,"byte_end":60631,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Panics if decoded length estimation overflows.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60636,"byte_end":60686,"line_start":231,"line_end":231,"column_start":5,"column_end":55}},{"value":"/ This would happen for sizes within a few bytes of the maximum value of `usize`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60691,"byte_end":60774,"line_start":232,"line_end":232,"column_start":5,"column_end":88}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":60779,"byte_end":60832,"line_start":233,"line_end":233,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62549,"byte_end":62559,"line_start":281,"line_end":281,"column_start":8,"column_end":18},"name":"decode_vec","qualname":"::engine::Engine::decode_vec","value":"fn decode_vec<T, '_, '_>(&'_ Self, T, &'_ mut Vec<u8>)\n-> Result<(), DecodeError> where T: AsRef<[u8]>","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Decode from string reference as octets.\n Writes into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.\n Returns a `Result` containing an empty tuple, aka `()`.","sig":null,"attributes":[{"value":"/ Decode from string reference as octets.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61261,"byte_end":61304,"line_start":246,"line_end":246,"column_start":5,"column_end":48}},{"value":"/ Writes into the supplied `Vec`, which may allocate if its internal buffer isn't big enough.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61309,"byte_end":61404,"line_start":247,"line_end":247,"column_start":5,"column_end":100}},{"value":"/ Returns a `Result` containing an empty tuple, aka `()`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61409,"byte_end":61468,"line_start":248,"line_end":248,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61473,"byte_end":61476,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61481,"byte_end":61494,"line_start":250,"line_end":250,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61499,"byte_end":61502,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61507,"byte_end":61518,"line_start":252,"line_end":252,"column_start":5,"column_end":16}},{"value":"/ use base64::{Engine as _, alphabet, engine::{self, general_purpose}};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61523,"byte_end":61596,"line_start":253,"line_end":253,"column_start":5,"column_end":78}},{"value":"/ const CUSTOM_ENGINE: engine::GeneralPurpose =","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61601,"byte_end":61650,"line_start":254,"line_end":254,"column_start":5,"column_end":54}},{"value":"/     engine::GeneralPurpose::new(&alphabet::URL_SAFE, general_purpose::PAD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61655,"byte_end":61734,"line_start":255,"line_end":255,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61739,"byte_end":61742,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ fn main() {","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61747,"byte_end":61762,"line_start":257,"line_end":257,"column_start":5,"column_end":20}},{"value":"/     use base64::Engine;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61767,"byte_end":61794,"line_start":258,"line_end":258,"column_start":5,"column_end":32}},{"value":"/     let mut buffer = Vec::<u8>::new();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61799,"byte_end":61841,"line_start":259,"line_end":259,"column_start":5,"column_end":47}},{"value":"/     // with the default engine","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61846,"byte_end":61880,"line_start":260,"line_end":260,"column_start":5,"column_end":39}},{"value":"/     general_purpose::STANDARD","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61885,"byte_end":61918,"line_start":261,"line_end":261,"column_start":5,"column_end":38}},{"value":"/         .decode_vec(\"aGVsbG8gd29ybGR+Cg==\", &mut buffer,).unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61923,"byte_end":61994,"line_start":262,"line_end":262,"column_start":5,"column_end":76}},{"value":"/     println!(\"{:?}\", buffer);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":61999,"byte_end":62032,"line_start":263,"line_end":263,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62037,"byte_end":62040,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/     buffer.clear();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62045,"byte_end":62068,"line_start":265,"line_end":265,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62073,"byte_end":62076,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/     // with a custom engine","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62081,"byte_end":62112,"line_start":267,"line_end":267,"column_start":5,"column_end":36}},{"value":"/     CUSTOM_ENGINE.decode_vec(","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62117,"byte_end":62150,"line_start":268,"line_end":268,"column_start":5,"column_end":38}},{"value":"/         \"aGVsbG8gaW50ZXJuZXR-Cg==\",","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62155,"byte_end":62194,"line_start":269,"line_end":269,"column_start":5,"column_end":44}},{"value":"/         &mut buffer,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62199,"byte_end":62223,"line_start":270,"line_end":270,"column_start":5,"column_end":29}},{"value":"/     ).unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62228,"byte_end":62247,"line_start":271,"line_end":271,"column_start":5,"column_end":24}},{"value":"/     println!(\"{:?}\", buffer);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62252,"byte_end":62285,"line_start":272,"line_end":272,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62290,"byte_end":62295,"line_start":273,"line_end":273,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62300,"byte_end":62307,"line_start":274,"line_end":274,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62312,"byte_end":62315,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62320,"byte_end":62332,"line_start":276,"line_end":276,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62337,"byte_end":62340,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Panics if decoded length estimation overflows.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62345,"byte_end":62395,"line_start":278,"line_end":278,"column_start":5,"column_end":55}},{"value":"/ This would happen for sizes within a few bytes of the maximum value of `usize`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62400,"byte_end":62483,"line_start":279,"line_end":279,"column_start":5,"column_end":88}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":62488,"byte_end":62541,"line_start":280,"line_end":280,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64014,"byte_end":64026,"line_start":320,"line_end":320,"column_start":8,"column_end":20},"name":"decode_slice","qualname":"::engine::Engine::decode_slice","value":"fn decode_slice<T, '_, '_>(&'_ Self, T, &'_ mut [u8])\n-> Result<usize, DecodeSliceError> where T: AsRef<[u8]>","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[{"value":"/ Decode the input into the provided output slice.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63343,"byte_end":63395,"line_start":305,"line_end":305,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63400,"byte_end":63403,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ Returns an error if `output` is smaller than the estimated decoded length.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63408,"byte_end":63486,"line_start":307,"line_end":307,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63491,"byte_end":63494,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63499,"byte_end":63598,"line_start":309,"line_end":309,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63603,"byte_end":63606,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ See [crate::decoded_len_estimate] for calculating buffer sizes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63611,"byte_end":63678,"line_start":311,"line_end":311,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63683,"byte_end":63686,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ See [Engine::decode_slice_unchecked] for a version that panics instead of returning an error","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63691,"byte_end":63787,"line_start":313,"line_end":313,"column_start":5,"column_end":101}},{"value":"/ if the output buffer is too small.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63792,"byte_end":63830,"line_start":314,"line_end":314,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63835,"byte_end":63838,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63843,"byte_end":63855,"line_start":316,"line_end":316,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63860,"byte_end":63863,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Panics if decoded length estimation overflows.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63868,"byte_end":63918,"line_start":318,"line_end":318,"column_start":5,"column_end":55}},{"value":"/ This would happen for sizes within a few bytes of the maximum value of `usize`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":63923,"byte_end":64006,"line_start":319,"line_end":319,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65167,"byte_end":65189,"line_start":351,"line_end":351,"column_start":8,"column_end":30},"name":"decode_slice_unchecked","qualname":"::engine::Engine::decode_slice_unchecked","value":"fn decode_slice_unchecked<T, '_, '_>(&'_ Self, T, &'_ mut [u8])\n-> Result<usize, DecodeError> where T: AsRef<[u8]>","parent":{"krate":0,"index":448},"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[{"value":"/ Decode the input into the provided output slice.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64508,"byte_end":64560,"line_start":336,"line_end":336,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64565,"byte_end":64568,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ This will not write any bytes past exactly what is decoded (no stray garbage bytes at the end).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64573,"byte_end":64672,"line_start":338,"line_end":338,"column_start":5,"column_end":104}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64677,"byte_end":64680,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ See [crate::decoded_len_estimate] for calculating buffer sizes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64685,"byte_end":64752,"line_start":340,"line_end":340,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64757,"byte_end":64760,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ See [Engine::decode_slice] for a version that returns an error instead of panicking if the output","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64765,"byte_end":64866,"line_start":342,"line_end":342,"column_start":5,"column_end":106}},{"value":"/ buffer is too small.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64871,"byte_end":64895,"line_start":343,"line_end":343,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64900,"byte_end":64903,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64908,"byte_end":64920,"line_start":345,"line_end":345,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64925,"byte_end":64928,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ Panics if decoded length estimation overflows.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64933,"byte_end":64983,"line_start":347,"line_end":347,"column_start":5,"column_end":55}},{"value":"/ This would happen for sizes within a few bytes of the maximum value of `usize`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":64988,"byte_end":65071,"line_start":348,"line_end":348,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65076,"byte_end":65079,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Panics if the provided output buffer is too small for the decoded data.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65084,"byte_end":65159,"line_start":350,"line_end":350,"column_start":5,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":470},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65585,"byte_end":65591,"line_start":367,"line_end":367,"column_start":11,"column_end":17},"name":"Config","qualname":"::engine::Config","value":"Config","parent":null,"children":[{"krate":0,"index":471}],"decl_id":null,"docs":" The minimal level of configuration that engines must support.\n","sig":null,"attributes":[{"value":"/ The minimal level of configuration that engines must support.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65509,"byte_end":65574,"line_start":366,"line_end":366,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66181,"byte_end":66195,"line_start":376,"line_end":376,"column_start":8,"column_end":22},"name":"encode_padding","qualname":"::engine::Config::encode_padding","value":"fn encode_padding<'_>(&'_ Self) -> bool","parent":{"krate":0,"index":470},"children":[],"decl_id":null,"docs":" Returns `true` if padding should be added after the encoded output.","sig":null,"attributes":[{"value":"/ Returns `true` if padding should be added after the encoded output.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65598,"byte_end":65669,"line_start":368,"line_end":368,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65674,"byte_end":65677,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ Padding is added outside the engine's encode() since the engine may be used","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65682,"byte_end":65761,"line_start":370,"line_end":370,"column_start":5,"column_end":84}},{"value":"/ to encode only a chunk of the overall output, so it can't always know when","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65766,"byte_end":65844,"line_start":371,"line_end":371,"column_start":5,"column_end":83}},{"value":"/ the output is \"done\" and would therefore need padding (if configured).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":65849,"byte_end":65923,"line_start":372,"line_end":372,"column_start":5,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":472},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66505,"byte_end":66519,"line_start":384,"line_end":384,"column_start":11,"column_end":25},"name":"DecodeEstimate","qualname":"::engine::DecodeEstimate","value":"DecodeEstimate","parent":null,"children":[{"krate":0,"index":473}],"decl_id":null,"docs":" The decode estimate used by an engine implementation. Users do not need to interact with this;\n it is only for engine implementors.","sig":null,"attributes":[{"value":"/ The decode estimate used by an engine implementation. Users do not need to interact with this;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66215,"byte_end":66313,"line_start":379,"line_end":379,"column_start":1,"column_end":99}},{"value":"/ it is only for engine implementors.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66314,"byte_end":66353,"line_start":380,"line_end":380,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66354,"byte_end":66357,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"/ Implementors may store relevant data here when constructing this to avoid having to calculate","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66358,"byte_end":66455,"line_start":382,"line_end":382,"column_start":1,"column_end":98}},{"value":"/ them again during actual decoding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66456,"byte_end":66494,"line_start":383,"line_end":383,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67046,"byte_end":67066,"line_start":395,"line_end":395,"column_start":8,"column_end":28},"name":"decoded_len_estimate","qualname":"::engine::DecodeEstimate::decoded_len_estimate","value":"fn decoded_len_estimate<'_>(&'_ Self) -> usize","parent":{"krate":0,"index":472},"children":[],"decl_id":null,"docs":" Returns a conservative (err on the side of too big) estimate of the decoded length to use\n for pre-allocating buffers, etc.","sig":null,"attributes":[{"value":"/ Returns a conservative (err on the side of too big) estimate of the decoded length to use","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66526,"byte_end":66619,"line_start":385,"line_end":385,"column_start":5,"column_end":98}},{"value":"/ for pre-allocating buffers, etc.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66624,"byte_end":66660,"line_start":386,"line_end":386,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66665,"byte_end":66668,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ The estimate must be no larger than the next largest complete triple of decoded bytes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66673,"byte_end":66763,"line_start":388,"line_end":388,"column_start":5,"column_end":95}},{"value":"/ That is, the final quad of tokens to decode may be assumed to be complete with no padding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66768,"byte_end":66862,"line_start":389,"line_end":389,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66867,"byte_end":66870,"line_start":390,"line_end":390,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66875,"byte_end":66887,"line_start":391,"line_end":391,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66892,"byte_end":66895,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ Panics if decoded length estimation overflows.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66900,"byte_end":66950,"line_start":393,"line_end":393,"column_start":5,"column_end":55}},{"value":"/ This would happen for sizes within a few bytes of the maximum value of `usize`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":66955,"byte_end":67038,"line_start":394,"line_end":394,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":660},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67454,"byte_end":67465,"line_start":405,"line_end":405,"column_start":5,"column_end":16},"name":"Indifferent","qualname":"::engine::DecodePaddingMode::Indifferent","value":"DecodePaddingMode::Indifferent","parent":{"krate":0,"index":659},"children":[],"decl_id":null,"docs":" Canonical padding is allowed, but any fewer padding bytes than that is also allowed.\n","sig":null,"attributes":[{"value":"/ Canonical padding is allowed, but any fewer padding bytes than that is also allowed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67361,"byte_end":67449,"line_start":404,"line_end":404,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":662},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67560,"byte_end":67576,"line_start":407,"line_end":407,"column_start":5,"column_end":21},"name":"RequireCanonical","qualname":"::engine::DecodePaddingMode::RequireCanonical","value":"DecodePaddingMode::RequireCanonical","parent":{"krate":0,"index":659},"children":[],"decl_id":null,"docs":" Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).\n","sig":null,"attributes":[{"value":"/ Padding must be canonical (0, 1, or 2 `=` as needed to produce a 4 byte suffix).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67471,"byte_end":67555,"line_start":406,"line_end":406,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":664},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67681,"byte_end":67692,"line_start":409,"line_end":409,"column_start":5,"column_end":16},"name":"RequireNone","qualname":"::engine::DecodePaddingMode::RequireNone","value":"DecodePaddingMode::RequireNone","parent":{"krate":0,"index":659},"children":[],"decl_id":null,"docs":" Padding must be absent -- for when you want predictable padding, without any wasted bytes.\n","sig":null,"attributes":[{"value":"/ Padding must be absent -- for when you want predictable padding, without any wasted bytes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67582,"byte_end":67676,"line_start":408,"line_end":408,"column_start":5,"column_end":99}}]},{"kind":"Enum","id":{"krate":0,"index":659},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67337,"byte_end":67354,"line_start":403,"line_end":403,"column_start":10,"column_end":27},"name":"DecodePaddingMode","qualname":"::engine::DecodePaddingMode","value":"enum DecodePaddingMode { Indifferent, RequireCanonical, RequireNone, }","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":664}],"decl_id":null,"docs":" Controls how pad bytes are handled when decoding.","sig":null,"attributes":[{"value":"/ Controls how pad bytes are handled when decoding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67087,"byte_end":67140,"line_start":398,"line_end":398,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67141,"byte_end":67144,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"/ Each [Engine] must support at least the behavior indicated by","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67145,"byte_end":67210,"line_start":400,"line_end":400,"column_start":1,"column_end":66}},{"value":"/ [DecodePaddingMode::RequireCanonical], and may support other modes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":67211,"byte_end":67282,"line_start":401,"line_end":401,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":477},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"alphabet","qualname":"::alphabet","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","parent":null,"children":[{"krate":0,"index":478},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":677},{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":488},{"krate":0,"index":492},{"krate":0,"index":692},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503}],"decl_id":null,"docs":" Provides [Alphabet] and constants for alphabets commonly used in the wild.\n","sig":null,"attributes":[{"value":"/ Provides [Alphabet] and constants for alphabets commonly used in the wild.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102383,"byte_end":102461,"line_start":1,"line_end":1,"column_start":1,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":677},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103121,"byte_end":103129,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"Alphabet","qualname":"::alphabet::Alphabet","value":"Alphabet {  }","parent":null,"children":[{"krate":0,"index":678}],"decl_id":null,"docs":" An alphabet defines the 64 ASCII characters (symbols) used for base64.","sig":null,"attributes":[{"value":"/ An alphabet defines the 64 ASCII characters (symbols) used for base64.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102585,"byte_end":102659,"line_start":10,"line_end":10,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102660,"byte_end":102663,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Common alphabets are provided as constants, and custom alphabets","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102664,"byte_end":102732,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ can be made via `from_str` or the `TryFrom<str>` implementation.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102733,"byte_end":102801,"line_start":13,"line_end":13,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102802,"byte_end":102805,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102806,"byte_end":102813,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ let custom = base64::alphabet::Alphabet::new(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\").unwrap();","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102814,"byte_end":102940,"line_start":16,"line_end":16,"column_start":1,"column_end":127}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102941,"byte_end":102944,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ let engine = base64::engine::GeneralPurpose::new(","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102945,"byte_end":102998,"line_start":18,"line_end":18,"column_start":1,"column_end":54}},{"value":"/     &custom,","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":102999,"byte_end":103015,"line_start":19,"line_end":19,"column_start":1,"column_end":17}},{"value":"/     base64::engine::general_purpose::PAD);","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103016,"byte_end":103062,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103063,"byte_end":103070,"line_start":21,"line_end":21,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103848,"byte_end":103851,"line_start":47,"line_end":47,"column_start":18,"column_end":21},"name":"new","qualname":"<Alphabet>::new","value":"const fn new<'_>(&'_ str) -> Result<Self, ParseAlphabetError>","parent":null,"children":[],"decl_id":null,"docs":" Create an `Alphabet` from a string of 64 unique printable ASCII bytes.","sig":null,"attributes":[{"value":"/ Create an `Alphabet` from a string of 64 unique printable ASCII bytes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103685,"byte_end":103759,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103764,"byte_end":103767,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ The `=` byte is not allowed as it is used for padding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103772,"byte_end":103830,"line_start":46,"line_end":46,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105608,"byte_end":105616,"line_start":99,"line_end":99,"column_start":8,"column_end":16},"name":"try_from","qualname":"<Alphabet as std::convert::TryFrom>::try_from","value":"fn try_from<'_>(&'_ str) -> Result<Self, Self::Error>","parent":{"krate":2,"index":3176},"children":[],"decl_id":{"krate":2,"index":3179},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":693},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105868,"byte_end":105881,"line_start":108,"line_end":108,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::alphabet::ParseAlphabetError::InvalidLength","value":"ParseAlphabetError::InvalidLength","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" Alphabets must be 64 ASCII bytes\n","sig":null,"attributes":[{"value":"/ Alphabets must be 64 ASCII bytes","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105827,"byte_end":105863,"line_start":107,"line_end":107,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":695},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105920,"byte_end":105934,"line_start":110,"line_end":110,"column_start":5,"column_end":19},"name":"DuplicatedByte","qualname":"::alphabet::ParseAlphabetError::DuplicatedByte","value":"ParseAlphabetError::DuplicatedByte(u8)","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" All bytes must be unique\n","sig":null,"attributes":[{"value":"/ All bytes must be unique","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105887,"byte_end":105915,"line_start":109,"line_end":109,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":697},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105935,"byte_end":105937,"line_start":110,"line_end":110,"column_start":20,"column_end":22},"name":"0","qualname":"::alphabet::ParseAlphabetError::DuplicatedByte::0","value":"u8","parent":{"krate":0,"index":695},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":698},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106008,"byte_end":106023,"line_start":112,"line_end":112,"column_start":5,"column_end":20},"name":"UnprintableByte","qualname":"::alphabet::ParseAlphabetError::UnprintableByte","value":"ParseAlphabetError::UnprintableByte(u8)","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" All bytes must be printable (in the range `[32, 126]`).\n","sig":null,"attributes":[{"value":"/ All bytes must be printable (in the range `[32, 126]`).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105944,"byte_end":106003,"line_start":111,"line_end":111,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":700},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106024,"byte_end":106026,"line_start":112,"line_end":112,"column_start":21,"column_end":23},"name":"0","qualname":"::alphabet::ParseAlphabetError::UnprintableByte::0","value":"u8","parent":{"krate":0,"index":698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":701},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106060,"byte_end":106072,"line_start":114,"line_end":114,"column_start":5,"column_end":17},"name":"ReservedByte","qualname":"::alphabet::ParseAlphabetError::ReservedByte","value":"ParseAlphabetError::ReservedByte(u8)","parent":{"krate":0,"index":692},"children":[],"decl_id":null,"docs":" `=` cannot be used\n","sig":null,"attributes":[{"value":"/ `=` cannot be used","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106033,"byte_end":106055,"line_start":113,"line_end":113,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":703},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106073,"byte_end":106075,"line_start":114,"line_end":114,"column_start":18,"column_end":20},"name":"0","qualname":"::alphabet::ParseAlphabetError::ReservedByte::0","value":"u8","parent":{"krate":0,"index":701},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":692},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105802,"byte_end":105820,"line_start":106,"line_end":106,"column_start":10,"column_end":28},"name":"ParseAlphabetError","qualname":"::alphabet::ParseAlphabetError","value":"enum ParseAlphabetError {\n    InvalidLength,\n    DuplicatedByte(u8),\n    UnprintableByte(u8),\n    ReservedByte(u8),\n}","parent":null,"children":[{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":698},{"krate":0,"index":701}],"decl_id":null,"docs":" Possible errors when constructing an [Alphabet] from a `str`.\n","sig":null,"attributes":[{"value":"/ Possible errors when constructing an [Alphabet] from a `str`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105695,"byte_end":105760,"line_start":104,"line_end":104,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106131,"byte_end":106134,"line_start":118,"line_end":118,"column_start":8,"column_end":11},"name":"fmt","qualname":"<ParseAlphabetError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10302},"children":[],"decl_id":{"krate":2,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":498},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106758,"byte_end":106766,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"name":"STANDARD","qualname":"::alphabet::STANDARD","value":"Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The standard alphabet (uses `+` and `/`).","sig":null,"attributes":[{"value":"/ The standard alphabet (uses `+` and `/`).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106631,"byte_end":106676,"line_start":131,"line_end":131,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106677,"byte_end":106680,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-3).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106681,"byte_end":106747,"line_start":133,"line_end":133,"column_start":1,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":499},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107012,"byte_end":107020,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"name":"URL_SAFE","qualname":"::alphabet::URL_SAFE","value":"Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The URL safe alphabet (uses `-` and `_`).","sig":null,"attributes":[{"value":"/ The URL safe alphabet (uses `-` and `_`).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106885,"byte_end":106930,"line_start":138,"line_end":138,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106931,"byte_end":106934,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ See [RFC 3548](https://tools.ietf.org/html/rfc3548#section-4).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106935,"byte_end":107001,"line_start":140,"line_end":140,"column_start":1,"column_end":67}}]},{"kind":"Const","id":{"krate":0,"index":500},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107321,"byte_end":107326,"line_start":148,"line_end":148,"column_start":11,"column_end":16},"name":"CRYPT","qualname":"::alphabet::CRYPT","value":"Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The `crypt(3)` alphabet (uses `.` and `/` as the first two values).","sig":null,"attributes":[{"value":"/ The `crypt(3)` alphabet (uses `.` and `/` as the first two values).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107139,"byte_end":107210,"line_start":145,"line_end":145,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107211,"byte_end":107214,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ Not standardized, but folk wisdom on the net asserts that this alphabet is what crypt uses.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107215,"byte_end":107310,"line_start":147,"line_end":147,"column_start":1,"column_end":96}}]},{"kind":"Const","id":{"krate":0,"index":501},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107480,"byte_end":107486,"line_start":153,"line_end":153,"column_start":11,"column_end":17},"name":"BCRYPT","qualname":"::alphabet::BCRYPT","value":"Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The bcrypt alphabet.\n","sig":null,"attributes":[{"value":"/ The bcrypt alphabet.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107445,"byte_end":107469,"line_start":152,"line_end":152,"column_start":1,"column_end":25}}]},{"kind":"Const","id":{"krate":0,"index":502},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107754,"byte_end":107764,"line_start":160,"line_end":160,"column_start":11,"column_end":21},"name":"IMAP_MUTF7","qualname":"::alphabet::IMAP_MUTF7","value":"Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The alphabet used in IMAP-modified UTF-7 (uses `+` and `,`).","sig":null,"attributes":[{"value":"/ The alphabet used in IMAP-modified UTF-7 (uses `+` and `,`).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107605,"byte_end":107669,"line_start":157,"line_end":157,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107670,"byte_end":107673,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ See [RFC 3501](https://tools.ietf.org/html/rfc3501#section-5.1.3)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107674,"byte_end":107743,"line_start":159,"line_end":159,"column_start":1,"column_end":70}}]},{"kind":"Const","id":{"krate":0,"index":503},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":108031,"byte_end":108038,"line_start":167,"line_end":167,"column_start":11,"column_end":18},"name":"BIN_HEX","qualname":"::alphabet::BIN_HEX","value":"Alphabet","parent":null,"children":[],"decl_id":null,"docs":" The alphabet used in BinHex 4.0 files.","sig":null,"attributes":[{"value":"/ The alphabet used in BinHex 4.0 files.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107883,"byte_end":107925,"line_start":164,"line_end":164,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107926,"byte_end":107929,"line_start":165,"line_end":165,"column_start":1,"column_end":4}},{"value":"/ See [BinHex 4.0 Definition](http://files.stairways.com/other/binhex-40-specs-info.txt)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":107930,"byte_end":108020,"line_start":166,"line_end":166,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":527},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110638,"byte_end":110644,"line_start":18,"line_end":18,"column_start":8,"column_end":14},"name":"encode","qualname":"::encode::encode","value":"fn encode<T>(T) -> String where T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64 using the [`STANDARD` engine](STANDARD).","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64 using the [`STANDARD` engine](STANDARD).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110390,"byte_end":110468,"line_start":12,"line_end":12,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110469,"byte_end":110472,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ See [Engine::encode].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110473,"byte_end":110498,"line_start":14,"line_end":14,"column_start":1,"column_end":26}},{"value":"allow(unused)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110499,"byte_end":110515,"line_start":15,"line_end":15,"column_start":1,"column_end":17}},{"value":"deprecated(since = \"0.21.0\", note = \"Use Engine::encode\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110516,"byte_end":110576,"line_start":16,"line_end":16,"column_start":1,"column_end":61}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110577,"byte_end":110630,"line_start":17,"line_end":17,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":529},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110968,"byte_end":110981,"line_start":28,"line_end":28,"column_start":8,"column_end":21},"name":"encode_engine","qualname":"::encode::encode_engine","value":"fn encode_engine<E, T, '_>(T, &'_ E) -> String where E: Engine, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64 using the provided `Engine` into a new `String`.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64 using the provided `Engine` into a new `String`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110713,"byte_end":110798,"line_start":22,"line_end":22,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110799,"byte_end":110802,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ See [Engine::encode].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110803,"byte_end":110828,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"allow(unused)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110829,"byte_end":110845,"line_start":25,"line_end":25,"column_start":1,"column_end":17}},{"value":"deprecated(since = \"0.21.0\", note = \"Use Engine::encode\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110846,"byte_end":110906,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":110907,"byte_end":110960,"line_start":27,"line_end":27,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":532},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111317,"byte_end":111337,"line_start":38,"line_end":38,"column_start":8,"column_end":28},"name":"encode_engine_string","qualname":"::encode::encode_engine_string","value":"fn encode_engine_string<E, T, '_, '_>(T, &'_ mut String, &'_ E) where\nE: Engine, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":"Encode arbitrary octets as base64 into a supplied `String`.","sig":null,"attributes":[{"value":"/Encode arbitrary octets as base64 into a supplied `String`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111071,"byte_end":111133,"line_start":32,"line_end":32,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111134,"byte_end":111137,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ See [Engine::encode_string].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111138,"byte_end":111170,"line_start":34,"line_end":34,"column_start":1,"column_end":33}},{"value":"allow(unused)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111171,"byte_end":111187,"line_start":35,"line_end":35,"column_start":1,"column_end":17}},{"value":"deprecated(since = \"0.21.0\", note = \"Use Engine::encode_string\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111188,"byte_end":111255,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111256,"byte_end":111309,"line_start":37,"line_end":37,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":535},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111664,"byte_end":111683,"line_start":51,"line_end":51,"column_start":8,"column_end":27},"name":"encode_engine_slice","qualname":"::encode::encode_engine_slice","value":"fn encode_engine_slice<E, T, '_, '_>(T, &'_ mut [u8], &'_ E)\n-> Result<usize, EncodeSliceError> where E: Engine, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Encode arbitrary octets as base64 into a supplied slice.","sig":null,"attributes":[{"value":"/ Encode arbitrary octets as base64 into a supplied slice.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111476,"byte_end":111536,"line_start":46,"line_end":46,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111537,"byte_end":111540,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ See [Engine::encode_slice].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111541,"byte_end":111572,"line_start":48,"line_end":48,"column_start":1,"column_end":32}},{"value":"allow(unused)","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111573,"byte_end":111589,"line_start":49,"line_end":49,"column_start":1,"column_end":17}},{"value":"deprecated(since = \"0.21.0\", note = \"Use Engine::encode_slice\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":111590,"byte_end":111656,"line_start":50,"line_end":50,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":540},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":113165,"byte_end":113176,"line_start":97,"line_end":97,"column_start":8,"column_end":19},"name":"encoded_len","qualname":"::encode::encoded_len","value":"fn encoded_len(usize, bool) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Calculate the base64 encoded length for a given input length, optionally including any\n appropriate padding bytes.","sig":null,"attributes":[{"value":"/ Calculate the base64 encoded length for a given input length, optionally including any","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":112861,"byte_end":112951,"line_start":92,"line_end":92,"column_start":1,"column_end":91}},{"value":"/ appropriate padding bytes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":112952,"byte_end":112982,"line_start":93,"line_end":93,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":112983,"byte_end":112986,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ Returns `None` if the encoded length can't be represented in `usize`. This will happen for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":112987,"byte_end":113081,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ input lengths in approximately the top quarter of the range of `usize`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":113082,"byte_end":113157,"line_start":96,"line_end":96,"column_start":1,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":714},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114526,"byte_end":114545,"line_start":140,"line_end":140,"column_start":5,"column_end":24},"name":"OutputSliceTooSmall","qualname":"::encode::EncodeSliceError::OutputSliceTooSmall","value":"EncodeSliceError::OutputSliceTooSmall","parent":{"krate":0,"index":713},"children":[],"decl_id":null,"docs":" The provided slice is too small.\n","sig":null,"attributes":[{"value":"/ The provided slice is too small.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114485,"byte_end":114521,"line_start":139,"line_end":139,"column_start":5,"column_end":41}}]},{"kind":"Enum","id":{"krate":0,"index":713},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114462,"byte_end":114478,"line_start":138,"line_end":138,"column_start":10,"column_end":26},"name":"EncodeSliceError","qualname":"::encode::EncodeSliceError","value":"enum EncodeSliceError { OutputSliceTooSmall, }","parent":null,"children":[{"krate":0,"index":714}],"decl_id":null,"docs":" Errors that can occur while encoding into a slice.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while encoding into a slice.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114359,"byte_end":114413,"line_start":136,"line_end":136,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":545},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114598,"byte_end":114601,"line_start":144,"line_end":144,"column_start":8,"column_end":11},"name":"fmt","qualname":"<EncodeSliceError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10302},"children":[],"decl_id":{"krate":2,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114855,"byte_end":114860,"line_start":153,"line_end":153,"column_start":8,"column_end":13},"name":"cause","qualname":"<EncodeSliceError as std::error::Error>::cause","value":"fn cause<'_>(&'_ Self) -> Option<&'_ dyn error::Error>","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2580},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":727},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126148,"byte_end":126159,"line_start":13,"line_end":13,"column_start":5,"column_end":16},"name":"InvalidByte","qualname":"::decode::DecodeError::InvalidByte","value":"DecodeError::InvalidByte(usize, u8)","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" An invalid byte was found in the input. The offset and offending byte are provided.\n Padding characters (`=`) interspersed in the encoded form will be treated as invalid bytes.\n","sig":null,"attributes":[{"value":"/ An invalid byte was found in the input. The offset and offending byte are provided.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":125956,"byte_end":126043,"line_start":11,"line_end":11,"column_start":5,"column_end":92}},{"value":"/ Padding characters (`=`) interspersed in the encoded form will be treated as invalid bytes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126048,"byte_end":126143,"line_start":12,"line_end":12,"column_start":5,"column_end":100}}]},{"kind":"Field","id":{"krate":0,"index":729},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126160,"byte_end":126165,"line_start":13,"line_end":13,"column_start":17,"column_end":22},"name":"0","qualname":"::decode::DecodeError::InvalidByte::0","value":"usize","parent":{"krate":0,"index":727},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":730},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126167,"byte_end":126169,"line_start":13,"line_end":13,"column_start":24,"column_end":26},"name":"1","qualname":"::decode::DecodeError::InvalidByte::1","value":"u8","parent":{"krate":0,"index":727},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":731},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126592,"byte_end":126605,"line_start":19,"line_end":19,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::decode::DecodeError::InvalidLength","value":"DecodeError::InvalidLength","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" The length of the input is invalid.\n A typical cause of this is stray trailing whitespace or other separator bytes.\n In the case where excess trailing bytes have produced an invalid length *and* the last byte\n is also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`\n will be emitted instead of `InvalidLength` to make the issue easier to debug.\n","sig":null,"attributes":[{"value":"/ The length of the input is invalid.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126176,"byte_end":126215,"line_start":14,"line_end":14,"column_start":5,"column_end":44}},{"value":"/ A typical cause of this is stray trailing whitespace or other separator bytes.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126220,"byte_end":126302,"line_start":15,"line_end":15,"column_start":5,"column_end":87}},{"value":"/ In the case where excess trailing bytes have produced an invalid length *and* the last byte","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126307,"byte_end":126402,"line_start":16,"line_end":16,"column_start":5,"column_end":100}},{"value":"/ is also an invalid base64 symbol (as would be the case for whitespace, etc), `InvalidByte`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126407,"byte_end":126501,"line_start":17,"line_end":17,"column_start":5,"column_end":99}},{"value":"/ will be emitted instead of `InvalidLength` to make the issue easier to debug.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126506,"byte_end":126587,"line_start":18,"line_end":18,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":733},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126950,"byte_end":126967,"line_start":24,"line_end":24,"column_start":5,"column_end":22},"name":"InvalidLastSymbol","qualname":"::decode::DecodeError::InvalidLastSymbol","value":"DecodeError::InvalidLastSymbol(usize, u8)","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.\n This is indicative of corrupted or truncated Base64.\n Unlike `InvalidByte`, which reports symbols that aren't in the alphabet, this error is for\n symbols that are in the alphabet but represent nonsensical encodings.\n","sig":null,"attributes":[{"value":"/ The last non-padding input symbol's encoded 6 bits have nonzero bits that will be discarded.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126611,"byte_end":126707,"line_start":20,"line_end":20,"column_start":5,"column_end":101}},{"value":"/ This is indicative of corrupted or truncated Base64.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126712,"byte_end":126768,"line_start":21,"line_end":21,"column_start":5,"column_end":61}},{"value":"/ Unlike `InvalidByte`, which reports symbols that aren't in the alphabet, this error is for","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126773,"byte_end":126867,"line_start":22,"line_end":22,"column_start":5,"column_end":99}},{"value":"/ symbols that are in the alphabet but represent nonsensical encodings.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126872,"byte_end":126945,"line_start":23,"line_end":23,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":735},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126968,"byte_end":126973,"line_start":24,"line_end":24,"column_start":23,"column_end":28},"name":"0","qualname":"::decode::DecodeError::InvalidLastSymbol::0","value":"usize","parent":{"krate":0,"index":733},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":736},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126975,"byte_end":126977,"line_start":24,"line_end":24,"column_start":30,"column_end":32},"name":"1","qualname":"::decode::DecodeError::InvalidLastSymbol::1","value":"u8","parent":{"krate":0,"index":733},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":737},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127136,"byte_end":127150,"line_start":27,"line_end":27,"column_start":5,"column_end":19},"name":"InvalidPadding","qualname":"::decode::DecodeError::InvalidPadding","value":"DecodeError::InvalidPadding","parent":{"krate":0,"index":726},"children":[],"decl_id":null,"docs":" The nature of the padding was not as configured: absent or incorrect when it must be\n canonical, or present when it must be absent, etc.\n","sig":null,"attributes":[{"value":"/ The nature of the padding was not as configured: absent or incorrect when it must be","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":126984,"byte_end":127072,"line_start":25,"line_end":25,"column_start":5,"column_end":93}},{"value":"/ canonical, or present when it must be absent, etc.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127077,"byte_end":127131,"line_start":26,"line_end":26,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":726},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":125938,"byte_end":125949,"line_start":10,"line_end":10,"column_start":10,"column_end":21},"name":"DecodeError","qualname":"::decode::DecodeError","value":"enum DecodeError {\n    InvalidByte(usize, u8),\n    InvalidLength,\n    InvalidLastSymbol(usize, u8),\n    InvalidPadding,\n}","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":731},{"krate":0,"index":733},{"krate":0,"index":737}],"decl_id":null,"docs":" Errors that can occur while decoding.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while decoding.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":125848,"byte_end":125889,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127198,"byte_end":127201,"line_start":31,"line_end":31,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DecodeError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10302},"children":[],"decl_id":{"krate":2,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127774,"byte_end":127779,"line_start":45,"line_end":45,"column_start":8,"column_end":13},"name":"cause","qualname":"<DecodeError as std::error::Error>::cause","value":"fn cause<'_>(&'_ Self) -> Option<&'_ dyn error::Error>","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2580},"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":751},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127999,"byte_end":128010,"line_start":54,"line_end":54,"column_start":5,"column_end":16},"name":"DecodeError","qualname":"::decode::DecodeSliceError::DecodeError","value":"DecodeSliceError::DecodeError(DecodeError)","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" A [DecodeError] occurred\n","sig":null,"attributes":[{"value":"/ A [DecodeError] occurred","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127966,"byte_end":127994,"line_start":53,"line_end":53,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":753},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128011,"byte_end":128022,"line_start":54,"line_end":54,"column_start":17,"column_end":28},"name":"0","qualname":"::decode::DecodeSliceError::DecodeError::0","value":"decode::DecodeError","parent":{"krate":0,"index":751},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":754},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128181,"byte_end":128200,"line_start":58,"line_end":58,"column_start":5,"column_end":24},"name":"OutputSliceTooSmall","qualname":"::decode::DecodeSliceError::OutputSliceTooSmall","value":"DecodeSliceError::OutputSliceTooSmall","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":" The provided slice _may_ be too small.","sig":null,"attributes":[{"value":"/ The provided slice _may_ be too small.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128029,"byte_end":128071,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128076,"byte_end":128079,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ The check is conservative (assumes the last triplet of output bytes will all be needed).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128084,"byte_end":128176,"line_start":57,"line_end":57,"column_start":5,"column_end":97}}]},{"kind":"Enum","id":{"krate":0,"index":750},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127943,"byte_end":127959,"line_start":52,"line_end":52,"column_start":10,"column_end":26},"name":"DecodeSliceError","qualname":"::decode::DecodeSliceError","value":"enum DecodeSliceError { DecodeError(DecodeError), OutputSliceTooSmall, }","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":754}],"decl_id":null,"docs":" Errors that can occur while decoding into a slice.\n","sig":null,"attributes":[{"value":"/ Errors that can occur while decoding into a slice.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127840,"byte_end":127894,"line_start":50,"line_end":50,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128253,"byte_end":128256,"line_start":62,"line_end":62,"column_start":8,"column_end":11},"name":"fmt","qualname":"<DecodeSliceError as std::fmt::Display>::fmt","value":"fn fmt<'_, '_, '_>(&'_ Self, &'_ mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10302},"children":[],"decl_id":{"krate":2,"index":10303},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128579,"byte_end":128584,"line_start":72,"line_end":72,"column_start":8,"column_end":13},"name":"cause","qualname":"<DecodeSliceError as std::error::Error>::cause","value":"fn cause<'_>(&'_ Self) -> Option<&'_ dyn error::Error>","parent":{"krate":1,"index":2576},"children":[],"decl_id":{"krate":1,"index":2580},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128832,"byte_end":128836,"line_start":81,"line_end":81,"column_start":8,"column_end":12},"name":"from","qualname":"<DecodeSliceError as std::convert::From>::from","value":"fn from(DecodeError) -> Self","parent":{"krate":2,"index":3169},"children":[],"decl_id":{"krate":2,"index":3171},"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":598},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129124,"byte_end":129130,"line_start":91,"line_end":91,"column_start":8,"column_end":14},"name":"decode","qualname":"::decode::decode","value":"fn decode<T>(T) -> Result<Vec<u8>, DecodeError> where T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Decode base64 using the [`STANDARD` engine](STANDARD).","sig":null,"attributes":[{"value":"/ Decode base64 using the [`STANDARD` engine](STANDARD).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128913,"byte_end":128971,"line_start":86,"line_end":86,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128972,"byte_end":128975,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ See [Engine::decode].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128976,"byte_end":129001,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"deprecated(since = \"0.21.0\", note = \"Use Engine::decode\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129002,"byte_end":129062,"line_start":89,"line_end":89,"column_start":1,"column_end":61}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129063,"byte_end":129116,"line_start":90,"line_end":90,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":600},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129492,"byte_end":129505,"line_start":101,"line_end":101,"column_start":8,"column_end":21},"name":"decode_engine","qualname":"::decode::decode_engine","value":"fn decode_engine<E, T, '_>(T, &'_ E) -> Result<Vec<u8>, DecodeError> where\nE: Engine, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Decode from string reference as octets using the specified [Engine].","sig":null,"attributes":[{"value":"/ Decode from string reference as octets using the specified [Engine].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129221,"byte_end":129293,"line_start":95,"line_end":95,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129294,"byte_end":129297,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ See [Engine::decode].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129298,"byte_end":129323,"line_start":97,"line_end":97,"column_start":1,"column_end":26}},{"value":"/Returns a `Result` containing a `Vec<u8>`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129324,"byte_end":129369,"line_start":98,"line_end":98,"column_start":1,"column_end":46}},{"value":"deprecated(since = \"0.21.0\", note = \"Use Engine::decode\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129370,"byte_end":129430,"line_start":99,"line_end":99,"column_start":1,"column_end":61}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129431,"byte_end":129484,"line_start":100,"line_end":100,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":603},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129832,"byte_end":129849,"line_start":113,"line_end":113,"column_start":8,"column_end":25},"name":"decode_engine_vec","qualname":"::decode::decode_engine_vec","value":"fn decode_engine_vec<E, T, '_, '_>(T, &'_ mut Vec<u8>, &'_ E)\n-> Result<(), DecodeError> where E: Engine, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Decode from string reference as octets.","sig":null,"attributes":[{"value":"/ Decode from string reference as octets.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129628,"byte_end":129671,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129672,"byte_end":129675,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"/ See [Engine::decode_vec].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129676,"byte_end":129705,"line_start":110,"line_end":110,"column_start":1,"column_end":30}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129706,"byte_end":129759,"line_start":111,"line_end":111,"column_start":1,"column_end":54}},{"value":"deprecated(since = \"0.21.0\", note = \"Use Engine::decode_vec\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":129760,"byte_end":129824,"line_start":112,"line_end":112,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":606},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130168,"byte_end":130187,"line_start":125,"line_end":125,"column_start":8,"column_end":27},"name":"decode_engine_slice","qualname":"::decode::decode_engine_slice","value":"fn decode_engine_slice<E, T, '_, '_>(T, &'_ mut [u8], &'_ E)\n-> Result<usize, DecodeSliceError> where E: Engine, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Decode the input into the provided output slice.","sig":null,"attributes":[{"value":"/ Decode the input into the provided output slice.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130005,"byte_end":130057,"line_start":121,"line_end":121,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130058,"byte_end":130061,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ See [Engine::decode_slice].","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130062,"byte_end":130093,"line_start":123,"line_end":123,"column_start":1,"column_end":32}},{"value":"deprecated(since = \"0.21.0\", note = \"Use Engine::decode_slice\")","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130094,"byte_end":130160,"line_start":124,"line_end":124,"column_start":1,"column_end":67}}]},{"kind":"Function","id":{"krate":0,"index":609},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":131162,"byte_end":131182,"line_start":156,"line_end":156,"column_start":8,"column_end":28},"name":"decoded_len_estimate","qualname":"::decode::decoded_len_estimate","value":"fn decoded_len_estimate(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns a conservative estimate of the decoded size of `encoded_len` base64 symbols (rounded up\n to the next group of 3 decoded bytes).","sig":null,"attributes":[{"value":"/ Returns a conservative estimate of the decoded size of `encoded_len` base64 symbols (rounded up","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130350,"byte_end":130449,"line_start":133,"line_end":133,"column_start":1,"column_end":100}},{"value":"/ to the next group of 3 decoded bytes).","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130450,"byte_end":130492,"line_start":134,"line_end":134,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130493,"byte_end":130496,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ The resulting length will be a safe choice for the size of a decode buffer, but may have up to","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130497,"byte_end":130595,"line_start":136,"line_end":136,"column_start":1,"column_end":99}},{"value":"/ 2 trailing bytes that won't end up being needed.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130596,"byte_end":130648,"line_start":137,"line_end":137,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130649,"byte_end":130652,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130653,"byte_end":130667,"line_start":139,"line_end":139,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130668,"byte_end":130671,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130672,"byte_end":130679,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/ use base64::decoded_len_estimate;","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130680,"byte_end":130717,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130718,"byte_end":130721,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(3, decoded_len_estimate(1));","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130722,"byte_end":130765,"line_start":144,"line_end":144,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(3, decoded_len_estimate(2));","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130766,"byte_end":130809,"line_start":145,"line_end":145,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(3, decoded_len_estimate(3));","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130810,"byte_end":130853,"line_start":146,"line_end":146,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(3, decoded_len_estimate(4));","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130854,"byte_end":130897,"line_start":147,"line_end":147,"column_start":1,"column_end":44}},{"value":"/ // start of the next quad of encoded symbols","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130898,"byte_end":130946,"line_start":148,"line_end":148,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(6, decoded_len_estimate(5));","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130947,"byte_end":130990,"line_start":149,"line_end":149,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130991,"byte_end":130998,"line_start":150,"line_end":150,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":130999,"byte_end":131002,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":131003,"byte_end":131015,"line_start":152,"line_end":152,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":131016,"byte_end":131019,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Panics if decoded length estimation overflows.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":131020,"byte_end":131070,"line_start":154,"line_end":154,"column_start":1,"column_end":51}},{"value":"/ This would happen for sizes within a few bytes of the maximum value of `usize`.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":131071,"byte_end":131154,"line_start":155,"line_end":155,"column_start":1,"column_end":84}}]},{"kind":"Mod","id":{"krate":0,"index":633},"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":643},{"krate":0,"index":646}],"decl_id":null,"docs":" Preconfigured engines for common use cases.","sig":null,"attributes":[{"value":"/ Preconfigured engines for common use cases.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137596,"byte_end":137643,"line_start":1,"line_end":1,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137644,"byte_end":137647,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These are re-exports of `const` engines in [crate::engine::general_purpose], renamed with a `BASE64_`","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137648,"byte_end":137753,"line_start":3,"line_end":3,"column_start":1,"column_end":106}},{"value":"/ prefix for those who prefer to `use` the entire path to a name.","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137754,"byte_end":137821,"line_start":4,"line_end":4,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137822,"byte_end":137825,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137826,"byte_end":137840,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137841,"byte_end":137844,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137845,"byte_end":137852,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"/ use base64::prelude::{Engine as _, BASE64_STANDARD_NO_PAD};","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137853,"byte_end":137916,"line_start":9,"line_end":9,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137917,"byte_end":137920,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(\"c29tZSBieXRlcw\", &BASE64_STANDARD_NO_PAD.encode(b\"some bytes\"));","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":137921,"byte_end":138001,"line_start":11,"line_end":11,"column_start":1,"column_end":81}},{"value":"/ ```","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/prelude.rs","byte_start":138002,"byte_end":138009,"line_start":12,"line_end":12,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/chunked_encoder.rs","byte_start":7609,"byte_end":7623,"line_start":26,"line_end":26,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":36},{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/chunked_encoder.rs","byte_start":9931,"byte_end":9941,"line_start":90,"line_end":90,"column_start":10,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":47}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/chunked_encoder.rs","byte_start":10116,"byte_end":10126,"line_start":97,"line_end":97,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14781,"byte_end":14794,"line_start":23,"line_end":23,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":15100,"byte_end":15113,"line_start":33,"line_end":33,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":15441,"byte_end":15454,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":18999,"byte_end":19012,"line_start":58,"line_end":58,"column_start":49,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":19520,"byte_end":19533,"line_start":71,"line_end":71,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23540,"byte_end":23553,"line_start":174,"line_end":174,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":32564,"byte_end":32577,"line_start":83,"line_end":83,"column_start":50,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":32982,"byte_end":32995,"line_start":96,"line_end":96,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":217},{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39051,"byte_end":39064,"line_start":248,"line_end":248,"column_start":49,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":227}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":46052,"byte_end":46065,"line_start":400,"line_end":400,"column_start":44,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47937,"byte_end":47956,"line_start":60,"line_end":60,"column_start":37,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48665,"byte_end":48684,"line_start":80,"line_end":80,"column_start":21,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48967,"byte_end":48986,"line_start":87,"line_end":87,"column_start":51,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49645,"byte_end":49651,"line_start":111,"line_end":111,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":270}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":50019,"byte_end":50043,"line_start":124,"line_end":124,"column_start":36,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/decode.rs","byte_start":84287,"byte_end":84309,"line_start":31,"line_end":31,"column_start":6,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/decode.rs","byte_start":84815,"byte_end":84837,"line_start":47,"line_end":47,"column_start":25,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68513,"byte_end":68527,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68984,"byte_end":68998,"line_start":41,"line_end":41,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":410},{"krate":0,"index":411},{"krate":0,"index":412},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78531,"byte_end":78551,"line_start":248,"line_end":248,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81730,"byte_end":81750,"line_start":315,"line_end":315,"column_start":18,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":432}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81875,"byte_end":81895,"line_start":322,"line_end":322,"column_start":17,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103185,"byte_end":103193,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105552,"byte_end":105560,"line_start":96,"line_end":96,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106103,"byte_end":106121,"line_start":117,"line_end":117,"column_start":23,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106608,"byte_end":106626,"line_start":129,"line_end":129,"column_start":23,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114572,"byte_end":114588,"line_start":143,"line_end":143,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114829,"byte_end":114845,"line_start":152,"line_end":152,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127177,"byte_end":127188,"line_start":30,"line_end":30,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127753,"byte_end":127764,"line_start":44,"line_end":44,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128227,"byte_end":128243,"line_start":61,"line_end":61,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128553,"byte_end":128569,"line_start":71,"line_end":71,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128806,"byte_end":128822,"line_start":80,"line_end":80,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":597}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6112,"byte_end":6119,"line_start":149,"line_end":149,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":52}},{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6164,"byte_end":6168,"line_start":151,"line_end":151,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":98}},{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6213,"byte_end":6218,"line_start":153,"line_end":153,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":163}},{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6229,"byte_end":6235,"line_start":155,"line_end":155,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":289}},{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":52007,"byte_end":52022,"line_start":14,"line_end":14,"column_start":9,"column_end":24},"ref_id":{"krate":0,"index":320}},{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6270,"byte_end":6278,"line_start":158,"line_end":158,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":477}},{"kind":"Mod","span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/lib.rs","byte_start":6820,"byte_end":6827,"line_start":174,"line_end":174,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":633}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/chunked_encoder.rs","byte_start":7609,"byte_end":7623,"line_start":26,"line_end":26,"column_start":30,"column_end":44},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":28},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/chunked_encoder.rs","byte_start":9931,"byte_end":9941,"line_start":90,"line_end":90,"column_start":10,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":42},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/chunked_encoder.rs","byte_start":10116,"byte_end":10126,"line_start":97,"line_end":97,"column_start":19,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":42},"to":{"krate":0,"index":24}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":14781,"byte_end":14794,"line_start":23,"line_end":23,"column_start":25,"column_end":38},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":73},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":15100,"byte_end":15113,"line_start":33,"line_end":33,"column_start":37,"column_end":50},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":73},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/display.rs","byte_start":15441,"byte_end":15454,"line_start":44,"line_end":44,"column_start":51,"column_end":64},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":89},"to":{"krate":0,"index":24}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":18999,"byte_end":19012,"line_start":58,"line_end":58,"column_start":49,"column_end":62},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":120},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":19520,"byte_end":19533,"line_start":71,"line_end":71,"column_start":34,"column_end":47},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":120},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/read/decoder.rs","byte_start":23540,"byte_end":23553,"line_start":174,"line_end":174,"column_start":47,"column_end":60},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":120},"to":{"krate":1,"index":4667}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":32564,"byte_end":32577,"line_start":83,"line_end":83,"column_start":50,"column_end":63},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":10295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":32982,"byte_end":32995,"line_start":96,"line_end":96,"column_start":35,"column_end":48},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":39051,"byte_end":39064,"line_start":248,"line_end":248,"column_start":49,"column_end":62},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":188},"to":{"krate":1,"index":4724}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder.rs","byte_start":46052,"byte_end":46065,"line_start":400,"line_end":400,"column_start":44,"column_end":57},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":3510}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":47937,"byte_end":47956,"line_start":60,"line_end":60,"column_start":37,"column_end":56},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48665,"byte_end":48684,"line_start":80,"line_end":80,"column_start":21,"column_end":40},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":48967,"byte_end":48986,"line_start":87,"line_end":87,"column_start":51,"column_end":70},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":4724}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":49645,"byte_end":49651,"line_start":111,"line_end":111,"column_start":22,"column_end":28},"kind":{"Impl":{"id":16}},"from":{"krate":5,"index":8368},"to":{"krate":0,"index":264}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/write/encoder_string_writer.rs","byte_start":50019,"byte_end":50043,"line_start":124,"line_end":124,"column_start":36,"column_end":60},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":271},"to":{"krate":1,"index":4724}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/decode.rs","byte_start":84287,"byte_end":84309,"line_start":31,"line_end":31,"column_start":6,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/decode.rs","byte_start":84815,"byte_end":84837,"line_start":47,"line_end":47,"column_start":25,"column_end":47},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":365},"to":{"krate":0,"index":472}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68513,"byte_end":68527,"line_start":27,"line_end":27,"column_start":6,"column_end":20},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":401},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":68984,"byte_end":68998,"line_start":41,"line_end":41,"column_start":24,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":401},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":78531,"byte_end":78551,"line_start":248,"line_end":248,"column_start":6,"column_end":26},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":650},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81730,"byte_end":81750,"line_start":315,"line_end":315,"column_start":18,"column_end":38},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":650},"to":{"krate":2,"index":3241}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/general_purpose/mod.rs","byte_start":81875,"byte_end":81895,"line_start":322,"line_end":322,"column_start":17,"column_end":37},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":650},"to":{"krate":0,"index":470}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53286,"byte_end":53290,"line_start":39,"line_end":39,"column_start":19,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":3263},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/engine/mod.rs","byte_start":53293,"byte_end":53297,"line_start":39,"line_end":39,"column_start":26,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":3275},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":103185,"byte_end":103193,"line_start":27,"line_end":27,"column_start":6,"column_end":14},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":677},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":105552,"byte_end":105560,"line_start":96,"line_end":96,"column_start":24,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":677},"to":{"krate":2,"index":3176}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106103,"byte_end":106121,"line_start":117,"line_end":117,"column_start":23,"column_end":41},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":692},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/alphabet.rs","byte_start":106608,"byte_end":106626,"line_start":129,"line_end":129,"column_start":23,"column_end":41},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":692},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114572,"byte_end":114588,"line_start":143,"line_end":143,"column_start":23,"column_end":39},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":713},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/encode.rs","byte_start":114829,"byte_end":114845,"line_start":152,"line_end":152,"column_start":23,"column_end":39},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":713},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127177,"byte_end":127188,"line_start":30,"line_end":30,"column_start":23,"column_end":34},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":726},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":127753,"byte_end":127764,"line_start":44,"line_end":44,"column_start":23,"column_end":34},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":726},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128227,"byte_end":128243,"line_start":61,"line_end":61,"column_start":23,"column_end":39},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":750},"to":{"krate":2,"index":10302}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128553,"byte_end":128569,"line_start":71,"line_end":71,"column_start":23,"column_end":39},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":750},"to":{"krate":1,"index":2576}},{"span":{"file_name":"/Users/itayeshkar/.cargo/registry/src/github.com-1ecc6299db9ec823/base64-0.21.0/src/decode.rs","byte_start":128806,"byte_end":128822,"line_start":80,"line_end":80,"column_start":28,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":750},"to":{"krate":2,"index":3169}}]}